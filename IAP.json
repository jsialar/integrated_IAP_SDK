{"swagger": "2.0", "info": {"title": "IAP Services", "version": "v1"}, "host": "use1.platform.illumina.com", "schemes": ["https"], "paths": {"/v1/accounts/{accountId}": {"get": {"tags": ["Accounts"], "summary": "Get requested account id info require authorization Bearer token", "description": "Get requested account id info", "operationId": "getAccount", "produces": ["application/json"], "parameters": [{"in": "path", "name": "accountId", "required": true, "type": "string"}], "responses": {"200": {"description": "The account information returned successfully", "schema": {"$ref": "#/definitions/AccountResponse"}}, "401": {"description": "The provided token is unauthorized."}, "403": {"description": "You do not have permission to access this resource."}, "404": {"description": "The resource was not found at the given path."}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/files": {"post": {"tags": ["Files"], "summary": "Create a file entry in GDS and get temporary credentials for upload", "description": "Create a file entry in GDS. Returns temporary credentials for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically.", "operationId": "createFile", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess", "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/CreateFileRequest"}}], "responses": {"201": {"description": "Created new File.", "schema": {"$ref": "#/definitions/FileWriteableResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Make sure the new File doesn't already exist.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["Files"], "summary": "Get a list of files", "description": "Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items", "operationId": "listFiles", "produces": ["application/json"], "parameters": [{"in": "query", "name": "volume.id", "description": "Optional field that specifies comma-separated volume IDs to include in the list", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "volume.name", "description": "Optional field that specifies comma-separated volume names to include in the list", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "path", "description": "Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/).", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "isUploaded", "description": "Optional field to filter by Uploaded files", "type": "boolean"}, {"in": "query", "name": "archiveStatus", "description": "Optional field that specifies comma-separated Archive Statuses to include in the list", "type": "string"}, {"in": "query", "name": "recursive", "description": "Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths", "type": "boolean"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, PresignedUrl, InheritedAcl", "type": "string"}, {"in": "query", "name": "pageSize", "description": "START_DESC END_DESC", "type": "integer", "format": "int32", "maximum": 10000, "minimum": 0}, {"in": "query", "name": "pageToken", "description": "START_DESC END_DESC", "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "metadata.include", "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.", "type": "string"}, {"in": "query", "name": "metadata.exclude", "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FileListResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/files/{fileId}": {"get": {"tags": ["Files"], "summary": "Get details about a file, including a pre-signed URL for download", "description": "Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3.", "operationId": "getFile", "produces": ["application/json"], "parameters": [{"in": "path", "name": "fileId", "description": "Unique identifier for the file to retrieve.", "required": true, "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "metadata.include", "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.", "type": "string"}, {"in": "query", "name": "metadata.exclude", "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FileResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "File not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Files"], "summary": "Update a file entry in GDS and get temporary credentials for upload", "description": "Update a file entry in GDS. Returns temporary credentials for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content.", "operationId": "updateFile", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "fileId", "description": "Unique identifier for the file to be updated.", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess", "type": "string"}, {"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/UpdateFileRequest"}}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FileWriteableResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "File not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Files"], "summary": "Permanently delete a file", "description": "Permanently delete a file entry and its underlying content", "operationId": "deleteFile", "produces": ["text/plain", "application/json", "text/json"], "parameters": [{"in": "path", "name": "fileId", "description": "Unique identifier for the file to delete.", "required": true, "type": "string"}], "responses": {"204": {"description": "No Content."}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "File not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/files/{fileId}:archive": {"post": {"tags": ["Files"], "summary": "Archive a file", "description": "Archives a file to a lower storage cost tier.", "operationId": "archiveFile", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "fileId", "description": "Unique identifier for the file to be archived.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/FileArchiveRequest"}}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FileResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "File not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/files/{fileId}:unarchive": {"post": {"tags": ["Files"], "summary": "Unarchive a file", "description": "Unarchive a file from a lower storage cost tier.", "operationId": "unarchiveFile", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "fileId", "description": "Unique identifier for the file to be unarchived.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/FileUnarchiveRequest"}}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/FileResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "File not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/folders": {"get": {"tags": ["Folders"], "summary": "Get a list of folders", "description": "Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items", "operationId": "listFolders", "produces": ["application/json"], "parameters": [{"in": "query", "name": "volume.id", "description": "Optional field that specifies comma-separated volume IDs to include in the list", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "volume.name", "description": "Optional field that specifies comma-separated volume names to include in the list", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "path", "description": "Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/).", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "jobStatuses", "description": "Optional field that specifies comma-separated JobStatuses to include in the list", "type": "string"}, {"in": "query", "name": "acls", "description": "Optional field that specifies comma-separated acls to include in the list", "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"in": "query", "name": "recursive", "description": "Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths", "type": "boolean"}, {"in": "query", "name": "pageSize", "description": "START_DESC END_DESC", "type": "integer", "format": "int32", "maximum": 10000, "minimum": 0}, {"in": "query", "name": "pageToken", "description": "START_DESC END_DESC", "type": "string"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl", "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "metadata.include", "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.", "type": "string"}, {"in": "query", "name": "metadata.exclude", "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FolderListResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Folders"], "summary": "Create a folder in GDS and receive credentials for upload", "description": "Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.", "operationId": "createFolder", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess", "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/CreateFolderRequest"}}], "responses": {"201": {"description": "Created new Folder.", "schema": {"$ref": "#/definitions/FolderWriteableResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Make sure the new Folder doesn't already exist.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/folders/{folderId}": {"get": {"tags": ["Folders"], "summary": "Get information about a folder in GDS.", "description": "Get information for the specified folder ID.", "operationId": "getFolder", "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to retrieve.", "required": true, "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "metadata.include", "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.", "type": "string"}, {"in": "query", "name": "metadata.exclude", "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FolderResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Folders"], "summary": "Update a folder content or acl", "description": "Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time.  Optionally overwrite the acl for this folder if acl is provided in the request.", "operationId": "updateFolder", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to be updated.", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess", "type": "string"}, {"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/FolderUpdateRequest"}}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/FolderWriteableResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Folders"], "summary": "Deletes a folder by id", "operationId": "deleteFolder", "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to be deleted.", "required": true, "type": "string"}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/FolderResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/folders/{folderId}/jobs/{jobId}": {"get": {"tags": ["Folders"], "summary": "Get status of a folder job in GDS", "description": "Get status of a folder job in GDS.", "operationId": "getFolderJob", "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder related to the job.", "required": true, "type": "string"}, {"in": "path", "name": "jobId", "description": "The id of the job", "required": true, "type": "string"}], "responses": {"200": {"description": "Returned job.", "schema": {"$ref": "#/definitions/JobResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Bad request."}}}}, "/v1/folders/{folderId}/sessions": {}, "/v1/folders/{folderId}/sessions/{sessionId}": {"get": {"tags": ["Folders"], "summary": "Get status of a folder upload in GDS", "description": "Get status of a folder upload in GDS.", "operationId": "getFolderSession", "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder related to the upload session.", "required": true, "type": "string"}, {"in": "path", "name": "sessionId", "description": "The id of the upload session", "required": true, "type": "string"}], "responses": {"200": {"description": "Completed upload session.", "schema": {"$ref": "#/definitions/SessionResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Bad request."}}}}, "/v1/folders/{folderId}/sessions/{sessionId}:complete": {"post": {"tags": ["Folders"], "summary": "Complete a folder upload in GDS", "description": "Complete a folder upload in GDS.", "operationId": "completeFolderSession", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder related to the upload session.", "required": true, "type": "string"}, {"in": "path", "name": "sessionId", "description": "The id of the upload session", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "The request body", "required": true, "schema": {"$ref": "#/definitions/CompleteSessionRequest"}}], "responses": {"200": {"description": "Completed upload session.", "schema": {"$ref": "#/definitions/SessionResponse"}}, "202": {"description": "Upload session in progress.", "schema": {"$ref": "#/definitions/SessionResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/folders/{folderId}:archive": {"post": {"tags": ["Folders"], "summary": "Archive a folder", "description": "Archives a folder to a lower storage cost tier.", "operationId": "archiveFolder", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to be archived.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/FolderArchiveRequest"}}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/FolderResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/folders/{folderId}:copy": {"post": {"tags": ["Folders"], "summary": "Copy a folder", "description": "Copy a folder into a target parent folder", "operationId": "copyFolder", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to be copied.", "required": true, "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to copy from a shared folder in another tenant", "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/FolderCopyRequest"}}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/JobResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/folders/{folderId}:unarchive": {"post": {"tags": ["Folders"], "summary": "Unarchive a folder", "description": "Unarchive a folder from a lower storage cost tier.", "operationId": "unarchiveFolder", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "folderId", "description": "Unique identifier for the folder to be unarchived.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/FolderUnarchiveRequest"}}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/FolderResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Folder not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/health": {"get": {"tags": ["Health"], "summary": "Returns the health status for all services.", "description": "Returns the health status for all services.", "operationId": "serviceHealth", "produces": ["application/json"], "responses": {"200": {"description": "Health check succeeded", "schema": {"$ref": "#/definitions/SystemHealthResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/projects": {"get": {"tags": ["Projects"], "summary": "Get a list of available projects. Requires user authorization Bearer token.", "description": "Get a list of available projects", "operationId": "listProjects", "produces": ["application/json"], "parameters": [{"in": "query", "name": "pageToken", "type": "string"}], "responses": {"200": {"description": "Projects returned successfully", "schema": {"$ref": "#/definitions/ProjectPagedItems"}}, "400": {"description": "The provided page token is invalid.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The provided access token is unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/regions": {"get": {"tags": ["Regions"], "summary": "Get a list of available regions", "description": "Get a list of available regions", "operationId": "listRegions", "produces": ["application/json"], "parameters": [{"in": "query", "name": "instrumentType", "description": "Instrument type", "type": "string"}, {"in": "query", "name": "version", "description": "Instrument version", "type": "string"}], "responses": {"200": {"description": "Regions found and returned successfully.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Region"}}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/sequencing/analysisDatasets": {"get": {"tags": ["AnalysisDatasets"], "summary": "List analysis datasets.", "description": "Return a list of associated analysis datasets.", "operationId": "listAnalysisDatasets", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount", "InputSamples"], "type": "string"}}, {"in": "query", "name": "analysisRunId", "description": "Optional parameter. Set to filter the analysis datasets list and only include analysis datasets associated with the provided analysis runs.", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Analysis datasets returned successfully.", "schema": {"$ref": "#/definitions/AnalysisDatasetCompactAnalysisDatasetSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisRuns": {"get": {"tags": ["SequencingAnalysisRuns"], "summary": "Get a list of analysis runs.", "description": "Get a list of analysis runs accessible by the request token.", "operationId": "listSequencingAnalysisRuns", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount", "SequencingRun"], "type": "string"}}, {"in": "query", "name": "status", "description": "Optional parameter. Set to filter the analysis run list and only include analysis runs with the specified status.", "type": "array", "items": {"description": "Defines the status of a SequencingAnalysisRun", "enum": ["Aborted", "Aborting", "Failed", "Launched", "Launching", "New", "Running", "Starting", "Succeeded", "TimedOut"], "type": "string"}}, {"in": "query", "name": "sequencingRunId", "description": "Optional parameter. Set to filter the analysis run and only include analysis runs associated with the specific sequencing runs", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "SequencingAnalysisRun list returned successfully.", "schema": {"$ref": "#/definitions/SequencingAnalysisRunCompactSequencingAnalysisRunSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisRuns/{analysisRunId}": {"get": {"tags": ["SequencingAnalysisRuns"], "summary": "Get SequencingAnalysisRun details.", "description": "For a given ID, return information about that SequencingAnalysisRun.", "operationId": "getSequencingAnalysisRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisRunId", "description": "ID of the analysis run", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["IncludeAnalysisDatasets"], "type": "string"}}], "responses": {"200": {"description": "SequencingAnalysisRun details returned successfully.", "schema": {"$ref": "#/definitions/SequencingAnalysisRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No SequencingAnalysisRun found for given SequencingAnalysisRun ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The SequencingAnalysisRun with the given SequencingAnalysisRun ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisRuns/{analysisRunId}:abort": {}, "/v1/sequencing/analysisRuns/{analysisRunId}:sync": {"post": {"tags": ["SequencingAnalysisRuns"], "summary": "Sync A SequencingAnalysisRun.", "description": "For a given ID, sync the SequencingAnalysisRun.", "operationId": "syncSequencingAnalysisRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisRunId", "required": true, "type": "string"}], "responses": {"200": {"description": "SequencingAnalysisRun is synced successfully.", "schema": {"$ref": "#/definitions/SequencingAnalysisRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Sync SequencingAnalysisRun failed due to conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No SequencingAnalysisRun found for given SequencingAnalysisRun ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The SequencingAnalysisRun with the given SequencingAnalysisRun ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions": {"post": {"tags": ["AnalysisDefinitions"], "summary": "Create an analysis definition.", "description": "Create an analysis definition, and return information about that analysis definition.", "operationId": "createAnalysisDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateAnalysisDefinitionRequest"}}], "responses": {"201": {"description": "Analysis definition created successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis definition not created due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["AnalysisDefinitions"], "summary": "Get a list of analysis definitions.", "description": "Get a list of analysis definitions accessible by the request token.", "operationId": "listAnalysisDefinitions", "produces": ["application/json"], "parameters": [{"in": "query", "name": "analysisLocation", "description": "Filter parameter to only show Local/Cloud analysis version definitions", "type": "string", "enum": ["Local", "Cloud", "Edge"]}, {"in": "query", "name": "regulatoryMode", "description": "Filter by regulatory modes using comma separated values, e.g <example>RUO,IVD,IUO</example>", "type": "array", "items": {"description": "Regulatory mode", "enum": ["RUO", "IVD", "IUO"], "type": "string"}}, {"in": "query", "name": "instrumentPlatform", "description": "Instrument platform", "type": "string"}, {"in": "query", "name": "instrumentType", "description": "Instrument type", "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount", "AnalysisVersions"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "List of analysis definitions returned successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinitionCompactAnalysisDefinitionSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/versions/{analysisVersionDefinitionId}": {"get": {"tags": ["AnalysisVersionDefinitions"], "summary": "Get details of an analysis definition version by ID or URN.", "description": "For a given ID or URN, get details of an analysis definition version accessible by the current request token.", "operationId": "getAnalysisVersionDefinitionByIdOrUrn", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisVersionDefinitionId", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["CompatibleLibraryPrepKits", "CompatibleGenomes"], "type": "string"}}], "responses": {"200": {"description": "Analysis version definitions returned successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition version found for given ID/URN.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/versions/{analysisVersionDefinitionId}/acl": {"put": {"tags": ["AnalysisVersionDefinitions"], "summary": "Replace the access control list of an analysis version definition with the input access control list.", "description": "Replace the access control list of an analysis version definition with the input access control list, and return information about that analysis definition.", "operationId": "replaceAnalysisVersionDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisVersionDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["AnalysisVersionDefinitions"], "summary": "Merge the access control list of an analysis version definition with the input access control list.", "description": "Merge the access control list of an analysis version definition with the input access control list, and return information about that analysis definition.", "operationId": "mergeAnalysisVersionDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisVersionDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["AnalysisVersionDefinitions"], "summary": "Remove the access control list of an analysis version definition.", "description": "Remove the access control list of an analysis version definition, and return information about that analysis definition.", "operationId": "removeAnalysisVersionDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisVersionDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list of the analysis definition removed successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/versions/{analysisVersionDefinitionId}:render": {"post": {"tags": ["AnalysisVersionDefinitions"], "summary": "Dynamically render an analysis definition version by ID or URN.", "description": "For a given ID or URN, get details of an analysis definition version accessible by the current request token.", "operationId": "renderAnalysisVersionDefinitionByIdOrUrn", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisVersionDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/RenderAnalysisVersionDefinitionRequest"}}], "responses": {"200": {"description": "Analysis version definitions is rendered successfully.", "schema": {"$ref": "#/definitions/RenderAnalysisVersionDefinitionResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition version found for given ID/URN.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis definition version cannot be rendered due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/{analysisDefinitionId}": {"get": {"tags": ["AnalysisDefinitions"], "summary": "Get analysis definition details.", "description": "For a given analysis definition ID, get the analysis definition details.", "operationId": "getAnalysisDefinition", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "description": "ID of the analysis definition", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["CompatibleLibraryPrepKits", "AnalysisVersions"], "type": "string"}}], "responses": {"200": {"description": "Analysis definition details returned successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given analysis definition ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition for the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["AnalysisDefinitions"], "summary": "Update analysis definition details.", "description": "For a given analysis definition ID, update the analysis definition details.", "operationId": "updateAnalysisDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAnalysisDefinitionRequest"}}], "responses": {"200": {"description": "Analysis definition details updated successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given analysis definition ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis definition not updated due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition for the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/acl": {"put": {"tags": ["AnalysisDefinitions"], "summary": "Replace the access control list of an analysis definition.", "description": "Replace the access control list of an analysis definition, and return information about that analysis definition.", "operationId": "replaceAnalysisDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["AnalysisDefinitions"], "summary": "Merge the access control list of an analysis definition with the input access control list.", "description": "Merge the access control list of an analysis definition with the input access control list, and return information about that analysis definition.", "operationId": "mergeAnalysisDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["AnalysisDefinitions"], "summary": "Remove the access control list of an analysis definition.", "description": "Remove the access control list of an analysis definition, and return information about that analysis definition.", "operationId": "removeAnalysisDefinitionAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list of the analysis definition removed successfully.", "schema": {"$ref": "#/definitions/AnalysisDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/versions": {"post": {"tags": ["AnalysisVersionDefinitions"], "summary": "Create an analysis version definition.", "description": "Create an analysis version definition, and return information about that analysis definition.", "operationId": "createAnalysisVersionDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateAnalysisVersionDefinitionRequest"}}], "responses": {"201": {"description": "Analysis version definition created successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis version definition not created due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["AnalysisVersionDefinitions"], "summary": "Get a list of analysis definition versions.", "description": "Get a list of analysis definition versions accessible by the current request token.", "operationId": "listAnalysisVersionDefinitions", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "description": "ID of the analysis definition", "required": true, "type": "string"}, {"in": "query", "name": "instrumentPlatform", "description": "Instrument platform", "type": "string"}, {"in": "query", "name": "instrumentType", "description": "Instrument type", "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Analysis version definitions returned successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinitionCompactAnalysisVersionDefinitionSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/versions/{versionName}": {"patch": {"tags": ["AnalysisVersionDefinitions"], "summary": "Update an analysis version definition.", "description": "Update an analysis version definition, and return information about that analysis definition.", "operationId": "updateAnalysisVersionDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "path", "name": "versionName", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAnalysisVersionDefinitionRequest"}}], "responses": {"200": {"description": "Analysis version definition updated successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis version definition found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The analysis version definition with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis version definition not updated due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["AnalysisVersionDefinitions"], "summary": "Get a specific analysis definition version by version name.", "description": "Get a specific analysis definition version accessible by the current request token.", "operationId": "getAnalysisVersionDefinition", "produces": ["application/json"], "parameters": [{"in": "path", "name": "analysisDefinitionId", "required": true, "type": "string"}, {"in": "path", "name": "versionName", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["CompatibleLibraryPrepKits", "CompatibleGenomes"], "type": "string"}}], "responses": {"200": {"description": "Analysis version definition returned successfully.", "schema": {"$ref": "#/definitions/AnalysisVersionDefinition"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis version definition found for given version name.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/genomes": {"get": {"tags": ["Genomes"], "summary": "Get a list of genomes.", "description": "Get a list of genomes accessible by the current request token.", "operationId": "listGenomes", "produces": ["application/json"], "parameters": [{"in": "query", "name": "analysisVersionDefinitionId", "description": "Filter genomes by ID of AnalysisVersionDefinition", "type": "string", "maxLength": 50, "minLength": 0}, {"in": "query", "name": "dragenVersion", "description": "Filter genomes by DragenVersion", "type": "string", "maxLength": 50, "minLength": 0}, {"in": "query", "name": "name", "description": "Filter genomes by comma-separated Name values", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Genomes returned successfully.", "schema": {"$ref": "#/definitions/GenomeCompactGenomeSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Genomes"], "summary": "Create a reference genome.", "description": "Create a reference genome, and return information about that reference genome.", "operationId": "createGenome", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateGenomeRequest"}}], "responses": {"201": {"description": "Genome created successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create genome. Conflict found (e.g. a genome with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/genomes/{genomeId}": {"get": {"tags": ["Genomes"], "summary": "Get genome details.", "description": "For a given genome ID, return information about that genome.", "operationId": "getGenome", "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "description": "The ID of the requested genome.", "required": true, "type": "string"}], "responses": {"200": {"description": "Genome details returned successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The genome with the given genome ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Genomes"], "summary": "Update genome details.", "description": "For a given genome ID, update the genome details.", "operationId": "updateGenome", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateGenomeRequest"}}], "responses": {"200": {"description": "Genome details updated successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Genome not updated due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The genome for the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Genomes"], "summary": "Delete genome.", "description": "For a given genome ID, delete the genome.", "operationId": "deleteGenome", "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "description": "ID of the genome", "required": true, "type": "string"}, {"in": "query", "name": "force", "description": "Force delete the genome", "type": "boolean"}], "responses": {"204": {"description": "Genome deleted successfully.", "schema": {"$ref": "#/definitions/NoContentResult"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Genome for the given genome ID has already been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/genomes/{genomeId}/acl": {"put": {"tags": ["Genomes"], "summary": "Replace the access control list of a genome with the input access control list.", "description": "Replace the access control list of a genome with the input access control list, and return information about that genome.", "operationId": "replaceGenomeAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list of genome updated successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The genome with the given genome ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Genomes"], "summary": "Merge the access control list of a genome with the input access control list.", "description": "Merge the access control list of a given genome with the input access control list, and return information about that genome.", "operationId": "mergeGenomeAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The genome with the given genome ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Genomes"], "summary": "Remove the access control list of a genome.", "description": "Remove the access control list of a given genome, and return information about that genome.", "operationId": "removeGenomeAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "genomeId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list removed successfully.", "schema": {"$ref": "#/definitions/Genome"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No genome found for given genome ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The genome with the given genome ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/indexadapterkits": {"get": {"tags": ["IndexAdapterKits"], "summary": "Get a list of index adapter kits.", "description": "Get a list of index adapter kits accessible by the current request token.", "operationId": "listIndexAdapterKits", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Index adapter kits returned successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKitCompactIndexAdapterKitSortFieldPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["IndexAdapterKits"], "summary": "Create an index adapter kit.", "description": "Create an index adapter kit, and return information about that index adapter kit.", "operationId": "createIndexAdapterKit", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateIndexAdapterKitRequest"}}], "responses": {"201": {"description": "Index adapter kit created successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create index adapter kit. Conflict found (e.g. an index adapter kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator."}}}}, "/v1/sequencing/indexadapterkits/definition": {"post": {"tags": ["IndexAdapterKits"], "summary": "Create an index adapter kit using a definition string.", "description": "Create an index adapter kit, and return information about that index adapter kit.", "operationId": "createIndexAdapterKitByDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateIndexAdapterKitByDefinitionRequest"}}], "responses": {"201": {"description": "Index adapter kit created successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create index adapter kit. Conflict found (e.g. an index adapter kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator."}}}}, "/v1/sequencing/indexadapterkits/{indexAdapterKitId}": {"patch": {"tags": ["IndexAdapterKits"], "summary": "Update an index adapter kit.", "description": "Update an index adapter kit, and return information about that index adapter kit.", "operationId": "updateIndexAdapterKit", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateIndexAdapterKitRequest"}}], "responses": {"200": {"description": "Index adapter kit updated successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to update index adapter kit. Conflict found (e.g. an index adapter kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["IndexAdapterKits"], "summary": "Get index adapter kit details.", "description": "For a given index adapter kit ID, get the index adapter kit details.", "operationId": "getIndexAdapterKit", "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "description": "ID of the index adapter kit", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["CompatibleLibraryPrepKits", "CanUpdate"], "type": "string"}}], "responses": {"200": {"description": "Index adapter kit details returned successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit for the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["IndexAdapterKits"], "summary": "Delete index adapter kit.", "description": "For a given index adapter kit ID, delete the index adapter kit.", "operationId": "deleteIndexAdapterKit", "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "description": "ID of the index adapter kit", "required": true, "type": "string"}, {"in": "query", "name": "force", "description": "Force delete the index adapter kit", "type": "boolean"}], "responses": {"204": {"description": "Index adapter kit deleted successfully.", "schema": {"$ref": "#/definitions/NoContentResult"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Index adapter kit for the given index adapter kit ID has already been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/indexadapterkits/{indexAdapterKitId}/acl": {"put": {"tags": ["IndexAdapterKits"], "summary": "Replace the access control list of an index adapter kit with the input access control list.", "description": "Replace the access control list of an index adapter kit with the input access control list, and return information about that index adapter kit.", "operationId": "replaceIndexAdapterKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Index adapter kit access control list updated successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["IndexAdapterKits"], "summary": "Merge the access control list of an index adapter kit with the input access control list.", "description": "Merge the access control list of an index adapter kit with the input access control list, and return information about that index adapter kit.", "operationId": "mergeIndexAdapterKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for the given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["IndexAdapterKits"], "summary": "Remove the access control list of an index adapter kit.", "description": "Remove the access control list of a given index adapter kit, and return information about that index adapter kit.", "operationId": "removeIndexAdapterKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list removed successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit with the given ID has already been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/indexadapterkits/{indexAdapterKitId}/definition": {"patch": {"tags": ["IndexAdapterKits"], "summary": "Update an index adapter kit using a definition string.", "description": "Update an index adapter kit, and return information about that index adapter kit.", "operationId": "updateIndexAdapterKitByDefinition", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "indexAdapterKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateIndexAdapterKitByDefinitionRequest"}}], "responses": {"200": {"description": "Index adapter kit updated successfully.", "schema": {"$ref": "#/definitions/IndexAdapterKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No index adapter kit found for given index adapter kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to update index adapter kit. Conflict found (e.g. an index adapter kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The index adapter kit with the given ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/instrumentTypes": {"get": {"tags": ["InstrumentTypes"], "summary": "Get instrument types and platforms.", "description": "Get a list of supported instrument types and platforms.", "operationId": "getInstrumentTypes", "produces": ["application/json"], "responses": {"200": {"description": "Supported instrument types and platforms returned successfully.", "schema": {"$ref": "#/definitions/SupportedInstrumentTypes"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraries": {"get": {"tags": ["Libraries"], "summary": "Get a list of libraries.", "description": "Get a list of libraries accessible by the request token.", "operationId": "listLibraries", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Libraries returned successfully.", "schema": {"$ref": "#/definitions/LibraryCompactLibrarySortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraries/{libraryId}": {"patch": {"tags": ["Libraries"], "summary": "Update library.", "description": "For a given library ID, update the library.", "operationId": "updateLibrary", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "description": "The id of the requested library.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "The update request for the library", "schema": {"$ref": "#/definitions/UpdateLibraryRequest"}}], "responses": {"200": {"description": "Library updated successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "\"Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found for given library ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to update library. Conflict found (e.g. library with same name already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with the given library ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["Libraries"], "summary": "Get library details.", "description": "For a given library ID, get the details of the library.", "operationId": "getLibrary", "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "required": true, "type": "string"}], "responses": {"200": {"description": "Library returned successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found for given library ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with given library ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraries/{libraryId}/acl": {"put": {"tags": ["Libraries"], "summary": "Replace the access control list of a library.", "description": "Replace the access control list of a library, and return information about that library.", "operationId": "replaceLibraryAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found with the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with the given ID has been disabled.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Libraries"], "summary": "Merge the access control list of a library.", "description": "Merge the access control list of a library, and return information about that library.", "operationId": "mergeLibraryAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found with the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with the given ID has been disabled.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Libraries"], "summary": "Remove the access control list of a library.", "description": "Remove the access control list of a library, and return information about that library.", "operationId": "removeLibraryAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list of the library removed successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found with the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with the given ID has been disabled.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraries/{libraryId}:disassociateLibraryPrepKit": {"post": {"tags": ["Libraries"], "summary": "Disassociate library prep kit and index adapter kit from library.", "description": "For a given library ID, disassociate the library prep kit and index adapter kit.", "operationId": "disassociateLibraryPrepKitFromLibrary", "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryId", "required": true, "type": "string"}], "responses": {"200": {"description": "Disassociation completed successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library found for given library ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "No associated library prep kit found for given library ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library with given library ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraryPrepKits": {"post": {"tags": ["LibraryPrepKits"], "summary": "Create a library prep kit.", "description": "Create a library prep kit, and return information about that library prep kit.", "operationId": "createLibraryPrepKit", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateLibraryPrepKitRequest"}}], "responses": {"201": {"description": "Library prep kit created successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create library prep kit. Conflict found (e.g. a library prep kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["LibraryPrepKits"], "summary": "Get a list of library prep kits.", "description": "Get a list of library prep kits accessible by the current request token.", "operationId": "listLibraryPrepKits", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount", "ApplicationSpecificKits"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Library prep kits found and returned successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKitCompactLibraryPrepKitSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraryPrepKits/{libraryPrepKitId}": {"patch": {"tags": ["LibraryPrepKits"], "summary": "Update a library prep kit.", "description": "For a given library prep kit ID, update the associated library prep kit.", "operationId": "updateLibraryPrepKit", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "description": "The id of the requested library prep kit.", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "The update request for the library prep kit", "schema": {"$ref": "#/definitions/UpdateLibraryPrepKitRequest"}}], "responses": {"200": {"description": "Library prep kit updated successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "\"Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to update library prep kit. Conflict found (e.g. a library prep kit with same name and version already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library prep kit with the given library prep kit ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["LibraryPrepKits"], "summary": "Get library prep kit details.", "description": "For a given library prep kit ID, return information about that library prep kit.", "operationId": "getLibraryPrepKit", "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "description": "ID of the library prep kit", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["CanUpdate"], "type": "string"}}], "responses": {"200": {"description": "Library prep kit found and details returned successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "\"Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library prep kit with the given library prep kit ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["LibraryPrepKits"], "summary": "Delete library prep kit.", "description": "For a given library prep kit ID, delete the library prep kit.", "operationId": "deleteLibraryPrepKit", "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "description": "ID of the library prep kit", "required": true, "type": "string"}, {"in": "query", "name": "force", "description": "Force delete the library prep kit", "type": "boolean"}], "responses": {"204": {"description": "Library prep kit deleted successfully.", "schema": {"$ref": "#/definitions/NoContentResult"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Library prep kit for the given library prep kit ID has already been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/libraryPrepKits/{libraryPrepKitId}/acl": {"put": {"tags": ["LibraryPrepKits"], "summary": "Replace the access control list of a library prep kit with the input access control list.", "description": "For a given library prep kit ID, replace the access control list with the input access control list, and return information about the library prep kit.", "operationId": "replaceLibraryPrepKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Library prep kit access control list updated successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library prep kit with the given library prep kit ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["LibraryPrepKits"], "summary": "Merge the access control list of a library prep kit with the input access control list.", "description": "For a given library prep kit ID, merge the access control list with the input access control list, and return information about the library prep kit", "operationId": "mergeLibraryPrepKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Library prep kit access control list updated successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library prep kit with the given library prep kit ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["LibraryPrepKits"], "summary": "Remove the access control list of a given library prep kit.", "description": "Remove the access control list of a given library prep kit, and return information about that library prep kit.", "operationId": "removeLibraryPrepKitAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPrepKitId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Library prep kit access control list removed successfully.", "schema": {"$ref": "#/definitions/LibraryPrepKit"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library prep kit found for given library prep kit ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library prep kit with the given library prep kit ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/librarypools": {"get": {"tags": ["LibraryPools"], "summary": "Get a list of library pools.", "description": "Get a list of library pools accessible by the request token.", "operationId": "listLibraryPools", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Library pools list returned successfully.", "schema": {"$ref": "#/definitions/LibraryPoolCompactLibraryPoolSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["LibraryPools"], "summary": "Create library pool.", "description": "Create a library pool, and return information about that library pool.", "operationId": "createLibraryPool", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateLibraryPoolRequest"}}], "responses": {"201": {"description": "Library pool created successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create library pool due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/librarypools/{libraryPoolId}": {"get": {"tags": ["LibraryPools"], "summary": "Get library pool details.", "description": "For a given library pool ID, get the library pool details accessible by the request token.", "operationId": "getLibraryPool", "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPoolId", "required": true, "type": "string"}], "responses": {"200": {"description": "Library pool details returned successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library pool found for given library pool ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library pool with the given library pool ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["LibraryPools"], "summary": "Update library pool.", "description": "Update a library pool, and return information about that library pool.", "operationId": "updateLibraryPool", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPoolId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateLibraryPoolRequest"}}], "responses": {"200": {"description": "Library pool updated successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library pool found for given library pool ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to update library pool due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library pool with the given library pool ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/librarypools/{libraryPoolId}/acl": {"put": {"tags": ["LibraryPools"], "summary": "Replace the access control list of a library pool with the input access control list.", "description": "Replace the access control list of a library pool with the input access control list, and return information about that library pool.", "operationId": "replaceLibraryPoolAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPoolId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library pool found for given library pool ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library pool with the given library pool ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["LibraryPools"], "summary": "Merge the access control list of a library pool with the input access control list.", "description": "Merge the access control list of a library pool with the input access control list, and return information about the library pool.", "operationId": "mergeLibraryPoolAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPoolId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library pool found for given library pool ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library pool with the given library pool ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["LibraryPools"], "summary": "Remove the input access control list from a library pool.", "description": "Remove the input access control list from a library pool, and return information about the library pool.", "operationId": "removeLibraryPoolAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "libraryPoolId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list removed successfully.", "schema": {"$ref": "#/definitions/LibraryPool"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No library pool found for given library pool ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The library pool with the given library pool ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs": {"get": {"tags": ["SequencingRuns"], "summary": "Get a list of sequencing runs.", "description": "Get a list of sequencing runs accessible by the request token.", "operationId": "listSequencingRuns", "produces": ["application/json"], "parameters": [{"in": "query", "name": "isPlanned", "description": "Optional parameter. Set to true to filter the run list and only include planned runs.", "type": "boolean"}, {"in": "query", "name": "isLocked", "description": "Optional parameter. Set to true to filter the run list and only include locked runs.", "type": "boolean"}, {"in": "query", "name": "isFavorite", "description": "Optional parameter. Set to true to filter the run list and only include favorite runs.", "type": "boolean"}, {"in": "query", "name": "instrumentType", "description": "Optional parameter. Set to true to filter the run list and only include runs performed by the specified instrument type.", "type": "string"}, {"in": "query", "name": "runOrigin", "description": "Optional field. Used to filter the sequencing runs list by comma-separated RunOrigins values, e.g.  <example>Instrument,Simulator</example>", "type": "array", "items": {"enum": ["Instrument", "InstrumentPostRunUpload", "Simulator"], "type": "string"}}, {"in": "query", "name": "aggregateRunStatus", "description": "Optional field. Used to filter the sequencing runs list by comma-separated AggregateRunStatus values, e.g <example>Aborted,Deleted,Running</example>", "type": "array", "items": {"enum": ["Aborted", "Complete", "Deleted", "Failed", "FailedUpload", "NeedsAttention", "PendingAnalysis", "Planned", "ReadyForSequencing", "Rehybing", "Running", "RunningAnalysis", "RunningInstrumentAnalysis", "TimedOut", "Unknown", "Uploading", "InstrumentAnalysisCompleted", "InstrumentCompleted", "UploadCompleted", "InstrumentRunCompleted", "Verifying", "VerificationFailed"], "type": "string"}}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "flowCellBarcode", "description": "Filter by flowcell barcode", "type": "string", "maxLength": 255, "minLength": 0}, {"in": "query", "name": "inputContainerIdentifier", "description": "Filter by Input container identifier", "type": "string", "maxLength": 255, "minLength": 0}, {"in": "query", "name": "regulatoryMode", "description": "Filter by regulatory modes using comma separated values, e.g <example>RUO,IVD,IUO</example>", "type": "array", "items": {"description": "Regulatory mode", "enum": ["RUO", "IVD", "IUO"], "type": "string"}}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "List of sequencing runs returned successfully.", "schema": {"$ref": "#/definitions/SequencingRunCompactSequencingRunSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/:startRunUploadCheck": {}, "/v1/sequencing/runs/analyses/{id}": {"delete": {"tags": ["SequencingRuns"], "summary": "Delete an analysis configuration for a sequencing run.", "description": "For a given run ID, delete an analysis configuration and return information about that analysis configuration.", "operationId": "deleteAnalysisConfiguration", "produces": ["application/json"], "parameters": [{"in": "path", "name": "id", "required": true, "type": "string"}], "responses": {"204": {"description": "Analysis configuration deleted successfully."}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to delete analysis configuration. Conflict found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["SequencingRuns"], "summary": "Update an analysis configuration.", "description": "Update an analysis configuration, and return information about that analysis configuration.", "operationId": "updateAnalysisConfiguration", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "id", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSequencingRunAnalysisConfigurationRequest"}}], "responses": {"200": {"description": "Analysis configuration updated successfully.", "schema": {"$ref": "#/definitions/SequencingRunAnalysisConfiguration"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No analysis configuration found for given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Client Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Analysis configuration not updated due to conflict with input parameters.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}": {"get": {"tags": ["SequencingRuns"], "summary": "Get sequencing run details.", "description": "For a given sequencing run ID, get the associated run information.", "operationId": "getSequencingRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}], "responses": {"200": {"description": "Sequencing run details returned successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run for the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["SequencingRuns"], "summary": "Update information for an existing sequencing run.", "description": "Update information for an existing sequencing run. This may include metadata, status, progress (started/completed/failed), and flags.", "operationId": "updateSequencingRun", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSequencingRunRequest"}}], "responses": {"200": {"description": "Sequencing run updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["SequencingRuns"], "summary": "Delete sequencing run.", "description": "For a given sequencing run ID, delete the sequencing run.", "operationId": "deleteSequencingRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the sequencing run", "required": true, "type": "string"}], "responses": {"204": {"description": "Sequencing run deleted successfully.", "schema": {"$ref": "#/definitions/NoContentResult"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Sequencing run for the given sequencing run ID has already been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/acl": {"put": {"tags": ["SequencingRuns"], "summary": " Replace the access control list of a sequencing run with the input access control list.", "description": "For a given sequencing run, replace the access control list with the input access control list, and return information about the run.", "operationId": "replaceSequencingRunAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run with the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["SequencingRuns"], "summary": "Merge the access control list of a sequencing run with the input access control list.", "description": "For a given sequencing run, merge the access control list with the input access control list, and return information about the run.", "operationId": "mergeSequencingRunAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run with the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["SequencingRuns"], "summary": "Remove the access control list of a sequencing run.", "description": "Remove the access control list of a given sequencing run, and return information about the run.", "operationId": "removeSequencingRunAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list removed successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run with the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/analyses": {"post": {"tags": ["SequencingRuns"], "summary": "Create an analysis configuration for a sequencing run.", "description": "For a given run ID, create an analysis configuration and return information about that analysis configuration.", "operationId": "createAnalysisConfiguration", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}], "responses": {"201": {"description": "Analysis configuration created successfully.", "schema": {"$ref": "#/definitions/SequencingRunAnalysisConfiguration"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create analysis configuration. Conflict found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["SequencingRuns"], "summary": "List analysis configurations for a sequencing run.", "description": "List analysis configurations for a given run ID.", "operationId": "listAnalysisConfigurations", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the request", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Analysis configurations returned successfully.", "schema": {"$ref": "#/definitions/SequencingRunAnalysisConfigurationSequencingRunAnalysisConfigurationSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to list analysis configurations. Conflict found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/config": {"patch": {"tags": ["PlannedRuns"], "summary": "Update planned run configuration.", "description": "For a given sequencing run ID, update the planned run configuration. Only applicable to runs in planning stage.", "operationId": "updatePlannedRunConfig", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSequencingRunConfigurationRequest"}}], "responses": {"200": {"description": "Planned run updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Sequencing run with given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/contents": {"get": {"tags": ["SequencingRuns"], "summary": " Get the content of a sequencing run.", "description": "For a given a run ID, get the content of the sequencing run.", "operationId": "getSequencingRunContents", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the sequencing run", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["ReferencedResourceModels"], "type": "string"}}], "responses": {"200": {"description": "Sequencing run content returned successfully.", "schema": {"$ref": "#/definitions/SequencingRunContentsResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Sequencing run not found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run for the given run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "put": {"tags": ["SequencingRuns"], "summary": "Update the content of a sequencing run.", "description": "For a given a run ID, update the sequencing run content with the current token\u00e2\u20ac\u2122s tenant ID.", "operationId": "updateSequencingRunContents", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}}], "responses": {"200": {"description": "SequencingRun content for the given runId is updated successfully.", "schema": {"$ref": "#/definitions/SequencingRunContentsResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to update the SequencingRun content for the given runId.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Could not find a SequencingRun for the given runId.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "The sequencing run content update request is invalid based on the current state of the sequencing run", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The SequencingRun for the given runId has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/directUploadInfo": {"post": {"tags": ["SequencingRuns"], "summary": "Provide information about an uploaded file or set of files.", "description": "For a given sequencing run ID, provide information about an uploaded file or set of files.", "operationId": "runDirectUploadInfo", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/RunDirectUploadInfoRequest"}}], "responses": {"200": {"description": "Upload information captured successfully.", "schema": {"$ref": "#/definitions/SequencingRunCompact"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/plan": {"put": {"tags": ["PlannedRuns"], "summary": "Replace planned run configuration, contents, and analysis configurations.", "description": "For a given sequencing run ID, replace the existing planned run with user input. This may include run configuration, run contents, and analysis configurations. Only applicable to runs in planning stage.", "operationId": "replacePlannedRun", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/ReplacePlannedRunRequest"}}], "responses": {"200": {"description": "Planned run updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Sequencing run with given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}/sequencingStats": {"get": {"tags": ["SequencingRuns"], "summary": "Get the sequencing stats of a sequencing run.", "description": "For a given a run ID, get the sequencing stats of a sequencing run.", "operationId": "getSequencingStats", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the sequencing run", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["ReferencedResourceModels"], "type": "string"}}], "responses": {"200": {"description": "Sequencing run stats returned successfully.", "schema": {"$ref": "#/definitions/SequencingStatsResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Sequencing run not found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run for the given run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:abort": {"post": {"tags": ["SequencingRuns"], "summary": "Abort a sequencing run.", "description": "For a given sequencing run ID, abort the run.", "operationId": "abortSequencingRun", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/AbortSequencingRunRequest"}}], "responses": {"200": {"description": "Sequencing run aborted successfully.\"", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:canUpload": {"get": {"tags": ["SequencingRuns"], "summary": "Check whether the run is ready to upload.", "description": "Check the status of the run and returns whether the run is ready to be uploaded.", "operationId": "canUpload", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}], "responses": {"200": {"description": "Sequencing run is ready to upload.", "schema": {"$ref": "#/definitions/CanUploadResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "The sequencing run is not in a state where startUpload or refreshUpload is allowed", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Internal server error.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:closeUploadSession": {"post": {"tags": ["SequencingRuns"], "summary": "Close an upload session for a sequencing run", "description": "For a given sequencing run ID, close an upload session.", "operationId": "closeUploadSession", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CloseRunUploadSessionRequest"}}], "responses": {"200": {"description": "Upload session is closed successfully", "schema": {"$ref": "#/definitions/CloseUploadSessionResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No run found for given run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid based on the current state of the run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:completeUpload": {"post": {"tags": ["SequencingRuns"], "summary": "Complete upload stage for a sequencing run.", "description": "For a given sequencing run ID, complete the upload stage and close the upload session if provided.", "operationId": "completeUpload", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CompleteSequencingRunUploadRequest"}}], "responses": {"200": {"description": "Sequencing run upload completed successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to the current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:generateSampleSheet": {"post": {"tags": ["SequencingRuns"], "summary": "Generate sample sheet from a sequencing run.", "description": "Generate sample sheet from a sequencing run, and return the CSV string of sample sheet.", "operationId": "generateSampleSheetForSequencingRun", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/GenerateSampleSheetForSequencingRunRequest"}}], "responses": {"200": {"description": "Sample sheet generated successfully.", "schema": {"$ref": "#/definitions/SampleSheet"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Client Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:lock": {"post": {"tags": ["PlannedRuns"], "summary": "Lock a planned run.", "description": "Lock the planned run associated with a given sequencing run ID.", "operationId": "lockPlannedRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}], "responses": {"200": {"description": "Planned run locked successfully.\"", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No planned run found for given sequencing run ID.\"", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to the current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The planned run for the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:prepareRequeue": {"post": {"tags": ["SequencingRuns"], "summary": "Prepare requeue run.", "description": "Prepare requeue analysis of the same or different sequencing run with potentially different run content/analysis.", "operationId": "prepareRequeue", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/RequeueSequencingRunAnalysisRequest"}}], "responses": {"201": {"description": "Prepared run requeue successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "NotFound.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:refreshUpload": {}, "/v1/sequencing/runs/{runId}:replaceSequencingStats": {"put": {"tags": ["SequencingRuns"], "summary": "Replace the sequencing stats of a sequencing run.", "description": "Replace the sequencing stats of a sequencing run. Any existing sequencing stats will be deleted and replaced with the new contents of this request.", "operationId": "replaceSequencingStats", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/ReplaceSequencingStatsRequest"}}], "responses": {"201": {"description": "Sequencing stats replaced successfully.", "schema": {"$ref": "#/definitions/SequencingStatsResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run for the given run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:start": {"post": {"tags": ["PlannedRuns"], "summary": "Start a planned sequencing run.", "description": "Start a planned sequencing run, and return information about that run. Only applicable to planned runs.", "operationId": "startPlannedRun", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/StartPlannedRunRequest"}}], "responses": {"200": {"description": "Planned sequencing run started successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to the current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sequencing run for the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Bad request."}}}}, "/v1/sequencing/runs/{runId}:startRequeue": {"post": {"tags": ["SequencingRuns"], "summary": "Start prepared requeue run.", "description": "Starts previously prepared requeue run for analysis.", "operationId": "startRequeue", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}], "responses": {"200": {"description": "Starts requeue run successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "NotFound.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Client Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:startUpload": {}, "/v1/sequencing/runs/{runId}:startVerification": {"post": {"tags": ["SequencingRuns"], "summary": "Start verification for a run and return information about that run", "description": "Start run verification", "operationId": "startRunVerification", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/StartVerificationRequest"}}], "responses": {"200": {"description": "Verification is started successfully", "schema": {"$ref": "#/definitions/RuntVerificationResult"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to perform the action.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid based on the current state of the run", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:unlock": {"post": {"tags": ["PlannedRuns"], "summary": "Unlock a planned run.", "description": "For a given sequencing run ID, unlock the planned run for the current request token.", "operationId": "unlockPlannedRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}], "responses": {"200": {"description": "Sequencing run unlocked successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "Sequencing run for the given sequencing run ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs/{runId}:updateStatus": {"post": {"tags": ["SequencingRuns"], "summary": "Update status information for an existing sequencing run.", "description": "Update status information for an existing sequencing run. This may include status, progress (started/completed/failed), and flags.", "operationId": "updateSequencingRunStatus", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSequencingRunStatusRequest"}}], "responses": {"200": {"description": "Sequencing run status updated successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sequencing run found for given sequencing run ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Request is invalid due to current state of the sequencing run.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/runs:plan": {"post": {"tags": ["PlannedRuns"], "summary": "Create sequencing run plan.", "description": "Create sequencing run plan, with configuration required for an instrument to start the run.", "operationId": "createPlannedRun", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreatePlannedRunRequest"}}], "responses": {"201": {"description": "Planned run created successfully.", "schema": {"$ref": "#/definitions/SequencingRun"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples": {"post": {"tags": ["Samples"], "summary": "Create a sample.", "description": "Create a sample, and return information about that sample.", "operationId": "createSample", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateSampleRequest"}}], "responses": {"201": {"description": "Sample created successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["Samples"], "summary": "Get a list of samples.", "description": "Get a list of samples accessible by the request token.", "operationId": "listSamples", "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Include flags to specify what is included in the response", "type": "array", "items": {"enum": ["TotalItemCount"], "type": "string"}}, {"in": "query", "name": "name", "description": "Optional parameter. Set to filter the sample list and only include samples with the specified name.", "type": "string", "maxLength": 100, "minLength": 0}, {"in": "query", "name": "dataAggregationGroup", "description": "Optional parameter. Set to filter the sample list and only include samples with the specified dataAggregationGroup.", "type": "string", "maxLength": 255, "minLength": 0}, {"in": "query", "name": "projectName", "description": "Optional parameter. Set to filter the sample list and only include samples with the specified ProjectName.\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "type": "string", "maxLength": 255, "minLength": 0}, {"in": "query", "name": "tenantIds", "description": "Optional parameter to limit the response to be with in provided tenant ids\r\nComma separated to support multiple tenant ids", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Sample list returned successfully.", "schema": {"$ref": "#/definitions/SampleCompactSampleSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples/{sampleId}": {"patch": {"tags": ["Samples"], "summary": "Update sample information.", "description": "For a given sample ID, update sample information.", "operationId": "updateSample", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateSampleRequest"}}], "responses": {"200": {"description": "Sample updated successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "get": {"tags": ["Samples"], "summary": "Get sample details.", "description": "For a given sample ID, return information about that sample.", "operationId": "getSample", "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "description": "The ID of the requested sample.", "required": true, "type": "string"}], "responses": {"200": {"description": "Sample details returned successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples/{sampleId}/acl": {"put": {"tags": ["Samples"], "summary": "Replace the access control list of a sample with the input access control list.", "description": "Replace the access control list of a sample with the input access control list, and return information about that sample.", "operationId": "replaceSampleAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list of sample updated successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Samples"], "summary": "Merge the access control list of a sample with the input access control list.", "description": "Merge the access control list of a given sample with the input access control list, and return information about that sample.", "operationId": "mergeSampleAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Access control list updated successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Samples"], "summary": "Remove the access control list of a sample.", "description": "Remove the access control list of a given sample, and return information about that sample.", "operationId": "removeSampleAcl", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateAclRequest"}}], "responses": {"200": {"description": "Input access control list removed successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples/{sampleId}/analysisDatasets": {"get": {"tags": ["Samples"], "summary": "List analysis datasets associated with the specified sample.", "description": "For a given sample ID, return a list of associated analysis datasets.", "operationId": "listSampleAnalysisDatasets", "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "query", "name": "type", "description": "The analysis dataset types requested.", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "include", "description": "Available include flags for list of analysisDatasets associated with a sample", "type": "array", "items": {"enum": ["TotalItemCount", "FileDetails"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Analysis datasets returned successfully.", "schema": {"$ref": "#/definitions/AnalysisDatasetCompactAnalysisDatasetSortFieldsPagedItems"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples/{sampleId}/libraries": {"post": {"tags": ["Libraries"], "summary": "Create library.", "description": "Create a library, and return information about that library.", "operationId": "createLibrary", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "sampleId", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateLibraryRequest"}}], "responses": {"201": {"description": "Library created successfully.", "schema": {"$ref": "#/definitions/Library"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Unable to create library. Conflict found (e.g. invalid sample ID, or library with the same name already exists).", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples:delivery": {"post": {"tags": ["Samples"], "summary": "Deliver samples.", "description": "Deliver samples to allow subscription in ENS.", "operationId": "deliverSamples", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/SamplesDeliveryRequest"}}], "responses": {"200": {"description": "Sample delivered successfully.", "schema": {"$ref": "#/definitions/SamplesDeliveryResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing/samples:registerData": {"post": {"tags": ["Samples"], "summary": "Register data for a sample.", "description": "Register data for a sample that may or may not exist yet.", "operationId": "registerSampleData", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/RegisterSampleDataRequest"}}], "responses": {"200": {"description": "Sample data added successfully.", "schema": {"$ref": "#/definitions/Sample"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "No sample found for given sample ID/Urn.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The sample with the given sample ID/Urn has been deleted.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing:generateSampleSheet": {"post": {"tags": ["SampleSheets"], "summary": "Generate a sample sheet.", "description": "Generate a sample sheet, and return information about that sample sheet.", "operationId": "generateSampleSheet", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/GenerateSampleSheetRequest"}}], "responses": {"200": {"description": "Sample sheet generated successfully.", "schema": {"$ref": "#/definitions/SampleSheet"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/sequencing:parseSampleSheet": {"post": {"tags": ["SampleSheets"], "summary": "Parse a sample sheet.", "description": "Parse a sample sheet, and return information about that run.", "operationId": "parseSampleSheet", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/ParseSampleSheetRequest"}}], "responses": {"200": {"description": "Sample sheet parsed successfully.", "schema": {"$ref": "#/definitions/ParseSampleSheetResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Try your request again. If problem persists, contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/subscriptions": {"get": {"tags": ["Subscriptions"], "summary": "Get a list of subscriptions.", "description": "Get a list of subscriptions accessible by the current JWT token\u00e2\u20ac\u2122s tenant Id.", "operationId": "listSubscriptions", "produces": ["application/json"], "parameters": [{"in": "query", "name": "eventType", "description": "Optional event type for filtering returned subscriptions", "type": "string", "maxLength": 255}, {"in": "query", "name": "pageSize", "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.", "type": "integer", "format": "int32", "maximum": 1000, "minimum": 1}, {"in": "query", "name": "pageToken", "description": "Utilized for navigation after initial listing. Valid values include those of\r\nfirstPageToken, nextPageToken, and previousPageToken in the list response.\r\nWhen there are no more pages, the nextPageToken will be null.", "type": "string"}], "responses": {"200": {"description": "Subscriptions found and returned successfully.", "schema": {"$ref": "#/definitions/SubscriptionList"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to access subscriptions.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Subscriptions"], "summary": "Creates a subscription to an event type and defines how those events get delivered.", "description": "Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow.", "operationId": "createSubscription", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateSubscriptionRequest"}}], "responses": {"201": {"description": "The subscription is created successfully.", "schema": {"$ref": "#/definitions/Subscription"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "The given delivery target is not valid or cannot be delivered to.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/subscriptions/{subscriptionId}": {"get": {"tags": ["Subscriptions"], "summary": "Given a subscription id, returns information about that subscription.", "description": "Given a subscription id, returns information about that subscription accessible by the current JWT token\u00e2\u20ac\u2122s tenant Id.", "operationId": "getSubscription", "produces": ["application/json"], "parameters": [{"in": "path", "name": "subscriptionId", "description": "Id of the subscription to return", "required": true, "type": "string", "maxLength": 255}], "responses": {"200": {"description": "Subscription for the given ID is found and returned successfully.", "schema": {"$ref": "#/definitions/Subscription"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to access the subscription for the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Could not find a subscription for the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The subscription for the given ID has been disabled.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Subscriptions"], "summary": "Given a subscription id, disables the specified subscription.", "description": "Given a subscription id, disables that subscription with the current JWT token\u00e2\u20ac\u2122s tenant Id.", "operationId": "disableSubscription", "produces": ["application/json"], "parameters": [{"in": "path", "name": "subscriptionId", "description": "Id of the subscription to be disabled", "required": true, "type": "string", "maxLength": 255}], "responses": {"200": {"description": "Subscription for the given ID is disabled successfully.", "schema": {"$ref": "#/definitions/Subscription"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to disable the subscription for the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Could not find a subscription for the given ID.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "410": {"description": "The subscription for the given ID has been disabled.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks": {"get": {"tags": ["Tasks"], "summary": "Get a list of tasks", "description": "Gets a list of tasks accessible by the current tenant ID.", "operationId": "listTasks", "produces": ["application/json"], "parameters": [{"in": "query", "name": "names", "description": "Name: Optional parameter to filter the returned list. Case-Sensitive", "type": "string"}, {"in": "query", "name": "acls", "description": "Name: Optional parameter to filter the returned list. Case-Sensitive", "type": "string"}, {"in": "query", "name": "pageSize", "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "sort", "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)", "type": "string", "default": "timeCreated asc"}, {"in": "query", "name": "pageToken", "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)", "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskSummaryPagedItems"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Tasks"], "summary": "Create a Task", "description": "Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \"{{string}}\", and specified at launch time.", "operationId": "createTask", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/CreateTaskRequest"}}], "responses": {"201": {"description": "Success", "schema": {"$ref": "#/definitions/Task"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/runs": {"get": {"tags": ["Task Runs"], "summary": "Get a list of task runs", "description": "Get a list of task runs accessible by the current tenant ID.", "operationId": "listTaskRuns", "produces": ["application/json"], "parameters": [{"in": "query", "name": "sort", "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)", "type": "string"}, {"in": "query", "name": "names", "type": "string"}, {"in": "query", "name": "status", "type": "string"}, {"in": "query", "name": "versions", "type": "string"}, {"in": "query", "name": "acls", "type": "string"}, {"in": "query", "name": "pageSize", "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)", "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRunSummaryPagedItems"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Task Runs"], "summary": "Create and launch a task run", "description": "Creates and launches a task run. Returns the ID and status associated with the new task run.", "operationId": "createTaskRun", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/CreateTaskRunRequest"}}], "responses": {"201": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRun"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/runs/{runId}": {"get": {"tags": ["Task Runs"], "summary": "Get the status of a task run", "description": "Gets the status of a task run for a given task run ID.", "operationId": "getTaskRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "", "required": true, "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRun"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/runs/{runId}:abort": {"put": {"tags": ["Task Runs"], "summary": "Abort a task run", "description": "Aborts a task run for a given task run ID. The task run is required to have a status of \"Pending\" or \"Running\".", "operationId": "abortTaskRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "", "required": true, "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRunSummary"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/runs/{runId}:heartbeat": {"post": {"tags": ["Task Runs"], "summary": "Heartbeat for a task run", "description": "Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.", "operationId": "heartbeatTaskRun", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/HeartbeatTaskRunRequest"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRunHeartbeat"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/{taskId}": {"get": {"tags": ["Tasks"], "summary": "Get the details of a Task", "description": "Gets the details of a Task for a given task ID.", "operationId": "getTask", "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskSummary"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Tasks"], "summary": "Update an existing task.", "description": "Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique.", "operationId": "updateTask", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "Details of the task to be updated.", "schema": {"$ref": "#/definitions/UpdateTaskRequest"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Task"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/{taskId}/versions": {"get": {"tags": ["Task Versions"], "summary": "Get a list of versions", "description": "Gets a list of task versions within the given task accessible by the current tenant ID.", "operationId": "listTaskVersions", "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "query", "name": "sort", "description": "Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified.\r\nThe sort can be specified as asc or desc. (Default: asc.)", "type": "string"}, {"in": "query", "name": "versions", "type": "string"}, {"in": "query", "name": "ids", "type": "string"}, {"in": "query", "name": "acls", "type": "string"}, {"in": "query", "name": "pageSize", "description": "Optional parameter to define the page size returned. Valid inputs range from 1-1000.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,\r\nnextPageToken, and previousPageToken (provided in the list response)", "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskVersionSummaryPagedItems"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Task Versions"], "summary": "Create a task version", "description": "Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \"{{string}}\", and specified at launch time.", "operationId": "createTaskVersion", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/CreateTaskVersionRequest"}}], "responses": {"201": {"description": "Success", "schema": {"$ref": "#/definitions/TaskVersion"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/{taskId}/versions/{versionId}": {"get": {"tags": ["Task Versions"], "summary": "Get the details of a task version", "description": "Gets details of a task version for a given task version ID.", "operationId": "getTaskVersion", "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "path", "name": "versionId", "description": "", "required": true, "type": "string"}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskVersion"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Task Versions"], "summary": "Update task version properties", "description": "Update details of a task version for a given task version ID.", "operationId": "updateTaskVersion", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "path", "name": "versionId", "description": "", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateTaskVersionRequest"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskVersion"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tasks/{taskId}/versions/{versionId}:launch": {"post": {"tags": ["Task Versions"], "summary": "Launch a task version", "description": "Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.", "operationId": "launchTaskRun", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "taskId", "description": "", "required": true, "type": "string"}, {"in": "path", "name": "versionId", "description": "", "required": true, "type": "string"}, {"in": "body", "name": "body", "description": "", "schema": {"$ref": "#/definitions/LaunchTaskRequest"}}], "responses": {"201": {"description": "Success", "schema": {"$ref": "#/definitions/TaskRun"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tokens": {"post": {"tags": ["Tokens"], "summary": "Creates a JWT token to call IAP services.", "description": "This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken,  Basic Base64 encoded username:password or Basic with apiKey.", "operationId": "createToken", "produces": ["application/json"], "parameters": [{"in": "header", "name": "X-API-Key", "description": "Api Key can be passed in header to generate a JWT.", "type": "string"}, {"in": "query", "name": "clientId", "description": "Optionally pass client Id from calling app to set as authorized party on JWT.", "type": "string"}, {"in": "query", "name": "api_key", "description": "OBSOLETE: api key should now be passed as as an X-API-Key header.", "type": "string"}, {"in": "query", "name": "domain", "description": "Optionally pass the domain name you are logging into", "type": "string"}, {"in": "query", "name": "data", "description": "Data is a custom meta data field that will be applied to the session field in the JWT payload.", "type": "string"}, {"in": "query", "name": "scopes", "description": "Scopes can be passed in during token generation to limit the token to particular scopes.", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "cwid", "description": "Set the current workgroup on the token. Used for aligning resources to a workgroup.", "type": "string"}, {"in": "query", "name": "cid", "description": "Set the current context on the token. Used for aligning resources to a context.", "type": "string"}, {"in": "query", "name": "returnSessionToken", "description": "By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead.", "type": "boolean"}], "responses": {"201": {"description": "The Token is created successfully.", "schema": {"$ref": "#/definitions/TokenResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Tokens"], "summary": "Revokes an access token.", "description": "This endpoint revokes the access token that is passed in.", "operationId": "revokeToken", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "description": "Access token request accepts either a psToken or a JWT in the access_token field in the body of the request.", "schema": {"$ref": "#/definitions/AccessTokenRequest"}}], "responses": {"204": {"description": "Succeeded and the token has been revoked."}, "400": {"description": "An invalid or missing input parameter will result in a bad request.\"", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/tokens/details": {"get": {"tags": ["Tokens"], "summary": "Get current tokens info require authorization Bearer token", "description": "Get token details", "operationId": "getTokenDetails", "produces": ["application/json"], "responses": {"200": {"description": "Token details returned successfully", "schema": {"$ref": "#/definitions/TokenDetailResponse"}}, "401": {"description": "The token provided is unauthorized."}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}, "/v1/tokens:refresh": {"post": {"tags": ["Tokens"], "summary": "Refresh session psToken.", "description": "This endpoint extends the session for the psToken.", "operationId": "refreshToken", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "description": "Access token request accepts a psToken in the access_token field in the body of the request.", "schema": {"$ref": "#/definitions/AccessTokenRequest"}}], "responses": {"201": {"description": "The Token was refreshed successfully.", "schema": {"$ref": "#/definitions/TokenResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The token is no longer able to be refreshed.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/usages": {"get": {"tags": ["Usages"], "summary": "Get current tenant's usage detail by period.  Default returns current period usage data. ", "description": "This endpoint provides the ability for the user to get the aggregated usage data", "operationId": "getUsage", "produces": ["application/json"], "parameters": [{"in": "query", "name": "periods", "type": "integer", "format": "int32", "maximum": 6, "minimum": 1}], "responses": {"200": {"description": "The usages are returned successfully.", "schema": {"$ref": "#/definitions/UsageResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/usages/details": {"get": {"tags": ["Usages"], "summary": "Get current tenant's usage detail by period.  Default returns current period usage data. ", "description": "This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage", "operationId": "getUsageDetails", "produces": ["application/json"], "parameters": [{"in": "query", "name": "periodId", "type": "integer", "format": "int64"}], "responses": {"200": {"description": "The usages are returned successfully.", "schema": {"$ref": "#/definitions/UsageResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/usages/periods": {"get": {"tags": ["Usages"], "summary": "Get periods detail info ", "description": "This endpoint provides the periods details", "operationId": "getUsagePeriods", "produces": ["application/json"], "parameters": [{"in": "query", "name": "limit", "type": "integer", "format": "int32", "default": 26}], "responses": {"200": {"description": "The periods are returned successfully.", "schema": {"$ref": "#/definitions/UsageResponse"}}, "400": {"description": "An invalid or missing input parameter will result in a bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "The acting identity cannot be authenticated and authorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/volumeconfigurations": {"get": {"tags": ["VolumeConfigurations"], "summary": "Get a list of volumes", "operationId": "listVolumeConfigurations", "produces": ["application/json"], "parameters": [{"in": "query", "name": "onlineStatus", "description": "Optional field that specifies the Online Status for Volume configurations included in the list.\r\nIf provided, the value must be Initializing, Ok, or Error.", "type": "string"}, {"in": "query", "name": "pageSize", "description": "START_DESC END_DESC", "type": "integer", "format": "int32", "maximum": 1000, "minimum": 0}, {"in": "query", "name": "pageToken", "description": "START_DESC END_DESC", "type": "string"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/VolumeConfigurationListResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["VolumeConfigurations"], "summary": "Create a volume configuration in GDS.", "description": "Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.", "operationId": "createVolumeConfiguration", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/CreateVolumeConfigurationRequest"}}], "responses": {"201": {"description": "Created new Volume Configuration.", "schema": {"$ref": "#/definitions/VolumeConfigurationResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Make sure the new Volume configuration name doesn't already exist.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/volumeconfigurations/{volumeConfigurationName}": {"get": {"tags": ["VolumeConfigurations"], "summary": "Get information for the specified volume configuration name or Id", "operationId": "getVolumeConfiguration", "produces": ["application/json"], "parameters": [{"in": "path", "name": "volumeConfigurationName", "description": "Unique name of the volume configuration to retrieve information for.", "required": true, "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/VolumeConfigurationResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Volume configuration not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["VolumeConfigurations"], "summary": "Deletes a volume configuration by Id or name", "operationId": "deleteVolumeConfiguration", "produces": ["application/json"], "parameters": [{"in": "path", "name": "volumeConfigurationName", "description": "Unique name of the Volume Configuration to be deleted.", "required": true, "type": "string"}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/VolumeResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Volume not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/volumeconfigurations/{volumeConfigurationName}:validate": {"post": {"tags": ["VolumeConfigurations"], "summary": "Validate a volume configuration", "description": "Validate an existing volume configuration.", "operationId": "validateVolumeConfiguration", "produces": ["application/json"], "parameters": [{"in": "path", "name": "volumeConfigurationName", "description": "Unique name of the volume configuration to be validated.", "required": true, "type": "string"}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/VolumeConfigurationResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Volume configuration not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/volumes": {"get": {"tags": ["Volumes"], "summary": "Get a list of volumes", "description": "Get a list of volumes accessible by the current JWT token\u00e2\u20ac\u2122s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.", "operationId": "listVolumes", "produces": ["application/json"], "parameters": [{"in": "query", "name": "pageSize", "description": "START_DESC END_DESC", "type": "integer", "format": "int32", "maximum": 1000, "minimum": 0}, {"in": "query", "name": "pageToken", "description": "START_DESC END_DESC", "type": "string"}, {"in": "query", "name": "include", "description": "Optionally include additional fields in the response. Multiple fields can be included by comma-separation.\r\nPossible values: TotalItemCount, InheritedAcl", "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "volumeConfigurationName", "description": "Unique name of the volume configuration", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/VolumeListResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Volumes"], "summary": "Create a volume in GDS and receive temporary credentials for upload", "description": "Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.", "operationId": "createVolume", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "query", "name": "include", "description": "Optionally include additional fields in the response.\r\n            Possible values: ObjectStoreAccess", "type": "string"}, {"in": "body", "name": "body", "description": "", "required": true, "schema": {"$ref": "#/definitions/CreateVolumeRequest"}}], "responses": {"201": {"description": "Created new Volume.", "schema": {"$ref": "#/definitions/CreateVolumeResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Make sure the new Volume doesn't already exist.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/volumes/{volumeId}": {"get": {"tags": ["Volumes"], "summary": "Get information for the specified volume ID or volume name", "operationId": "getVolume", "produces": ["application/json"], "parameters": [{"in": "path", "name": "volumeId", "description": "Unique identifier for the volume to retrieve information for.", "required": true, "type": "string"}, {"in": "query", "name": "tenantId", "description": "Optional parameter to see shared data in another tenant", "type": "string"}, {"in": "query", "name": "metadata.include", "description": "Optional parameter to specify comma separated patterns to include metadata by their field names.", "type": "string"}, {"in": "query", "name": "metadata.exclude", "description": "Optional parameter to specify comma separated patterns to exclude metadata by their field names.", "type": "string"}], "responses": {"200": {"description": "Success.", "schema": {"$ref": "#/definitions/VolumeResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Volume not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "delete": {"tags": ["Volumes"], "summary": "Deletes a volume by Id", "operationId": "deleteVolume", "produces": ["application/json"], "parameters": [{"in": "path", "name": "volumeId", "description": "Unique identifier for the Volume to be deleted.", "required": true, "type": "string"}, {"in": "query", "name": "purgeObjectStoreData", "description": "Optional and for BYOB only. If true, the volume's data in object storage will be erased.\r\n            This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume.", "type": "boolean"}], "responses": {"202": {"description": "Accepted.", "schema": {"$ref": "#/definitions/VolumeResponse"}}, "400": {"description": "Bad request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Forbidden.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "Volume not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "Conflict", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows": {"get": {"tags": ["Workflows"], "summary": "Get a list of workflows", "description": "Gets a list of workflows.", "operationId": "listWorkflows", "produces": ["application/json"], "parameters": [{"in": "query", "name": "tenantId", "description": "ID of the tenant", "type": "string"}, {"in": "query", "name": "name", "type": "string"}, {"in": "query", "name": "categories", "type": "array", "items": {"type": "string"}}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Paged list of workflows.", "schema": {"$ref": "#/definitions/WorkflowList"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Workflows"], "summary": "Create a workflow", "description": "Creates a new workflow and version (if provided).", "operationId": "createWorkflow", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateWorkflowRequest"}}], "responses": {"201": {"description": "Details of the newly created workflow.", "schema": {"$ref": "#/definitions/Workflow"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Ensure the workflow name is unique.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/runs": {"get": {"tags": ["Workflow Runs"], "summary": "Get a list of workflow runs", "description": "Gets a list of workflow runs.", "operationId": "listWorkflowRuns", "produces": ["application/json"], "parameters": [{"in": "query", "name": "status", "type": "array", "items": {"enum": ["aborted", "aborting", "failed", "new", "running", "submitted", "succeeded", "timedOut"], "type": "string"}}, {"in": "query", "name": "tenantId", "description": "ID of the tenant", "type": "string"}, {"in": "query", "name": "name", "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Paged list of workflow runs that the user has access to.", "schema": {"$ref": "#/definitions/WorkflowRunList"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/runs/{runId}": {"get": {"tags": ["Workflow Runs"], "summary": "Get the details of a workflow run", "description": "Gets the details of a workflow run with a given ID.", "operationId": "getWorkflowRun", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the workflow run", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["definition", "engineParameters"], "type": "string"}}], "responses": {"200": {"description": "Details of the workflow run.", "schema": {"$ref": "#/definitions/WorkflowRun"}}, "404": {"description": "The workflow run with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/runs/{runId}/history": {"get": {"tags": ["Workflow Runs"], "summary": "Get a list of workflow run history events", "description": "Gets a list of history events for a workflow run with a given ID.", "operationId": "listWorkflowRunHistory", "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the workflow run", "required": true, "type": "string"}, {"in": "query", "name": "sort", "type": "string", "default": "eventId asc"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}], "responses": {"200": {"description": "Paged list of workflow run history events.", "schema": {"$ref": "#/definitions/WorkflowRunHistoryEventList"}}, "404": {"description": "The workflow run with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/runs/{runId}:abort": {"put": {"tags": ["Workflow Runs"], "summary": "Abort a workflow run", "description": "Aborts the workflow run with a given ID.", "operationId": "abortWorkflowRun", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "runId", "description": "ID of the workflow run", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["definition", "engineParameters"], "type": "string"}}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/AbortWorkflowRunRequest"}}], "responses": {"200": {"description": "Details of the aborted workflow run.", "schema": {"$ref": "#/definitions/WorkflowRun"}}, "404": {"description": "The workflow run with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/signals": {"get": {"tags": ["Workflow Signals"], "summary": "Get a list of workflow signals", "description": "Gets a list of workflow signals.", "operationId": "listSignals", "produces": ["application/json"], "parameters": [{"in": "query", "name": "tenantId", "description": "ID of the tenant", "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Paged list of workflow signals that the user has access to.", "schema": {"$ref": "#/definitions/WorkflowSignalList"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/signals/{signalId}": {"get": {"tags": ["Workflow Signals"], "summary": "Get the details of a workflow signal", "description": "Gets the details of a workflow signal with a given ID.", "operationId": "getSignal", "produces": ["application/json"], "parameters": [{"in": "path", "name": "signalId", "description": "ID of the workflow signal", "required": true, "type": "string"}], "responses": {"200": {"description": "Details of the workflow signal.", "schema": {"$ref": "#/definitions/WorkflowSignal"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "The signal with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/signals/{signalId}:fail": {"patch": {"tags": ["Workflow Signals"], "summary": "Fail a workflow signal", "description": "Responds to a pending workflow signal with a failure result.", "operationId": "failSignal", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "signalId", "description": "ID of the workflow signal", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/FailWorkflowSignalRequest"}}], "responses": {"200": {"description": "Returns the failed signal.", "schema": {"$ref": "#/definitions/WorkflowSignal"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "The signal with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "The workflow signal is no longer active.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/signals/{signalId}:succeed": {"patch": {"tags": ["Workflow Signals"], "summary": "Succeed a workflow signal", "description": "Responds to a pending workflow signal with a successful result.", "operationId": "succeedSignal", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "signalId", "description": "ID of the workflow signal", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/SucceedWorkflowSignalRequest"}}], "responses": {"200": {"description": "Returns the succeeded signal.", "schema": {"$ref": "#/definitions/WorkflowSignal"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "The signal with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "The workflow signal is no longer active.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/versions": {"get": {"tags": ["Workflow Versions"], "summary": "Get a list of all workflow versions", "description": "Gets a list of workflow versions across all workflows.", "operationId": "listAllWorkflowVersions", "produces": ["application/json"], "parameters": [{"in": "query", "name": "tenantId", "description": "ID of the tenant", "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Paged list of workflow versions across all workflows.", "schema": {"$ref": "#/definitions/WorkflowVersionList"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/{workflowId}": {"get": {"tags": ["Workflows"], "summary": "Get the details of a workflow", "description": "Gets the details of a workflow with a given ID.", "operationId": "getWorkflow", "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}], "responses": {"200": {"description": "Details of the workflow.", "schema": {"$ref": "#/definitions/Workflow"}}, "404": {"description": "The workflow with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Workflows"], "summary": "Update an existing workflow", "description": "Updates the workflow with a given ID.", "operationId": "updateWorkflow", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateWorkflowRequest"}}], "responses": {"200": {"description": "Returns updated workflow.", "schema": {"$ref": "#/definitions/Workflow"}}, "404": {"description": "The workflow with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Ensure the workflow name is unique.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/{workflowId}/versions": {"get": {"tags": ["Workflow Versions"], "summary": "Get a list of workflow versions", "description": "Gets a list of workflow versions with a given workflow ID.", "operationId": "listWorkflowVersions", "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["totalItemCount"], "type": "string"}}, {"in": "query", "name": "pageSize", "description": "Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.", "type": "integer", "format": "int32", "default": 10}, {"in": "query", "name": "pageToken", "description": "Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.", "type": "string"}, {"in": "query", "name": "sort", "description": "Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).", "type": "string", "default": "timeCreated asc"}], "responses": {"200": {"description": "Paged list of workflow versions that the user has access to.", "schema": {"$ref": "#/definitions/WorkflowVersionList"}}, "404": {"description": "The workflow with the specified ID was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "post": {"tags": ["Workflow Versions"], "summary": "Create a new workflow version", "description": "Creates a new workflow version with a given workflow ID.", "operationId": "createWorkflowVersion", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/CreateWorkflowVersionRequest"}}], "responses": {"201": {"description": "Details of the created workflow version.", "schema": {"$ref": "#/definitions/WorkflowVersion"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Ensure the workflow version name is unique.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/{workflowId}/versions/{versionName}": {"get": {"tags": ["Workflow Versions"], "summary": "Get the details of a workflow version", "description": "Gets the details for a workflow version with a given workflow ID and version name.", "operationId": "getWorkflowVersion", "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "path", "name": "versionName", "description": "Name of the workflow version", "required": true, "type": "string"}], "responses": {"200": {"description": "Details of the workflow version.", "schema": {"$ref": "#/definitions/WorkflowVersion"}}, "404": {"description": "The workflow ID or version name was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}, "patch": {"tags": ["Workflow Versions"], "summary": "Update an existing workflow version", "description": "Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call.", "operationId": "updateWorkflowVersion", "consumes": ["application/json-patch+json", "application/json", "text/json", "application/*+json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "path", "name": "versionName", "description": "Name of the workflow version", "required": true, "type": "string"}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/UpdateWorkflowVersionRequest"}}], "responses": {"200": {"description": "Details of the created workflow run.", "schema": {"$ref": "#/definitions/WorkflowVersion"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "409": {"description": "A conflict was found. Ensure the workflow version name is unique.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "404": {"description": "The workflow ID or version name was not found.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workflows/{workflowId}/versions/{versionName}:launch": {"post": {"tags": ["Workflow Versions"], "summary": "Launch a workflow version", "description": "Launches a workflow version with a given workflow ID and version name.", "operationId": "launchWorkflowVersion", "consumes": ["application/json"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "workflowId", "description": "ID of the workflow", "required": true, "type": "string"}, {"in": "path", "name": "versionName", "description": "Name of the workflow version", "required": true, "type": "string"}, {"in": "query", "name": "include", "description": "Comma-separated list of properties to include in the response", "type": "array", "items": {"enum": ["definition", "engineParameters"], "type": "string"}}, {"in": "body", "name": "body", "schema": {"$ref": "#/definitions/LaunchWorkflowVersionRequest"}}], "responses": {"201": {"description": "Details of the created workflow run.", "schema": {"$ref": "#/definitions/WorkflowRun"}}, "400": {"description": "Invalid request.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Unauthorized", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "403": {"description": "Permission denied.", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator.", "schema": {"$ref": "#/definitions/ErrorResponse"}}}}}, "/v1/workgroups": {"get": {"tags": ["Workgroups"], "summary": "Get a list of available workgroups. Requires session token (psToken) authorization Bearer token", "description": "Get a list of available workgroups", "operationId": "listWorkgroups", "produces": ["application/json"], "responses": {"200": {"description": "Workgroups returned successfully", "schema": {"$ref": "#/definitions/WorkgroupResponse"}}, "401": {"description": "The provided session token is unauthorized."}, "default": {"description": "Unexpected issue. Please try your request again. If problem persists, please contact the system administrator."}}}}}, "definitions": {"Domain": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}}}, "AccountResponse": {"type": "object", "properties": {"id": {"type": "string"}, "type": {"type": "string"}, "name": {"type": "string"}, "domain": {"$ref": "#/definitions/Domain"}}}, "HealthCheckStatuses": {"format": "int32", "description": "Health status", "enum": [0, 1, 2, 3], "type": "integer"}, "ServiceHealthResponse": {"description": "Describes the individual health of all services in the platform", "type": "object", "properties": {"name": {"description": "Name of the service", "type": "string"}, "status": {"$ref": "#/definitions/HealthCheckStatuses"}, "version": {"description": "Current version for the deployed service", "type": "string"}}}, "SystemHealthResponse": {"description": "The overall health of the platform", "type": "object", "properties": {"status": {"$ref": "#/definitions/HealthCheckStatuses"}, "details": {"description": "Service health details", "type": "array", "items": {"$ref": "#/definitions/ServiceHealthResponse"}}}}, "ErrorResponse": {"type": "object", "properties": {"code": {"type": "string"}, "message": {"type": "string"}, "details": {"type": "array", "items": {"type": "object"}}}}, "Project": {"type": "object", "properties": {"id": {"type": "string"}, "urn": {"type": "string"}, "name": {"type": "string"}, "owner": {"type": "string"}, "timeCreated": {"format": "date-time", "type": "string"}, "timeModified": {"format": "date-time", "type": "string"}}}, "ProjectPagedItems": {"description": "Paged list response", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/Project"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "Region": {"description": "Resource representing environment details", "type": "object", "properties": {"name": {"description": "Name of the environment", "type": "string"}, "displayName": {"description": "Display name for the environment", "type": "string"}, "baseUrl": {"description": "BaseUrl for the environment", "type": "string"}, "isEnabled": {"description": "True if the environment is enabled", "type": "boolean"}}}, "TokenResponse": {"description": "Response payload for token create", "type": "object", "properties": {"access_token": {"description": "The returned token is either a psToken or a JWT token depending on the context of the call.", "type": "string"}, "token_type": {"description": "The type of token requested.", "type": "string"}}}, "AccessTokenRequest": {"description": "Access token passed into an api request", "type": "object", "properties": {"access_token": {"description": "This is either a psToken or a JWT token depending on the context of the call.", "type": "string"}}}, "Workgroup": {"type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}}}, "TokenDetailResponse": {"type": "object", "properties": {"uid": {"type": "string"}, "name": {"type": "string"}, "username": {"type": "string"}, "currentWorkgroup": {"$ref": "#/definitions/Workgroup"}, "tid": {"type": "string"}, "acls": {"type": "array", "items": {"type": "string"}}, "domain": {"$ref": "#/definitions/Domain"}}}, "ProductUsage": {"required": ["amount", "type", "unit"], "type": "object", "properties": {"type": {"type": "string"}, "amount": {"format": "double", "type": "number"}, "unit": {"type": "string"}, "iCredit": {"format": "double", "type": "number"}}}, "User": {"type": "object", "properties": {"fullName": {"type": "string"}, "userName": {"type": "string"}, "domain": {"$ref": "#/definitions/Domain"}, "type": {"type": "string"}}}, "UserAggregatedUsage": {"type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "iCredit": {"format": "double", "type": "number"}, "usages": {"type": "array", "items": {"$ref": "#/definitions/ProductUsage"}}}}, "PeriodUsageSummary": {"type": "object", "properties": {"start": {"format": "date-time", "type": "string"}, "end": {"format": "date-time", "type": "string"}, "iCredit": {"format": "int32", "type": "integer"}, "totalUsages": {"type": "array", "items": {"$ref": "#/definitions/ProductUsage"}}, "userAggregatedUsages": {"type": "array", "items": {"$ref": "#/definitions/UserAggregatedUsage"}}}}, "UsageResponse": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/PeriodUsageSummary"}}}}, "WorkgroupResponse": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/Workgroup"}}}}, "DeliveryTargetAwsSnsTopic": {"description": "Configuration for an AWS SNS delivery topic", "required": ["topicArn"], "type": "object", "properties": {"topicArn": {"description": "ARN for the AWS SNS topic", "type": "string"}}}, "DeliveryTargetAwsSqsQueue": {"description": "Configuration for an AWS SQS delivery queue", "required": ["queueUrl"], "type": "object", "properties": {"queueUrl": {"description": "URL for the AWS SQS queue", "type": "string"}}}, "DeliveryTargetWorkflowRunLaunch": {"description": "Configuration for a delivery via WES workflow run launch", "required": ["id", "name", "version"], "type": "object", "properties": {"id": {"description": "Id of the workflow to launch", "type": "string"}, "version": {"description": "Version of the workflow to launch, for the given id", "type": "string"}, "name": {"description": "Name for the workflowRun", "type": "string"}, "input": {"description": "Arguments for the workflowRun"}}}, "DeliveryTarget": {"description": "Configuration for the action to perform for events matching this subscription; only one delivery type may be specified", "type": "object", "properties": {"awsSnsTopic": {"$ref": "#/definitions/DeliveryTargetAwsSnsTopic"}, "awsSqsQueue": {"$ref": "#/definitions/DeliveryTargetAwsSqsQueue"}, "workflowRunLaunch": {"$ref": "#/definitions/DeliveryTargetWorkflowRunLaunch"}}}, "Subscription": {"description": "Details for an Event Notification Service subscription", "type": "object", "properties": {"id": {"description": "Unique id of the subscription", "type": "string"}, "urn": {"description": "URN of the subscription", "type": "string"}, "type": {"description": "Type of event the subscription matches", "type": "string"}, "actions": {"description": "Types of actions the subscription matches for the event type", "type": "array", "items": {"type": "string"}}, "filterExpression": {"description": "JSON-structured filter expression for events matching the subscription", "type": "string"}, "name": {"description": "Name of the subscription", "type": "string"}, "description": {"description": "Optional description for the subscription", "type": "string"}, "deliveryTarget": {"$ref": "#/definitions/DeliveryTarget"}, "matchIdentities": {"description": "ACL Identities for events the subscription matches", "type": "array", "items": {"type": "string"}}, "acl": {"description": "The list of identities that have access to this subscription", "type": "array", "items": {"type": "string"}}, "tenantId": {"description": "Tenant id of the subscription owner", "type": "string"}, "createdByUserId": {"description": "User id for the creator of the subscription", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Timestamp when the subscription was created", "type": "string"}, "deletedByUserId": {"description": "Id of the user who deleted the subscription, if applicable", "type": "string"}, "timeDeleted": {"format": "date-time", "description": "Timestamp when the subscription was deleted, if applicable", "type": "string"}, "isDeleted": {"description": "Whether or not the subscription has been deleted", "type": "boolean"}}}, "SubscriptionListSortFields": {"enum": ["id"], "type": "string"}, "SortDirection": {"enum": ["Asc", "Desc", "Ascending", "Descending"], "type": "string"}, "SubscriptionList": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/Subscription"}}, "itemCount": {"format": "int32", "type": "integer"}, "firstPageToken": {"type": "string"}, "nextPageToken": {"type": "string"}, "prevPageToken": {"type": "string"}, "lastPageToken": {"type": "string"}, "totalItemCount": {"format": "int64", "type": "integer"}, "totalPageCount": {"format": "int64", "type": "integer"}, "sortedBy": {"$ref": "#/definitions/SubscriptionListSortFields"}, "sortDirection": {"$ref": "#/definitions/SortDirection"}}}, "CreateSubscriptionRequest": {"required": ["deliveryTarget", "name", "type"], "type": "object", "properties": {"type": {"description": "Event type which will be subscribed to", "maxLength": 255, "pattern": "^[a-zA-Z]+[.a-zA-Z]*$", "type": "string"}, "actions": {"description": "Actions which will be subscribed to for the event type", "maxLength": 255, "type": "array", "items": {"type": "string"}}, "name": {"description": "Name of the subscription", "maxLength": 255, "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$", "type": "string"}, "description": {"description": "Optional description for the subscription", "maxLength": 8192, "type": "string"}, "filterExpression": {"description": "JSON-structured filter expression for events matching the subscription", "maxLength": 8192, "type": "string"}, "deliveryTarget": {"$ref": "#/definitions/DeliveryTarget"}}}, "ArchiveStatuses": {"description": "The valid Archive Status values for files in GDS", "enum": ["None", "Archived", "Unarchiving"], "type": "string"}, "AWSS3ObjectStoreSetting": {"required": ["bucketName"], "type": "object", "properties": {"bucketName": {"description": "The bucket name", "maxLength": 63, "minLength": 3, "type": "string"}, "keyPrefix": {"description": "Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize\r\naccess here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash.", "pattern": "^[^/].*$", "type": "string"}}}, "AwsS3TemporaryUploadCredentials": {"description": "Defines the credentials for uploading to Amazon Simple Storage Service (Amazon S3). This definition matches the Upload Credentials API model of the Genomic Data Store (GDS) service.", "type": "object", "properties": {"access_Key_Id": {"description": "Access key for use with AWS S3", "type": "string"}, "secret_Access_Key": {"description": "Secret key for use with AWS S3", "type": "string"}, "session_Token": {"description": "Token for use with AWS S3", "type": "string"}, "region": {"description": "AWS region the folder will/does reside in", "type": "string"}, "bucketName": {"description": "AWS bucket the folder will/does reside in", "type": "string"}, "keyPrefix": {"description": "AWS upload location for this folder", "type": "string"}, "expirationDate": {"format": "date-time", "description": "expiration for temporary credentials", "type": "string"}}}, "BulkFileUpdateItem": {"type": "object", "properties": {"id": {"description": "Id of this file", "type": "string"}, "metadata": {"description": "Metadata about this file and its contents"}}}, "BulkFileUpdateRequest": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/BulkFileUpdateItem"}}}}, "BulkFolderUpdateItem": {"type": "object", "properties": {"id": {"description": "Id of this folder", "type": "string"}, "metadata": {"description": "Metadata about this folder and its contents"}}}, "BulkFolderUpdateRequest": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/BulkFolderUpdateItem"}}}}, "CompleteSessionRequest": {"required": ["expectedSessionFileCount"], "type": "object", "properties": {"expectedSessionFileCount": {"format": "int32", "description": "User-defined count used for reconciling files uploaded when closing the session", "type": "integer", "x-omitempty": false}}}, "CreateFileRequest": {"description": "CreateFileRequest Model", "required": ["name"], "type": "object", "properties": {"name": {"description": "Name of the file to be uploaded, case sensitive.", "pattern": "^[^/]+$", "type": "string"}, "volumeId": {"description": "Volume ID to which the file will be uploaded", "type": "string"}, "folderPath": {"description": "Optional folder path where the file will be uploaded to", "type": "string"}, "type": {"description": "Optional file content type, e.g. text/plain, application/json", "type": "string"}, "volumeName": {"description": "Name of the Volume", "type": "string"}}}, "CreateFolderRequest": {"required": ["name"], "type": "object", "properties": {"name": {"description": "Folder name, unique to this path, for the folder being created", "pattern": "^[^/]+$", "type": "string"}, "folderPath": {"description": "Path from the root folder to the location for the folder being created; must start and end with '/'", "type": "string"}, "volumeId": {"description": "The unique identifier for this Folder's Volume", "type": "string"}, "volumeName": {"description": "The unique name for the Folder's Volume", "type": "string"}, "metadata": {"description": "Metadata about this folder and its contents"}, "acl": {"description": "Optional array to replace the acl on the resource.", "type": "array", "items": {"type": "string"}}}}, "CreateSessionRequest": {"type": "object", "properties": {"metadata": {"description": "Metadata about this session and its contents"}}}, "CreateSessionResponse": {"type": "object", "properties": {"objectStoreAccess": {"$ref": "#/definitions/ObjectStoreAccess"}, "id": {"description": "A unique identifier for this Session", "type": "string"}, "folderUrn": {"description": "The Universal Resource Name of the Folder associated with the Session", "type": "string"}, "status": {"$ref": "#/definitions/SessionStatus"}, "timeCreated": {"format": "date-time", "description": "The date & time this Session was created, in GDS", "type": "string"}, "timeCredentialsExpire": {"format": "date-time", "description": "The date & time this upload session expires", "type": "string"}, "timeClosed": {"format": "date-time", "description": "The date & time this Session was closed, in GDS", "type": "string"}, "timeCompleted": {"format": "date-time", "description": "The date & time this Session was completed, in GDS", "type": "string"}, "metadata": {}}}, "CreateVolumeConfigurationRequest": {"required": ["name", "objectStoreSettings"], "type": "object", "properties": {"name": {"description": "Name for the volume configuration", "type": "string"}, "objectStoreSettings": {"$ref": "#/definitions/ObjectStoreSettings"}}}, "CreateVolumeRequest": {"required": ["name"], "type": "object", "properties": {"name": {"description": "Name for the volume", "type": "string"}, "volumeConfigurationName": {"description": "Unique name of the volume configuration to use", "type": "string"}, "rootKeyPrefix": {"description": "The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used.\r\nIf provided, it must start with the VolumeConfiguration's keyprefix and end with a /.\r\nTo create a volume representing the root of a bucket, use the value '/'.", "pattern": "^(/)$|^([^/].*[/])$", "type": "string"}, "metadata": {"description": "Metadata about this volume and its contents"}}}, "CreateVolumeResponse": {"type": "object", "properties": {"importSessionId": {"description": "Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom\r\nVolume configurations.", "type": "string"}, "objectStoreAccess": {"$ref": "#/definitions/ObjectStoreAccess"}, "id": {"description": "A unique identifier for this Volume", "type": "string"}, "name": {"description": "The name of this Volume", "type": "string"}, "tenantId": {"description": "The unique identifier for this Volume's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this Volume's Sub Tenant", "type": "string"}, "urn": {"description": "The Universal Resource Name, unique to this Volume", "type": "string"}, "rootFolderId": {"description": "The unique identifier for the root Folder of this Volume", "type": "string"}, "rootKeyPrefix": {"description": "The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set.", "type": "string"}, "volumeConfigurationName": {"description": "Unique name of the Volume configuration for this Volume.\r\nThis field will only be set if a custom Volume configuration is associated.", "type": "string"}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this Volume", "type": "array", "items": {"type": "string"}}, "timeCreated": {"format": "date-time", "description": "The date & time this Volume was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Volume", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Volume was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this Volume", "type": "string"}, "jobStatus": {"$ref": "#/definitions/JobStatus"}, "metadata": {"description": "Metadata about this Volume"}}}, "FileArchiveRequest": {"description": "FileArchiveRequest to specify the Storage Tier", "required": ["storageTier"], "type": "object", "properties": {"storageTier": {"$ref": "#/definitions/FileArchiveStorageTier"}}}, "FileArchiveStorageTier": {"enum": ["Archive", "DeepArchive"], "type": "string"}, "FileListResponse": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/FileResponse"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "FileResponse": {"type": "object", "properties": {"volumeMetadata": {"description": "Metadata about this file's volume"}, "id": {"description": "A unique identifier for this File", "type": "string"}, "name": {"description": "The name of this File", "type": "string"}, "volumeId": {"description": "The unique identifier of the volume where the file resides", "type": "string"}, "volumeName": {"description": "The name of the volume where the file resides", "type": "string"}, "volumeConfigurationName": {"description": "The name of the volume configuration (BYOB only)", "type": "string"}, "type": {"description": "The type of the File", "type": "string"}, "tenantId": {"description": "The unique identifier for this File's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this File's Sub Tenant", "type": "string"}, "path": {"description": "The (GDS) path to this File", "type": "string"}, "timeCreated": {"format": "date-time", "description": "The date & time this File was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this File", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this File was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this File", "type": "string"}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this File", "type": "array", "items": {"type": "string"}}, "urn": {"description": "The Universal Resource Name, unique to this File", "type": "string"}, "sizeInBytes": {"format": "int64", "description": "The File's Size in bytes", "type": "integer"}, "metadata": {"description": "Metadata about this File"}, "isUploaded": {"description": "The current upload state of the File", "type": "boolean"}, "archiveStatus": {"$ref": "#/definitions/ArchiveStatuses"}, "timeArchived": {"format": "date-time", "description": "The date & time this File was archived", "type": "string"}, "storageTier": {"$ref": "#/definitions/StorageTier"}, "eTag": {"description": "The File's ETag", "type": "string"}, "presignedUrl": {"description": "The presigned Url allowing access to this File", "type": "string"}}}, "FileUnarchiveRequest": {"description": "FileUnarchiveRequest to specify the RestoreSpeed", "required": ["restoreSpeed"], "type": "object", "properties": {"restoreSpeed": {"description": "The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard.", "type": "string"}}}, "FileWriteableResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this File", "type": "string"}, "name": {"description": "The name of this File", "type": "string"}, "volumeId": {"description": "The unique identifier of the volume where the file resides", "type": "string"}, "volumeName": {"description": "The name of the volume where the file resides", "type": "string"}, "volumeConfigurationName": {"description": "The name of the volume configuration (BYOB only)", "type": "string"}, "type": {"description": "The type of the File", "type": "string"}, "tenantId": {"description": "The unique identifier for this File's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this File's Sub Tenant", "type": "string"}, "path": {"description": "The (GDS) path to this File", "type": "string"}, "timeCreated": {"format": "date-time", "description": "The date & time this File was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this File", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this File was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this File", "type": "string"}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this File", "type": "array", "items": {"type": "string"}}, "urn": {"description": "The Universal Resource Name, unique to this File", "type": "string"}, "sizeInBytes": {"format": "int64", "description": "The File's Size in bytes", "type": "integer"}, "metadata": {"description": "Metadata about this File"}, "isUploaded": {"description": "The current upload state of the File", "type": "boolean"}, "archiveStatus": {"$ref": "#/definitions/ArchiveStatuses"}, "timeArchived": {"format": "date-time", "description": "The date & time this File was archived", "type": "string"}, "storageTier": {"$ref": "#/definitions/StorageTier"}, "eTag": {"description": "The File's ETag", "type": "string"}, "objectStoreAccess": {"$ref": "#/definitions/ObjectStoreAccess"}}}, "FolderArchiveRequest": {"description": "FolderArchiveRequest to specify the Storage Tier", "required": ["storageTier"], "type": "object", "properties": {"storageTier": {"$ref": "#/definitions/FolderArchiveStorageTier"}}}, "FolderArchiveStorageTier": {"enum": ["Archive", "DeepArchive"], "type": "string"}, "FolderCopyOperationParameters": {"description": "Operation parameters for folder copy operations", "type": "object", "properties": {"sourceFolderUrn": {"description": "The Urn of the source folder for the copy operation", "type": "string"}, "targetFolderUrn": {"description": "The Urn of the target folder for the copy operation", "type": "string"}, "destinationFolderName": {"description": "The folder name for the copied folder", "type": "string"}}}, "FolderCopyRequest": {"required": ["targetParentFolderId"], "type": "object", "properties": {"targetParentFolderId": {"description": "The parent folder into which the source folder will be copied.", "type": "string"}, "destinationFolderName": {"description": "A new name for the destination folder. Required if target parent folder is the same as the destination folder.\r\nWhen optional and not provided, the source folder name is used as the destination folder name.", "pattern": "^[^/]+$", "type": "string"}}}, "FolderListResponse": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/FolderResponse"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "FolderResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this Folder", "type": "string"}, "name": {"description": "The name of this Folder", "type": "string"}, "volumeId": {"description": "The unique identifier for this Folder's Volume", "type": "string"}, "volumeName": {"description": "The name of this Folder's Volume", "type": "string"}, "tenantId": {"description": "The unique identifier for this Folders's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this Folder's Sub Tenant", "type": "string"}, "urn": {"description": "The Universal Resource Name, unique to this Folder", "type": "string"}, "path": {"description": "The (GDS) folder path to this Folder", "type": "string"}, "acl": {"description": "The list of directly specified Id(s) that have access to this Folder", "type": "array", "items": {"type": "string"}}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this Folder", "type": "array", "items": {"type": "string"}}, "timeCreated": {"format": "date-time", "description": "The date & time this Folder was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Folder", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Folder was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this Folder", "type": "string"}, "metadata": {"description": "Metadata about this folder"}, "volumeMetadata": {"description": "Metadata about this folder's volume"}, "jobStatus": {"$ref": "#/definitions/JobStatus"}, "archiveJobStorageTier": {"$ref": "#/definitions/StorageTier"}}}, "FolderUnarchiveRequest": {"required": ["restoreSpeed"], "type": "object", "properties": {"restoreSpeed": {"description": "The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard.", "type": "string"}}}, "FolderUpdateRequest": {"type": "object", "properties": {"metadata": {"description": "Metadata about this folder and its contents"}, "acl": {"description": "Optional array to replace the acl on the resource.", "type": "array", "items": {"type": "string"}}}}, "FolderWriteableResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this Folder", "type": "string"}, "name": {"description": "The name of this Folder", "type": "string"}, "volumeId": {"description": "The unique identifier for this Folder's Volume", "type": "string"}, "volumeName": {"description": "The name of this Folder's Volume", "type": "string"}, "tenantId": {"description": "The unique identifier for this Folders's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this Folder's Sub Tenant", "type": "string"}, "urn": {"description": "The Universal Resource Name, unique to this Folder", "type": "string"}, "path": {"description": "The (GDS) folder path to this Folder", "type": "string"}, "acl": {"description": "The list of directly specified Id(s) that have access to this Folder", "type": "array", "items": {"type": "string"}}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this Folder", "type": "array", "items": {"type": "string"}}, "timeCreated": {"format": "date-time", "description": "The date & time this Folder was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Folder", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Folder was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this Folder", "type": "string"}, "metadata": {"description": "Metadata about this folder"}, "volumeMetadata": {"description": "Metadata about this folder's volume"}, "jobStatus": {"$ref": "#/definitions/JobStatus"}, "archiveJobStorageTier": {"$ref": "#/definitions/StorageTier"}, "objectStoreAccess": {"$ref": "#/definitions/ObjectStoreAccess"}}}, "JobOperationParameters": {"description": "Container for XXXOperationParameters objects, which have additional details related to the specific job operation type.\r\nOnly one object will be populated.", "type": "object", "properties": {"folderCopy": {"$ref": "#/definitions/FolderCopyOperationParameters"}}}, "JobOperationType": {"description": "The valid job operation type values for resources in GDS", "enum": ["Unknown", "FolderArchive", "FolderUnarchive", "FolderDelete", "FolderCopy"], "type": "string"}, "JobProgressStatus": {"description": "The valid Job Status values for folders in GDS.", "enum": ["Pending", "InProgress", "Completed", "Failed"], "type": "string"}, "JobResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this Job", "type": "string"}, "parentFolderUrn": {"description": "The Universal Resource Name of the parent folder associated with the Job", "type": "string"}, "operationType": {"$ref": "#/definitions/JobOperationType"}, "operationParameters": {"$ref": "#/definitions/JobOperationParameters"}, "progressStatus": {"$ref": "#/definitions/JobProgressStatus"}, "timeCreated": {"format": "date-time", "description": "The date & time this Folder was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Job", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Job was updated, in GDS", "type": "string"}, "timeCompleted": {"format": "date-time", "description": "The date & time this Job was completed, in GDS", "type": "string"}}}, "JobStatus": {"description": "This enum was originally created to store the type of job on a folder or file entity. \r\nThe Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType \r\nand Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job.", "enum": ["None", "Archiving", "Unarchiving", "Deleting"], "type": "string"}, "ObjectStoreAccess": {"description": "ObjectStoreAccess to get the temporaryCredentials per provider", "type": "object", "properties": {"awsS3TemporaryUploadCredentials": {"$ref": "#/definitions/AwsS3TemporaryUploadCredentials"}, "directUploadCredentials": {"$ref": "#/definitions/DirectUploadCredentials"}, "sessionId": {"description": "The id of the upload session", "type": "string"}}}, "ObjectStoreSettings": {"required": ["awsS3", "secretName"], "type": "object", "properties": {"awsS3": {"$ref": "#/definitions/AWSS3ObjectStoreSetting"}, "secretName": {"description": "Platform credentials Name", "type": "string"}}}, "SessionResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this Session", "type": "string"}, "folderUrn": {"description": "The Universal Resource Name of the Folder associated with the Session", "type": "string"}, "status": {"$ref": "#/definitions/SessionStatus"}, "timeCreated": {"format": "date-time", "description": "The date & time this Session was created, in GDS", "type": "string"}, "timeCredentialsExpire": {"format": "date-time", "description": "The date & time this upload session expires", "type": "string"}, "timeClosed": {"format": "date-time", "description": "The date & time this Session was closed, in GDS", "type": "string"}, "timeCompleted": {"format": "date-time", "description": "The date & time this Session was completed, in GDS", "type": "string"}, "metadata": {}}}, "SessionStatus": {"enum": ["Open", "Closed", "Completed"], "type": "string"}, "StorageTier": {"description": "StorageTier", "enum": ["None", "Standard", "Archive", "DeepArchive"], "type": "string"}, "UpdateFileRequest": {"type": "object", "properties": {"type": {"description": "The new file type (e.g. \"text/plain\").", "type": "string"}}}, "UpdateVolumeRequest": {"type": "object", "properties": {"metadata": {"description": "Metadata about this volume and its contents"}}}, "VolumeConfigurationListResponse": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/VolumeConfigurationResponse"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "VolumeConfigurationOnlineStatus": {"description": "The valid Online Status values for Volume configurations in GDS", "enum": ["Initializing", "Ok", "Error"], "type": "string"}, "VolumeConfigurationResponse": {"type": "object", "properties": {"name": {"description": "Name for the volume configuration", "type": "string"}, "tenantId": {"description": "The unique identifier for this Volume Configuration's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this Volume Configurations's Sub Tenant", "type": "string"}, "urn": {"description": "The Universal Resource Name, unique to this Volume Configuration", "type": "string"}, "onlineStatus": {"$ref": "#/definitions/VolumeConfigurationOnlineStatus"}, "errorCode": {"description": "Error code returned from the object store", "type": "string"}, "errorMessage": {"description": "Error message returned from the object store", "type": "string"}, "timeOfLastError": {"format": "date-time", "description": "Timestamp of the last observed error.", "type": "string"}, "timeCreated": {"format": "date-time", "description": "The date & time this Volume was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Volume", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Volume was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this Volume", "type": "string"}, "objectStoreSettings": {"$ref": "#/definitions/ObjectStoreSettings"}}}, "VolumeListResponse": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/VolumeResponse"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "VolumeResponse": {"type": "object", "properties": {"id": {"description": "A unique identifier for this Volume", "type": "string"}, "name": {"description": "The name of this Volume", "type": "string"}, "tenantId": {"description": "The unique identifier for this Volume's Tenant", "type": "string"}, "subTenantId": {"description": "The unique identifier for this Volume's Sub Tenant", "type": "string"}, "urn": {"description": "The Universal Resource Name, unique to this Volume", "type": "string"}, "rootFolderId": {"description": "The unique identifier for the root Folder of this Volume", "type": "string"}, "rootKeyPrefix": {"description": "The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set.", "type": "string"}, "volumeConfigurationName": {"description": "Unique name of the Volume configuration for this Volume.\r\nThis field will only be set if a custom Volume configuration is associated.", "type": "string"}, "inheritedAcl": {"description": "The inherited list of Id(s) that have access to this Volume", "type": "array", "items": {"type": "string"}}, "timeCreated": {"format": "date-time", "description": "The date & time this Volume was created, in GDS", "type": "string"}, "createdBy": {"description": "The creator of this Volume", "type": "string"}, "timeModified": {"format": "date-time", "description": "The date & time this Volume was updated, in GDS", "type": "string"}, "modifiedBy": {"description": "The updator of this Volume", "type": "string"}, "jobStatus": {"$ref": "#/definitions/JobStatus"}, "metadata": {"description": "Metadata about this Volume"}}}, "AbortSequencingRunRequest": {"description": "Request to abort a sequencing run", "type": "object", "properties": {"instrumentRunStatus": {"description": "Optional run status from instrument", "maxLength": 40, "minLength": 0, "type": "string"}, "instrumentRunStatusSummary": {"description": "Optional reason/summary for abort", "maxLength": 255, "minLength": 0, "type": "string"}}}, "AnalysisDatasetCompact": {"description": "Data contract for analysis dataset (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the analysis dataset", "type": "string"}, "displayName": {"description": "Display name of the analysis dataset", "type": "string"}, "analysisRun": {"$ref": "#/definitions/SequencingAnalysisRunCompact"}, "taskRunId": {"description": "Task run id of the analysis dataset", "type": "string"}, "workflowRunId": {"description": "Workflow run id of the analysis dataset", "type": "string"}, "laneNumber": {"format": "int32", "description": "Lane number associated with the analysis dataset", "type": "integer"}, "dataFolderUrn": {"description": "Data folder urn of the analysis dataset", "type": "string"}, "dataFolderVolumePath": {"description": "Data folder volume path of the analysis dataset", "type": "string"}, "attributes": {"description": "Attributes of the analysis dataset"}, "analysisDatasetType": {"$ref": "#/definitions/AnalysisDatasetTypeCompact"}, "type": {"description": "Type of the analysis dataset", "type": "string"}, "qcStatus": {"description": "QC status of the analysis dataset", "type": "string"}, "qcStatusSummary": {"description": "QC summary of the analysis dataset", "type": "string"}, "fileUrns": {"description": "FileUrns of the AnalysisDataset resource", "type": "array", "items": {"type": "string"}}, "externalId": {"description": "External ID of the dataset", "type": "string"}, "inputSamples": {"description": "Input samples of the analysis dataset", "type": "array", "items": {"$ref": "#/definitions/SampleCompact"}}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisDatasetCompactAnalysisDatasetSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/AnalysisDatasetCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "AnalysisDatasetTypeCompact": {"type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the analysis dataset type", "type": "string"}, "namespace": {"description": "Namespace of the analysis dataset type", "type": "string"}, "displayName": {"description": "Display name of the analysis dataset type", "type": "string"}, "documentationUri": {"description": "Documentation uri of the analysis dataset type", "type": "string"}, "descriptionMarkdown": {"description": "Description markdown of the analysis dataset type", "type": "string"}, "attributeSchema": {"description": "Attribute schema of the analysis dataset type"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisDefinition": {"description": "Data contract for an analysis definition", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "compatibleLibraryPrepKits": {"description": "The library preparation kits that are compatible with this analysis definition", "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitCompact"}}, "name": {"description": "Name of the analysis definition", "type": "string"}, "organization": {"description": "Organization owning the analysis definition", "type": "string"}, "isIllumina": {"description": "Indicates whether or not the current analysis definition is from Illumina", "type": "boolean"}, "description": {"description": "Description of the analysis definition", "type": "string"}, "status": {"description": "Status of the analysis definition", "type": "string"}, "illuminaKitSupportMode": {"description": "Illumina Kit Support Mode", "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the analysis definition", "type": "string"}, "displayName": {"description": "User-friendly name of the analysis definition", "type": "string"}, "analysisVersions": {"$ref": "#/definitions/AnalysisVersionDefinitionCompactItemList"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisDefinitionCompact": {"description": "Defines the data contract for an analysis definition", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the analysis definition", "type": "string"}, "organization": {"description": "Organization owning the analysis definition", "type": "string"}, "isIllumina": {"description": "Indicates whether or not the current analysis definition is from Illumina", "type": "boolean"}, "description": {"description": "Description of the analysis definition", "type": "string"}, "status": {"description": "Status of the analysis definition", "type": "string"}, "illuminaKitSupportMode": {"description": "Illumina Kit Support Mode", "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the analysis definition", "type": "string"}, "displayName": {"description": "User-friendly name of the analysis definition", "type": "string"}, "analysisVersions": {"$ref": "#/definitions/AnalysisVersionDefinitionCompactItemList"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisDefinitionCompactAnalysisDefinitionSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/AnalysisDefinitionCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "DisplayName", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "AnalysisVersionDefinition": {"description": "Data contract for analysis version definition", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "version": {"description": "Version of analysis definition", "type": "string"}, "description": {"description": "Description of this version of analysis definition", "type": "string"}, "supportedInstrumentPlatformAndTypes": {"description": "Supported Instrument Platforms and Types of the analysis", "type": "array", "items": {"$ref": "#/definitions/InstrumentPlatformAndTypesResponse"}}, "status": {"description": "Status of this version of analysis definition", "type": "string"}, "analysisType": {"description": "Analysis type of this version of analysis definition", "type": "string"}, "isDragen": {"description": "Indicate whether an analysis is a DRAGEN analysis or not", "type": "boolean"}, "analysisSettings": {"description": "Settings for the analysis (at the global analysis level)"}, "settings": {"$ref": "#/definitions/AnalysisVersionDefinitionSettings"}, "skipAnalysisSection": {"description": "Skip analysis section in generated sample sheets", "type": "boolean"}, "analysisSampleSettings": {"description": "Per-sample settings for the analysis (at the per-sample level)"}, "onRenderRequireRunContents": {"description": "Whether the OnRenderFunction depends on RunContents or not", "type": "boolean"}, "analysisDefinition": {"$ref": "#/definitions/AnalysisDefinitionCompact"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "compatibleLibraryPrepKits": {"description": "The library preparation kits that are compatible with this version of analysis definition\r\n(possibly inherited from parent analysis definition if there is no compatible kits defined in analysis definition version level)", "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitCompact"}}, "compatibleLibraryPrepKitsDefinedForVersion": {"description": "The library preparation kits that are compatible with this version of analysis definition that is defined in analysis definition version level", "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitCompact"}}, "supportedGenomes": {"description": "The optional list of genomes that are supported by this analysis definition version", "type": "array", "items": {"$ref": "#/definitions/GenomeCompact"}}, "excludedGenomes": {"description": "The optional list of genomes that are excluded by this analysis definition version", "type": "array", "items": {"$ref": "#/definitions/GenomeCompact"}}, "onSubmitFunction": {"description": "Logic for validating and transforming AnalysisSettings and AnalysisSampleSettings", "type": "string"}, "onRenderFunction": {"description": "Logic for dynamically rendering AVD settings and AVD setting configurations", "type": "string"}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisVersionDefinitionCompact": {"description": "Defines the data contract for an analysis version definition", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "version": {"description": "Version of analysis definition", "type": "string"}, "description": {"description": "Description of this version of analysis definition", "type": "string"}, "supportedInstrumentPlatformAndTypes": {"description": "Supported Instrument Platforms and Types of the analysis", "type": "array", "items": {"$ref": "#/definitions/InstrumentPlatformAndTypesResponse"}}, "status": {"description": "Status of this version of analysis definition", "type": "string"}, "analysisType": {"description": "Analysis type of this version of analysis definition", "type": "string"}, "isDragen": {"description": "Indicate whether an analysis is a DRAGEN analysis or not", "type": "boolean"}, "analysisSettings": {"description": "Settings for the analysis (at the global analysis level)"}, "settings": {"$ref": "#/definitions/AnalysisVersionDefinitionSettings"}, "skipAnalysisSection": {"description": "Skip analysis section in generated sample sheets", "type": "boolean"}, "analysisSampleSettings": {"description": "Per-sample settings for the analysis (at the per-sample level)"}, "onRenderRequireRunContents": {"description": "Whether the OnRenderFunction depends on RunContents or not", "type": "boolean"}, "analysisDefinition": {"$ref": "#/definitions/AnalysisDefinitionCompact"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "AnalysisVersionDefinitionCompactAnalysisVersionDefinitionSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/AnalysisVersionDefinitionCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Version", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "AnalysisVersionDefinitionCompactItemList": {"description": "A class to represent list of resources in API model", "type": "object", "properties": {"hrefItems": {"format": "uri", "description": "The Href of the items", "type": "string"}, "items": {"description": "The list of the items", "type": "array", "items": {"$ref": "#/definitions/AnalysisVersionDefinitionCompact"}}, "itemCount": {"format": "int32", "description": "The number of the items", "type": "integer"}}}, "AnalysisVersionDefinitionSettings": {"description": "Data transfer object (DTO) for the Settings field of an analysis version definition", "type": "object", "properties": {"sampleSheet": {"$ref": "#/definitions/AnalysisVersionDefinitionSettingsSampleSheetConfiguration"}, "runAnalysisSettings": {"description": "Run analysis settings for a sequencing run"}, "runSetupValidation": {"$ref": "#/definitions/RunSetupValidation"}, "workflowMetadata": {"$ref": "#/definitions/WorkflowMetadataDto"}}}, "AnalysisVersionDefinitionSettingsSampleSheetConfiguration": {"description": "Data transfer object (DTO) for the SampleSheet configuration section of the analysis version definition settings", "type": "object", "properties": {"bclConvertSectionSettings": {"description": "Optional hard-coded settings (key/value pairs) to include in the BCLConvert Settings section of the sample sheet", "type": "object", "additionalProperties": {"type": "string"}}, "analysisSectionSettings": {"description": "Optional hard-coded settings (key/value pairs) to include in the Analysis Settings section of the sample sheet", "type": "object", "additionalProperties": {"type": "string"}}, "cloudSectionSettings": {"description": "Optional hard-coded settings (key/value pairs) to include in the Cloud Settings section of the sample sheet", "type": "object", "additionalProperties": {"type": "string"}}}}, "AuxiliaryFileReferenceCompact": {"description": "Compact model of auxiliary file reference", "type": "object", "properties": {"id": {"description": "Id of the file in GDS", "type": "string"}, "urn": {"description": "Urn of the file in GDS", "type": "string"}, "fileName": {"description": "Name of the file", "type": "string"}, "error": {"description": "Error Message", "type": "string"}}}, "CanUploadResponse": {"description": "Represents the returned data from the sequencing run canUpload.", "type": "object", "properties": {"canUpload": {"description": "The sequencing run is ready to upload or not", "type": "boolean"}}}, "CloseRunUploadSessionRequest": {"description": "Request to refresh a sequencing run upload", "required": ["sessionId"], "type": "object", "properties": {"sessionId": {"description": "ID of last folder upload session", "maxLength": 40, "minLength": 0, "type": "string"}, "expectedSessionFileCount": {"format": "int32", "description": "Optional Expected number of files uploaded in last session", "maximum": 2147483647, "minimum": 0, "type": "integer"}}}, "CloseUploadSessionResponse": {"description": "Represents the returned data from the run closeUploadSession.", "type": "object", "properties": {"sessionClosed": {"description": "Can user start upload operation", "type": "boolean"}}}, "CompleteSequencingRunUploadRequest": {"description": "Request to complete a sequencing run upload", "type": "object", "properties": {"runUploadStatusSummary": {"description": "Detailed summary of run upload status/progress", "maxLength": 255, "minLength": 0, "type": "string"}, "sessionId": {"description": "Optional ID of folder upload session", "maxLength": 255, "minLength": 0, "type": "string"}, "expectedSessionFileCount": {"format": "int32", "description": "Optional Expected number of files uploaded", "maximum": 2147483647, "minimum": 0, "type": "integer"}}}, "ComponentVerificationResult": {"type": "object", "properties": {"pass": {"type": "boolean"}, "details": {"type": "string"}}}, "CreateAnalysisDatasetParameters": {"description": "Data transfer object (DTO) for creating an analysis dataset", "type": "object", "properties": {"name": {"description": "Optional name of the analysis dataset. Must be unique in tenant if provided", "maxLength": 150, "minLength": 0, "type": "string"}, "displayName": {"description": "Optional display name of the analysis dataset", "maxLength": 150, "minLength": 0, "type": "string"}, "externalId": {"description": "External ID to associate with the analysis dataset", "maxLength": 255, "minLength": 0, "type": "string"}, "taskRunId": {"description": "Optional Task run id of the analysis dataset", "maxLength": 50, "minLength": 0, "type": "string"}, "workflowRunId": {"description": "Optional Workflow run id of the analysis dataset", "maxLength": 50, "minLength": 0, "type": "string"}, "laneNumber": {"format": "int32", "description": "Optional Lane number associated with the analysis dataset", "maximum": 8, "minimum": 1, "type": "integer"}, "dataFolderUrn": {"description": "Data folder urn of the analysis dataset", "maxLength": 1152, "minLength": 0, "type": "string"}, "dataFolderVolumePath": {"description": "VolumeName + path of the DataFolder", "maxLength": 2048, "minLength": 0, "type": "string"}, "attributes": {"description": "Attributes of the analysis dataset"}, "type": {"description": "Type of the analysis dataset", "maxLength": 255, "minLength": 0, "type": "string"}, "qcStatus": {"description": "QC status of the analysis dataset", "maxLength": 255, "minLength": 0, "type": "string"}, "qcStatusSummary": {"description": "QC summary of the analysis dataset", "maxLength": 255, "minLength": 0, "type": "string"}, "fileUrns": {"description": "FileUrns (or FileIds) of the AnalysisDataset", "type": "array", "items": {"type": "string"}}}}, "CreateAnalysisDefinitionRequest": {"description": "Request to create an analysis definition", "required": ["name"], "type": "object", "properties": {"name": {"description": "Name of the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization owning the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the analysis definition", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the analysis definition", "enum": ["Active", "Inactive"], "type": "string"}, "libraryPrepKitIds": {"description": "Array of library prep kit IDs that are compatible with this analysis definition", "type": "array", "items": {"type": "string"}}, "illuminaKitSupportMode": {"description": "Illumina Kits Support Mode of analysis definition", "enum": ["All", "Compatible", "None"], "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the analysis definition\r\nDefault regulatory mode is RUO", "enum": ["RUO", "IVD", "IUO"], "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateAnalysisVersionDefinitionRequest": {"description": "Request to create an analysis version definition", "required": ["analysisType", "version"], "type": "object", "properties": {"version": {"description": "Version of analysis definition", "maxLength": 50, "minLength": 0, "type": "string"}, "supportedInstrumentPlatformAndTypes": {"description": "The instrument platform and instrument type supported by the analysis\r\nIf not specified, support all platforms and types", "type": "array", "items": {"$ref": "#/definitions/SupportedInstrumentPlatformAndTypes"}}, "description": {"description": "Description of this version of the analysis definition", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the analysis version definition", "enum": ["Active", "Inactive"], "type": "string"}, "analysisType": {"description": "Analysis type of this version of the analysis definition", "enum": ["Local", "CloudRun", "CloudRunSample", "EdgeRun", "EdgeRunSample"], "type": "string"}, "skipAnalysisSection": {"description": "Controls whether the sample sheet has an analysis-specific section for this analysis. If true, do not\r\ninclude the analysis-specific section.", "type": "boolean"}, "isDragen": {"description": "Indicate whether an analysis is a DRAGEN analysis or not", "type": "boolean"}, "libraryPrepKitIds": {"description": "Array of library prep kit IDs that are compatible with this version of analysis definition", "type": "array", "items": {"type": "string"}}, "supportedGenomeIds": {"description": "Array of genome IDs that are supported by this version of analysis definition", "type": "array", "items": {"type": "string"}}, "excludedGenomeIds": {"description": "Array of genome IDs that are NOT supported by this version of analysis definition", "type": "array", "items": {"type": "string"}}, "analysisSettings": {"description": "Settings for the analysis (at the global analysis level)"}, "analysisSampleSettings": {"description": "Per-sample settings for the analysis (at the per-sample level)"}, "onSubmitFunction": {"description": "Logic for validating and transforming AnalysisSettings and AnalysisSampleSettings", "maxLength": 100000, "minLength": 0, "type": "string"}, "onRenderFunction": {"description": "Logic for dynamically rendering AVD settings and AVD setting configurations", "maxLength": 100000, "minLength": 0, "type": "string"}, "onRenderRequireRunContents": {"description": "Defines whether the analysis fields should be changed based on input of run contents\r\nThis is to avoid unnecessary huge input from UI that is not really needed during rendering", "type": "boolean"}, "settings": {"$ref": "#/definitions/AnalysisVersionDefinitionSettings"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateGenomeRequest": {"description": "Request to create a genome", "required": ["genomeFormat", "name"], "type": "object", "properties": {"acl": {"type": "array", "items": {"type": "string"}}, "name": {"description": "Name of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "DisplayName of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "order": {"format": "int32", "description": "Order of the genome, default is 0", "maximum": 2147483647, "minimum": -2147483648, "type": "integer"}, "isApplicationSpecific": {"description": "Whether the genome is application specific", "type": "boolean"}, "build": {"description": "Build of the genome", "maxLength": 50, "minLength": 0, "type": "string"}, "organization": {"description": "Organization of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the genome", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the genome", "enum": ["Active", "Inactive"], "type": "string"}, "species": {"description": "Species of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "source": {"description": "Source of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "dragenVersion": {"description": "Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.GenomeFormat is Dragen", "maxLength": 50, "minLength": 0, "type": "string"}, "dataLocationUrn": {"description": "Urn of the file in GDS containing the genome data file", "maxLength": 1152, "minLength": 0, "type": "string"}, "genomeFormat": {"description": "Format for the genome file, Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.DragenVersion is required when it is Dragen", "enum": ["Dragen", "Fasta"], "type": "string"}, "settings": {"description": "Custom settings for the genome"}, "sourceFileMetadata": {"description": "Key-value pairs that indicate the source files for the specific genome"}, "fastaFileUrn": {"description": "Urn of the Fasta file being used by the genome", "maxLength": 1152, "minLength": 0, "type": "string"}}}, "CreateIndexAdapterKitByDefinitionRequest": {"description": "Request to create an index adapter kit by definition", "required": ["definition", "definitionFormat"], "type": "object", "properties": {"definitionFormat": {"description": "Definition format for the Definition. Supported value is yaml", "enum": ["Yaml", "Tsv"], "type": "string"}, "definition": {"description": "Definition for the IndexAdapterKit", "type": "string"}, "skipIndexDiversityValidation": {"description": "Flag to skip index diversity validation", "type": "boolean"}}}, "CreateIndexAdapterKitRequest": {"description": "Request to create an index adapter kit", "required": ["allowedIndexStrategies", "name"], "type": "object", "properties": {"name": {"description": "Name of the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization owning the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the kit", "maxLength": 8192, "minLength": 0, "type": "string"}, "allowedIndexStrategies": {"description": "Allowed index strategies", "type": "array", "items": {"description": "Defines the index strategy for an index adapter kit", "enum": ["NoIndex", "Single", "Dual"], "type": "string"}}, "adapterSequenceRead1": {"description": "Optional read 1 adapter sequence", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Optional read 2 adapter sequence", "maxLength": 128, "minLength": 0, "type": "string"}, "settings": {"$ref": "#/definitions/IndexAdapterKitSettings"}, "indexSequences": {"description": "Index sequence mappings", "type": "array", "items": {"$ref": "#/definitions/IndexSequence"}}, "skipIndexDiversityValidation": {"description": "Flag to skip index diversity validation", "type": "boolean"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateLibraryPoolRequest": {"description": "Request to create a library pool", "required": ["libraryIds", "name"], "type": "object", "properties": {"name": {"description": "Name of the library pool. This field is case-insensitive.", "maxLength": 100, "minLength": 0, "type": "string"}, "libraryIds": {"description": "IDs of libraries in the pool", "type": "array", "items": {"type": "string"}}, "description": {"description": "Description of the library pool", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the library pool", "enum": ["Active", "Failed", "Canceled", "Consumed", "QcFailed"], "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateLibraryPrepKitRequest": {"description": "Request to create a library prep kit", "required": ["allowedReadTypes", "name"], "type": "object", "properties": {"name": {"description": "Name of the library prep kit", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the library prep kit", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization from where the library prep kit originated (e.g. Illumina)", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the library prep kit", "maxLength": 8192, "minLength": 0, "type": "string"}, "allowedReadTypes": {"description": "Reads types allowed for the library prep kit", "type": "array", "items": {"description": "Defines the read type used for the sequencing run. \r\nIllumina offers two read types: single-read sequencing and paired-end sequencing", "enum": ["Single", "Paired"], "type": "string"}}, "defaultRead1Length": {"format": "int32", "description": "Default read 1 length", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "defaultRead2Length": {"format": "int32", "description": "Default read 2 length", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "isApplicationSpecific": {"description": "Whether the library prep kit is application specific", "type": "boolean"}, "settings": {"$ref": "#/definitions/LibraryPrepKitSettings"}, "indexAdapterKitIds": {"description": "Array of index adapter kit IDs that are compatible with the library prep kit", "type": "array", "items": {"type": "string"}}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateLibraryRequest": {"description": "Request to create a library", "required": ["name"], "type": "object", "properties": {"name": {"description": "Name of the library. This field is case-insensitive.", "maxLength": 140, "minLength": 0, "type": "string"}, "description": {"description": "Description of the library", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the library", "enum": ["Active", "Failed", "Canceled", "Consumed"], "type": "string"}, "libraryPrepKitId": {"description": "ID of the library prep kit used to prepare the library", "maxLength": 50, "minLength": 0, "type": "string"}, "indexAdapterKitId": {"description": "ID of the index kit used to prepare the library", "maxLength": 50, "minLength": 0, "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using an index adapter kit with fixed index position", "maxLength": 8, "minLength": 0, "type": "string"}, "index1Sequence": {"description": "Index 1 sequence", "maxLength": 10, "minLength": 0, "type": "string"}, "index2Sequence": {"description": "Index 2 sequence", "maxLength": 10, "minLength": 0, "type": "string"}, "index1Name": {"description": "Index 1 name", "maxLength": 100, "minLength": 0, "type": "string"}, "index2Name": {"description": "Index 2 name", "maxLength": 100, "minLength": 0, "type": "string"}, "adapterSequenceRead1": {"description": "Adapter sequence read 1", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Adapter sequence read 2", "maxLength": 128, "minLength": 0, "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreatePlannedRunRequest": {"description": "Request to create a sequencing run plan", "required": ["runConfiguration"], "type": "object", "properties": {"runConfiguration": {"$ref": "#/definitions/CreateSequencingRunConfigurationRequest"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfigurations": {"description": "Run analysis configurations", "type": "array", "items": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}, "isFavorite": {"description": "Set the run as favorite runs", "type": "boolean"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateSampleRequest": {"description": "Request to create a sample", "required": ["name"], "type": "object", "properties": {"name": {"description": "Name of the sample. This field is case-insensitive.", "maxLength": 100, "minLength": 0, "type": "string"}, "description": {"description": "Description of the sample", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the sample in the lab process", "enum": ["New", "Active", "Done", "Canceled", "QcFailed"], "type": "string"}, "labStatus": {"description": "User-customizable value that indicates the status of the sample", "maxLength": 255, "minLength": 0, "type": "string"}, "projectName": {"description": "ProjectName. This field is case-insensitive.\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateSequencingRunAnalysisConfigurationRequest": {"required": ["analysisVersionDefinitionId"], "type": "object", "properties": {"name": {"description": "Name of the analysis configuration", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the analysis configuration", "maxLength": 8192, "minLength": 0, "type": "string"}, "analysisVersionDefinitionId": {"description": "The ID of the analysis version definition on which this analysis configuration is based", "maxLength": 8192, "minLength": 0, "type": "string"}, "settings": {"description": "User-provided analysis-level settings for this analysis configuration (validated against the analysis version definition)"}, "sampleSettings": {"description": "User provided per-sample settings for this analysis configuration\r\nThese must follow the schema described in the analysis version definition", "type": "array", "items": {"$ref": "#/definitions/SampleSettingEntry"}}}}, "CreateSequencingRunConfigurationRequest": {"description": "Request to create a sequencing run configuration", "required": ["numCyclesIndex1", "numCyclesIndex2", "numCyclesRead1", "numCyclesRead2", "readType", "runName"], "type": "object", "properties": {"instrumentType": {"description": "Type of instrument for which the run is planned\r\nRecognized values include:\r\niSeq100, MiniSeq,\r\nMiSeq, MiSeqDx,\r\nNextSeq, NextSeqDx,\r\nHiSeq1000, HiSeq1500, HiSeq2000, HiSeq2500, HiSeq3000, HiSeq4000, HiSeqX\r\nNovaSeq5000, NovaSeq6000.", "type": "string"}, "instrumentPlatform": {"description": "Platform of instrument for which the run is planned\r\nRecognized values include:\r\nNextSeq, HiSeq, MiSeq, Eco, iScan, HiSeqX, NeoPrep, MiniSeq, NovaSeq, iSeq, TruSightNIPT, NextSeq1k2k\r\nNo value entered is treated as the instrument platform of input InstrumentType", "type": "string"}, "runName": {"description": "Name of the run\r\nMust not be null, empty, or consist only of white-space characters", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the run", "maxLength": 8192, "minLength": 0, "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the run, default is RUO", "enum": ["RUO", "IVD", "IUO"], "type": "string"}, "numCyclesRead1": {"format": "int32", "description": "Number of cycles in read 1 \r\nMust not be a negative value", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "numCyclesRead2": {"format": "int32", "description": "Number of cycles in read 2\r\nMust not be a negative value", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "readType": {"description": "Read type of the run", "enum": ["Single", "Paired"], "type": "string"}, "numCyclesIndex1": {"format": "int32", "description": "Number of cycles in index 1\r\nMust not be a negative value", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "numCyclesIndex2": {"format": "int32", "description": "Number of cycles in index 2\r\nMust not be a negative value", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "useCustomPrimerForRead1": {"description": "Value indicating whether read 1 uses custom primer", "type": "boolean"}, "useCustomPrimerForRead2": {"description": "Value indicating whether read 2 uses custom primer", "type": "boolean"}, "useCustomPrimerForIndex1": {"description": "Value indicating whether index 1 uses custom primer.", "type": "boolean"}, "useCustomPrimerForIndex2": {"description": "A value indicating whether index 2 uses custom primer", "type": "boolean"}, "inputContainerIdentifier": {"description": "Input container identifier for planned run", "maxLength": 255, "minLength": 0, "type": "string"}}}, "DirectUploadCredentials": {"description": "Defines the credentials for uploading to GDS directly", "type": "object", "properties": {"prefix": {"description": "Optional path prefix for all file uploads using these credentials. Should be prepended to relative path", "type": "string"}, "volumeName": {"description": "Name of the volume for the file uploads", "type": "string"}, "expirationDate": {"format": "date-time", "description": "Optional expiration date for the credentials or null if they don't expire", "type": "string"}, "fileCreationApiPath": {"description": "API path for the file creation endpoint (relative to base URL)", "type": "string"}, "fileUploadApiPath": {"description": "API path for the file upload endpoint (relative to base URL)", "type": "string"}, "uploadId": {"description": "File upload id, used to upload file", "type": "string"}}}, "DirectUploadFileInfo": {"description": "Direct upload information for a file", "type": "object", "properties": {"fileName": {"description": "Name of the file", "maxLength": 255, "minLength": 0, "type": "string"}, "relativePath": {"description": "Relative path of the file (relative to run folder)", "maxLength": 1024, "minLength": 0, "type": "string"}, "fileId": {"description": "DataStore file ID if known", "maxLength": 1152, "minLength": 0, "type": "string"}, "fileUrn": {"description": "DataStore file URN if known", "maxLength": 1152, "minLength": 0, "type": "string"}}}, "FileReferenceCompact": {"description": "Compact model of gds file reference", "type": "object", "properties": {"id": {"description": "Id of the file in GDS", "type": "string"}, "urn": {"description": "Urn of the file in GDS", "type": "string"}, "fileName": {"description": "Name of the file", "type": "string"}, "fileSize": {"format": "int64", "description": "Size of the file in number of bytes", "type": "integer"}, "href": {"description": "Href of the file in GDS", "type": "string"}, "presignedUrl": {"description": "URL to download the file", "type": "string"}, "error": {"description": "Error Message", "type": "string"}}}, "FlowCellType": {"description": "Information about FlowCellType", "type": "object", "properties": {"type": {"description": "Indicates flow cell type", "type": "string"}, "maxNumberOfLanes": {"format": "int32", "description": "Indicates the maximum number of lanes supported by flowcell type", "type": "integer"}}}, "GenerateSampleSheetForSequencingRunRequest": {"description": "Request to generate sample sheet for an existing sequencing run", "type": "object", "properties": {"include": {"description": "Include flags to specify what is included in the response", "type": "array", "items": {"description": "Available include flags for genomes list", "enum": ["IncludeFileReferences"], "type": "string"}}, "excludeKitUrns": {"description": "Exclude prep kits URNs for generated sample sheet", "type": "boolean"}}}, "GenerateSampleSheetRequest": {"description": "Request to generate a sample sheet", "required": ["runConfiguration"], "type": "object", "properties": {"runConfiguration": {"$ref": "#/definitions/CreateSequencingRunConfigurationRequest"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfigurations": {"description": "Run analysis configurations", "type": "array", "items": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}, "include": {"description": "Include flags to specify what is included in the response", "type": "array", "items": {"description": "Available include flags for genomes list", "enum": ["IncludeFileReferences"], "type": "string"}}, "excludeKitUrns": {"description": "Exclude prep kits URNs for generated sample sheet", "type": "boolean"}}}, "Genome": {"description": "Data contract for genome (full)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the genome", "type": "string"}, "displayName": {"description": "DisplayName of the genome", "type": "string"}, "order": {"format": "int32", "description": "Order of the genome", "type": "integer"}, "organization": {"description": "Organization of the genome, Require gss.genomes.admin scope to set Organization to a value containing\r\nIllumina (case-insensitive)", "type": "string"}, "description": {"description": "Description of the genome", "type": "string"}, "status": {"description": "Status of the genome", "type": "string"}, "species": {"description": "Species of the genome", "type": "string"}, "source": {"description": "Source of the genome", "type": "string"}, "build": {"description": "Build of the genome", "type": "string"}, "dragenVersion": {"description": "Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.V1.GenomeCompact.GenomeFormat is Dragen", "type": "string"}, "dataLocationUrn": {"description": "Urn of the file in GDS containing the genome data file", "type": "string"}, "genomeFormat": {"description": "Format for the genome file, Illumina.GenomicSequencingService.Models.V1.GenomeCompact.DragenVersion is required when it is Dragen", "type": "string"}, "settings": {"description": "Custom settings for the genome"}, "sourceFileMetadata": {"description": "Key-value pairs that indicate the source files for the specific genome"}, "fastaFileUrn": {"description": "The Fasta file Urn being used by the genome", "type": "string"}, "isApplicationSpecific": {"description": "Whether the genome is application specific", "type": "boolean"}, "isIllumina": {"description": "Whether the genome is belonging to Illumina", "type": "boolean"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "GenomeCompact": {"description": "Data contract for genome (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the genome", "type": "string"}, "displayName": {"description": "DisplayName of the genome", "type": "string"}, "order": {"format": "int32", "description": "Order of the genome", "type": "integer"}, "organization": {"description": "Organization of the genome, Require gss.genomes.admin scope to set Organization to a value containing\r\nIllumina (case-insensitive)", "type": "string"}, "description": {"description": "Description of the genome", "type": "string"}, "status": {"description": "Status of the genome", "type": "string"}, "species": {"description": "Species of the genome", "type": "string"}, "source": {"description": "Source of the genome", "type": "string"}, "build": {"description": "Build of the genome", "type": "string"}, "dragenVersion": {"description": "Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.V1.GenomeCompact.GenomeFormat is Dragen", "type": "string"}, "dataLocationUrn": {"description": "Urn of the file in GDS containing the genome data file", "type": "string"}, "genomeFormat": {"description": "Format for the genome file, Illumina.GenomicSequencingService.Models.V1.GenomeCompact.DragenVersion is required when it is Dragen", "type": "string"}, "settings": {"description": "Custom settings for the genome"}, "sourceFileMetadata": {"description": "Key-value pairs that indicate the source files for the specific genome"}, "fastaFileUrn": {"description": "The Fasta file Urn being used by the genome", "type": "string"}, "isApplicationSpecific": {"description": "Whether the genome is application specific", "type": "boolean"}, "isIllumina": {"description": "Whether the genome is belonging to Illumina", "type": "boolean"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "GenomeCompactGenomeSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/GenomeCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Order", "DisplayName", "Name", "Build", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "IndexAdapterKit": {"description": "Data contract for the full index adapter kit", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "canUpdate": {"description": "Indicate whether the IndexAdapterKit can be updated currently.", "type": "boolean"}, "name": {"description": "Name of the kit", "type": "string"}, "displayName": {"description": "User-friendly name of the kit", "type": "string"}, "organization": {"description": "Name of organization owning the kit", "type": "string"}, "isIllumina": {"description": "Indicates whether or not the current index adapter kit is from Illumina", "type": "boolean"}, "description": {"description": "Description of the kit", "type": "string"}, "allowedIndexStrategies": {"description": "List of allowed index strategies", "type": "array", "items": {"type": "string"}}, "adapterSequenceRead1": {"description": "Read 1 adapter sequence", "type": "string"}, "adapterSequenceRead2": {"description": "Read 2 adapter sequence", "type": "string"}, "settings": {"$ref": "#/definitions/IndexAdapterKitSettingsResponse"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "indexSequences": {"description": "Index sequences of the kit", "type": "array", "items": {"$ref": "#/definitions/IndexSequence"}}, "compatibleLibraryPrepKits": {"description": "Compatible library preparation kits for this index adapter kit", "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitCompact"}}, "numCyclesIndex1": {"format": "int32", "description": "Number of cycles in index 1", "type": "integer", "readOnly": true}, "numCyclesIndex2": {"format": "int32", "description": "Number of cycles in index 2", "type": "integer", "readOnly": true}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "IndexAdapterKitCompact": {"description": "Defines the data contract for index adapter kit compact", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the kit", "type": "string"}, "displayName": {"description": "User-friendly name of the kit", "type": "string"}, "organization": {"description": "Name of organization owning the kit", "type": "string"}, "isIllumina": {"description": "Indicates whether or not the current index adapter kit is from Illumina", "type": "boolean"}, "description": {"description": "Description of the kit", "type": "string"}, "allowedIndexStrategies": {"description": "List of allowed index strategies", "type": "array", "items": {"type": "string"}}, "adapterSequenceRead1": {"description": "Read 1 adapter sequence", "type": "string"}, "adapterSequenceRead2": {"description": "Read 2 adapter sequence", "type": "string"}, "settings": {"$ref": "#/definitions/IndexAdapterKitSettingsResponse"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "IndexAdapterKitCompactIndexAdapterKitSortFieldPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/IndexAdapterKitCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "DisplayName", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "IndexAdapterKitSettings": {"description": "Custom settings for an index adapter kit", "type": "object", "properties": {"defaultIndexStrategy": {"description": "Default index strategy for index adapter kit", "enum": ["NoIndex", "Single", "Dual"], "type": "string"}, "overrideCycles": {"description": "Override cycles settings for index adapter kit", "type": "string"}, "fixedLayout": {"description": "Indicates if the index adapter kit is a fixed layout kit", "type": "boolean"}, "multiplate": {"description": "Indicates if the index adapter kit is a multi-plate fixed layout kit", "type": "boolean"}, "multipleIndexesPerWell": {"description": "Indicates if the index adapter kit supports multiple indices in one well", "type": "boolean"}, "fixedIndexPositions": {"description": "Fixed layout index positions for this index adapter kit\r\nFormat: \"{[Plate-]Well[-IndexesCount]}/{Index1Name}[-{Index2Name}]\"", "type": "array", "items": {"type": "string"}}, "enableCustomIndexCycles": {"description": "Indicates if the UI will display a checkbox to enable users to enter custom index cycles for the kit", "type": "boolean"}, "numCyclesIndex1Override": {"format": "int32", "description": "Indicates if the UI should use this value as the default Index1Cycles entry", "type": "integer"}, "numCyclesIndex2Override": {"format": "int32", "description": "Indicates if the UI should use this value as the default Index2Cycles entry", "type": "integer"}, "fixedLayoutPositionKeyByIndexId": {"description": "Indicates the container position for FixedLayout is based on IndexId", "type": "boolean"}, "customBclConvertSettings": {"description": "Key-value pairs of Custom BCL Convert settings for the IndexAdapterKit", "type": "object", "additionalProperties": {"type": "string"}}}}, "IndexAdapterKitSettingsResponse": {"description": "Custom settings for an index adapter kit", "type": "object", "properties": {"defaultIndexStrategy": {"description": "Default index strategy for index adapter kit", "type": "string"}, "overrideCycles": {"description": "Override cycles settings for index adapter kit", "type": "string"}, "fixedLayout": {"description": "Indicates if the index adapter kit is a fixed layout kit", "type": "boolean"}, "multiplate": {"description": "Indicates if the index adapter kit is a multi-plate fixed layout kit", "type": "boolean"}, "multipleIndexesPerWell": {"description": "Indicates if the index adapter kit supports multiple indices in one well", "type": "boolean"}, "fixedIndexPositions": {"description": "Fixed layout index positions for this index adapter kit\r\nFormat: \"{[Plate-]Well[-IndexesCount]}/{Index1Name}[-{Index2Name}]\"", "type": "array", "items": {"type": "string"}}, "enableCustomIndexCycles": {"description": "Indicates if the UI will display a checkbox to enable users to enter custom index cycles for the kit", "type": "boolean"}, "numCyclesIndex1Override": {"format": "int32", "description": "Indicates if the UI should use this value as the default Index1Cycles entry", "type": "integer"}, "numCyclesIndex2Override": {"format": "int32", "description": "Indicates if the UI should use this value as the default Index2Cycles entry", "type": "integer"}, "fixedLayoutPositionKeyByIndexId": {"description": "Indicates the container position for FixedLayout is based on IndexId", "type": "boolean"}, "customBclConvertSettings": {"description": "Custom BCL Convert settings of the IndexAdapterKit", "type": "object", "additionalProperties": {"type": "string"}}}}, "IndexSequence": {"description": "Defines the data contract for an index sequence", "required": ["readNumber", "sequence"], "type": "object", "properties": {"name": {"description": "Name of index", "maxLength": 100, "minLength": 0, "type": "string"}, "readNumber": {"format": "int32", "description": "Read number of index", "maximum": 2, "minimum": 1, "type": "integer"}, "sequence": {"description": "Sequence of index", "maxLength": 10, "minLength": 0, "type": "string"}}}, "Instrument": {"description": "Defines the instrument associated with a sequencing run", "type": "object", "properties": {"id": {"description": "Unique identifier for the instrument", "type": "string"}, "name": {"description": "Name of the instrument", "type": "string"}, "description": {"description": "Description of the instrument", "type": "string"}, "serialNumber": {"description": "Serial number of the instrument (this property can act as unique identifier in the system)", "type": "string"}, "controlSoftwareVersion": {"description": "Research use only (RUO) instrument control software version (set when instrument type is a RUO instrument)", "type": "string"}, "operatingSoftwareVersion": {"description": "Diagnostic (DX) instrument operating software version (set when instrument type is a DX instrument)", "type": "string"}, "instrumentType": {"description": "Instrument type", "type": "string"}}}, "InstrumentPlatformAndTypesResponse": {"description": "Defines the API response model that represents instrument platform and its types", "type": "object", "properties": {"instrumentPlatform": {"description": "The instrument platform", "type": "string"}, "instrumentTypes": {"description": "The instrument types", "type": "array", "items": {"type": "string"}}}}, "InstrumentPlatformInfo": {"description": "Information about InstrumentPlatform", "type": "object", "properties": {"instrumentPlatform": {"description": "Instrument Platform", "type": "string"}, "displayName": {"description": "Display name of instrument platform", "type": "string"}, "runPlanningSupported": {"description": "Indicate if run planning is supported", "type": "boolean"}, "cloudOrchestrationSupported": {"description": "Indicate if cloud orchestration is supported", "type": "boolean"}, "requireInstrumentType": {"description": "Indicate if require instrument type for planned run", "type": "boolean"}, "maxNumberOfLanes": {"format": "int32", "description": "Maximum Number of lanes supported by instrument type/platform", "type": "integer"}, "supportedAnalysisLocations": {"description": "Analysis Location Supported by instrument type/platform", "type": "array", "items": {"type": "string"}}, "configureFlowcellType": {"description": "Indicate if instrument allow configuring flow cell type", "type": "boolean"}, "flowCellTypes": {"description": "Indicate flow cell configuration for instrument (Optional)", "type": "array", "items": {"$ref": "#/definitions/FlowCellType"}}, "read1LengthMin": {"format": "int32", "description": "Minimum Read 1 Length", "type": "integer"}, "read1LengthMax": {"format": "int32", "description": "Maximum Read 1 Length", "type": "integer"}, "read2LengthMin": {"format": "int32", "description": "Minimum Read 2 Length", "type": "integer"}, "read2LengthMax": {"format": "int32", "description": "Maximum Read 2 Length", "type": "integer"}}}, "InstrumentTypeInfo": {"description": "Information about InstrumentType", "type": "object", "properties": {"instrumentType": {"description": "Instrument type", "type": "string"}, "instrumentPlatform": {"description": "Instrument platform", "type": "string"}, "displayName": {"description": "Display name of instrument type", "type": "string"}, "runPlanningSupported": {"description": "Indicate if run planning is supported", "type": "boolean"}, "cloudOrchestrationSupported": {"description": "Indicate if cloud orchestration is supported", "type": "boolean"}, "maxNumberOfLanes": {"format": "int32", "description": "Maximum Number of lanes supported by instrument type/platform", "type": "integer"}, "supportedAnalysisLocations": {"description": "Analysis Location Supported by instrument type/platform", "type": "array", "items": {"type": "string"}}, "configureFlowcellType": {"description": "Indicate if instrument allow configuring flow cell type", "type": "boolean"}, "flowCellTypes": {"description": "Indicate flow cell configuration for instrument (Optional)", "type": "array", "items": {"$ref": "#/definitions/FlowCellType"}}, "read1LengthMin": {"format": "int32", "description": "Minimum Read 1 Length", "type": "integer"}, "read1LengthMax": {"format": "int32", "description": "Maximum Read 1 Length", "type": "integer"}, "read2LengthMin": {"format": "int32", "description": "Minimum Read 2 Length", "type": "integer"}, "read2LengthMax": {"format": "int32", "description": "Maximum Read 2 Length", "type": "integer"}}}, "LaneByReadSequencingStats": {"description": "Defines the data transfer object (DTO) for creating LaneByReadSequencingStats", "required": ["laneNumber", "readNumber"], "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "LaneNumber of the LaneByReadSequencingStats", "type": "integer"}, "readNumber": {"format": "int32", "description": "ReadNumber of the LaneByReadSequencingStats", "type": "integer"}, "tileCount": {"format": "int32", "description": "TileCount of the LaneByReadSequencingStats", "type": "integer"}, "density": {"format": "float", "description": "Density of the LaneByReadSequencingStats", "type": "number"}, "densityDeviation": {"format": "float", "description": "DensityDeviation of the LaneByReadSequencingStats", "type": "number"}, "percentPf": {"format": "float", "description": "PercentPf of the LaneByReadSequencingStats", "type": "number"}, "percentPfDeviation": {"format": "float", "description": "PercentPfDeviation of the LaneByReadSequencingStats", "type": "number"}, "phasing": {"format": "float", "description": "Phasing of the LaneByReadSequencingStats", "type": "number"}, "prePhasing": {"format": "float", "description": "PrePhasing of the LaneByReadSequencingStats", "type": "number"}, "reads": {"format": "int64", "description": "Reads of the LaneByReadSequencingStats", "type": "integer"}, "readsPf": {"format": "int64", "description": "ReadsPf of the LaneByReadSequencingStats", "type": "integer"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the LaneByReadSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the LaneByReadSequencingStats", "type": "number"}, "yield": {"format": "float", "description": "Yield of the LaneByReadSequencingStats", "type": "number"}, "minCycleCalled": {"format": "int32", "description": "MinCycleCalled of the LaneByReadSequencingStats", "type": "integer"}, "maxCycleCalled": {"format": "int32", "description": "MaxCycleCalled of the LaneByReadSequencingStats", "type": "integer"}, "percentAligned": {"format": "float", "description": "PercentAligned of the LaneByReadSequencingStats", "type": "number"}, "percentAlignedDeviation": {"format": "float", "description": "PercentAlignedDeviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the LaneByReadSequencingStats", "type": "number"}, "errorRateDeviation": {"format": "float", "description": "ErrorRateDeviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate35": {"format": "float", "description": "ErrorRate35 of the LaneByReadSequencingStats", "type": "number"}, "errorRate35Deviation": {"format": "float", "description": "ErrorRate35Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate50": {"format": "float", "description": "ErrorRate50 of the LaneByReadSequencingStats", "type": "number"}, "errorRate50Deviation": {"format": "float", "description": "ErrorRate50Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate75": {"format": "float", "description": "ErrorRate75 of the LaneByReadSequencingStats", "type": "number"}, "errorRate75Deviation": {"format": "float", "description": "ErrorRate75Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate100": {"format": "float", "description": "ErrorRate100 of the LaneByReadSequencingStats", "type": "number"}, "errorRate100Deviation": {"format": "float", "description": "ErrorRate100Deviation of the LaneByReadSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the LaneByReadSequencingStats", "type": "number"}, "intensityCycle1Deviation": {"format": "float", "description": "IntensityCycle1Deviation of the LaneByReadSequencingStats", "type": "number"}, "minCycleError": {"format": "int32", "description": "MinCycleError of the LaneByReadSequencingStats", "type": "integer"}, "maxCycleError": {"format": "int32", "description": "MaxCycleError of the LaneByReadSequencingStats", "type": "integer"}, "phasingSlope": {"format": "float", "description": "PhasingSlope of the LaneByReadSequencingStats", "type": "number"}, "phasingOffset": {"format": "float", "description": "PhasingOffset of the LaneByReadSequencingStats", "type": "number"}, "prePhasingSlope": {"format": "float", "description": "PrePhasingSlope of the LaneByReadSequencingStats", "type": "number"}, "prePhasingOffset": {"format": "float", "description": "PrePhasingOffset of the LaneByReadSequencingStats", "type": "number"}, "percentNoCalls": {"format": "float", "description": "PercentNoCalls of the LaneByReadSequencingStats", "type": "number"}, "clusterDensity": {"format": "float", "description": "ClusterDensity of the LaneByReadSequencingStats", "type": "number"}, "occupancy": {"format": "float", "description": "Occupancy of the LaneByReadSequencingStats", "type": "number"}}}, "LaneByReadSequencingStatsResponse": {"description": "Response of LaneByReadSequencingStats", "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "LaneNumber of the LaneByReadSequencingStats", "type": "integer"}, "readNumber": {"format": "int32", "description": "ReadNumber of the LaneByReadSequencingStats", "type": "integer"}, "tileCount": {"format": "int32", "description": "TileCount of the LaneByReadSequencingStats", "type": "integer"}, "density": {"format": "float", "description": "Density of the LaneByReadSequencingStats", "type": "number"}, "densityDeviation": {"format": "float", "description": "DensityDeviation of the LaneByReadSequencingStats", "type": "number"}, "percentPf": {"format": "float", "description": "PercentPf of the LaneByReadSequencingStats", "type": "number"}, "percentPfDeviation": {"format": "float", "description": "PercentPfDeviation of the LaneByReadSequencingStats", "type": "number"}, "phasing": {"format": "float", "description": "Phasing of the LaneByReadSequencingStats", "type": "number"}, "prePhasing": {"format": "float", "description": "PrePhasing of the LaneByReadSequencingStats", "type": "number"}, "reads": {"format": "int64", "description": "Reads of the LaneByReadSequencingStats", "type": "integer"}, "readsPf": {"format": "int64", "description": "ReadsPf of the LaneByReadSequencingStats", "type": "integer"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the LaneByReadSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the LaneByReadSequencingStats", "type": "number"}, "yield": {"format": "float", "description": "Yield of the LaneByReadSequencingStats", "type": "number"}, "minCycleCalled": {"format": "int32", "description": "MinCycleCalled of the LaneByReadSequencingStats", "type": "integer"}, "maxCycleCalled": {"format": "int32", "description": "MaxCycleCalled of the LaneByReadSequencingStats", "type": "integer"}, "percentAligned": {"format": "float", "description": "PercentAligned of the LaneByReadSequencingStats", "type": "number"}, "percentAlignedDeviation": {"format": "float", "description": "PercentAlignedDeviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the LaneByReadSequencingStats", "type": "number"}, "errorRateDeviation": {"format": "float", "description": "ErrorRateDeviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate35": {"format": "float", "description": "ErrorRate35 of the LaneByReadSequencingStats", "type": "number"}, "errorRate35Deviation": {"format": "float", "description": "ErrorRate35Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate50": {"format": "float", "description": "ErrorRate50 of the LaneByReadSequencingStats", "type": "number"}, "errorRate50Deviation": {"format": "float", "description": "ErrorRate50Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate75": {"format": "float", "description": "ErrorRate75 of the LaneByReadSequencingStats", "type": "number"}, "errorRate75Deviation": {"format": "float", "description": "ErrorRate75Deviation of the LaneByReadSequencingStats", "type": "number"}, "errorRate100": {"format": "float", "description": "ErrorRate100 of the LaneByReadSequencingStats", "type": "number"}, "errorRate100Deviation": {"format": "float", "description": "ErrorRate100Deviation of the LaneByReadSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the LaneByReadSequencingStats", "type": "number"}, "intensityCycle1Deviation": {"format": "float", "description": "IntensityCycle1Deviation of the LaneByReadSequencingStats", "type": "number"}, "minCycleError": {"format": "int32", "description": "MinCycleError of the LaneByReadSequencingStats", "type": "integer"}, "maxCycleError": {"format": "int32", "description": "MaxCycleError of the LaneByReadSequencingStats", "type": "integer"}, "phasingSlope": {"format": "float", "description": "PhasingSlope of the LaneByReadSequencingStats", "type": "number"}, "phasingOffset": {"format": "float", "description": "PhasingOffset of the LaneByReadSequencingStats", "type": "number"}, "prePhasingSlope": {"format": "float", "description": "PrePhasingSlope of the LaneByReadSequencingStats", "type": "number"}, "prePhasingOffset": {"format": "float", "description": "PrePhasingOffset of the LaneByReadSequencingStats", "type": "number"}, "percentNoCalls": {"format": "float", "description": "PercentNoCalls of the LaneByReadSequencingStats", "type": "number"}, "clusterDensity": {"format": "float", "description": "ClusterDensity of the LaneByReadSequencingStats", "type": "number"}, "occupancy": {"format": "float", "description": "Occupancy of the LaneByReadSequencingStats", "type": "number"}}}, "LaneContent": {"description": "Defines the API model that represents the library or library pool that one lane in the sequencing run contains", "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "Optional number of the lane. If not provided, it implies that the contents are the same across all lanes", "type": "integer"}, "sameAsLaneNumber": {"format": "int32", "description": "Indicates that the content of this lane is the same as that of the previously-defined lane", "type": "integer"}, "adapterSequenceRead1": {"description": "Default Adapter sequence read 1 for this lane", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Default Adapter sequence read 2 for this lane", "maxLength": 128, "minLength": 0, "type": "string"}, "laneLibraries": {"description": "Information about the samples and libraries the lane contains", "type": "array", "items": {"$ref": "#/definitions/LaneLibrary"}}}}, "LaneContentResponse": {"description": "Defines the API response model that represents the libraries and library pools contained in one lane of the sequencing run", "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "Number of the lane", "type": "integer"}, "libraryPool": {"$ref": "#/definitions/LibraryPoolCompact"}, "libraryPoolName": {"description": "Name of library pool the lane contains", "type": "string"}, "libraryPoolUrn": {"description": "URN of library pool the lane contains", "type": "string"}, "laneLibraries": {"description": "Libraries and related information the lane contains", "type": "array", "items": {"$ref": "#/definitions/LaneLibraryResponse"}}}}, "LaneLibrary": {"description": "Defines the API model that represents the sample content in the lane", "type": "object", "properties": {"sampleName": {"description": "Sample name. This field is case-insensitive.", "maxLength": 100, "minLength": 0, "type": "string"}, "sampleUrn": {"description": "Sample URN", "maxLength": 255, "minLength": 0, "type": "string"}, "projectName": {"description": "Name of the project the sample belongs to.\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "maxLength": 255, "minLength": 0, "type": "string"}, "libraryName": {"description": "Library name. This field is case-insensitive.", "maxLength": 140, "minLength": 0, "type": "string"}, "libraryUrn": {"description": "Library URN", "maxLength": 255, "minLength": 0, "type": "string"}, "adapterSequenceRead1": {"description": "Adapter sequence read 1", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Adapter sequence read 2", "maxLength": 128, "minLength": 0, "type": "string"}, "index1Sequence": {"description": "Index 1 sequence of the library", "maxLength": 10, "minLength": 0, "type": "string"}, "index2Sequence": {"description": "Index 2 sequence of the library", "maxLength": 10, "minLength": 0, "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using an index adapter kit with fixed index position", "maxLength": 8, "minLength": 0, "type": "string"}, "index1Name": {"description": "Name of index 1 sequence", "maxLength": 100, "minLength": 0, "type": "string"}, "index2Name": {"description": "Name of index 2 sequence", "maxLength": 100, "minLength": 0, "type": "string"}, "libraryPrepKitUrn": {"description": "URN of library prep kit", "maxLength": 255, "minLength": 0, "type": "string"}, "indexAdapterKitUrn": {"description": "URN of index adapter kit", "maxLength": 255, "minLength": 0, "type": "string"}}}, "LaneLibraryResponse": {"description": "Defines the compact response model for library content in the lane", "type": "object", "properties": {"sampleName": {"description": "Sample name", "type": "string"}, "sampleUrn": {"description": "Sample URN", "type": "string"}, "dataAggregationGroup": {"description": "Data aggregation group of the sample", "type": "string"}, "projectName": {"description": "Project Name of the sample\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "type": "string"}, "libraryName": {"description": "Library name", "type": "string"}, "libraryUrn": {"description": "Library URN", "type": "string"}, "adapterSequenceRead1": {"description": "Read 1 adapter sequence", "type": "string"}, "adapterSequenceRead2": {"description": "Read 2 adapter sequence", "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using index adapter kit with fixed index position", "type": "string"}, "index1Sequence": {"description": "Index 1 sequence  of the library", "type": "string"}, "index2Sequence": {"description": "Index 2 sequence of the library", "type": "string"}, "index1Name": {"description": "Name of index 1 sequence", "type": "string"}, "index2Name": {"description": "Name of index 2 sequence", "type": "string"}, "libraryPrepKitName": {"description": "Name of library prep kit", "type": "string"}, "libraryPrepKitUrn": {"description": "URN of library prep kit", "type": "string"}, "indexAdapterKitName": {"description": "Name of index adapter kit", "type": "string"}, "indexAdapterKitUrn": {"description": "URN of index adapter kit", "type": "string"}, "adapterBehavior": {"description": "Adapter behavior for this entry", "type": "string"}, "overrideCycles": {"description": "Override cycles for this entry", "type": "string"}, "library": {"$ref": "#/definitions/LibraryCompact"}}}, "LanePrepKitInfo": {"description": "Library prep kit and index adapter kit information for each lane", "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "Optional. If not provided, it implies all lanes have the same kits. Provided if per-lane content info was provided by user", "type": "integer"}, "kits": {"description": "Library prep kit and index adapter kit names", "uniqueItems": true, "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitAndIndexAdapterKitName"}}}}, "LaneSequencingStats": {"description": "Defines the data transfer object (DTO) for creating LaneSequencingStats", "required": ["laneNumber"], "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "LaneNumber of the LaneSequencingStats", "type": "integer"}, "density": {"format": "float", "description": "Density of the LaneSequencingStats", "type": "number"}, "percentPf": {"format": "float", "description": "PercentPf of the LaneSequencingStats", "type": "number"}, "phasing": {"format": "float", "description": "Phasing of the LaneSequencingStats", "type": "number"}, "prePhasing": {"format": "float", "description": "PrePhasing of the LaneSequencingStats", "type": "number"}, "reads": {"format": "int64", "description": "Reads of the LaneSequencingStats", "type": "integer"}, "readsPf": {"format": "int64", "description": "ReadsPf of the LaneSequencingStats", "type": "integer"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the LaneSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the LaneSequencingStats", "type": "number"}, "yield": {"format": "float", "description": "Yield of the LaneSequencingStats", "type": "number"}, "maxCycleCalled": {"format": "int32", "description": "MaxCycleCalled of the LaneSequencingStats", "type": "integer"}, "percentAligned": {"format": "float", "description": "PercentAligned of the LaneSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the LaneSequencingStats", "type": "number"}, "errorRate35": {"format": "float", "description": "ErrorRate35 of the LaneSequencingStats", "type": "number"}, "errorRate50": {"format": "float", "description": "ErrorRate50 of the LaneSequencingStats", "type": "number"}, "errorRate75": {"format": "float", "description": "ErrorRate75 of the LaneSequencingStats", "type": "number"}, "errorRate100": {"format": "float", "description": "ErrorRate100 of the LaneSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the LaneSequencingStats", "type": "number"}, "projectedYieldInGbp": {"format": "float", "description": "ProjectedYieldInGbp of the LaneSequencingStats", "type": "number"}, "maxProjectedYieldInGbp": {"format": "float", "description": "MaxProjectedYieldInGbp of the LaneSequencingStats", "type": "number"}, "phasingSlope": {"format": "float", "description": "PhasingSlope of the LaneSequencingStats", "type": "number"}, "phasingOffset": {"format": "float", "description": "PhasingOffset of the LaneSequencingStats", "type": "number"}, "prePhasingSlope": {"format": "float", "description": "PrePhasingSlope of the LaneSequencingStats", "type": "number"}, "prePhasingOffset": {"format": "float", "description": "PrePhasingOffset of the LaneSequencingStats", "type": "number"}}}, "LaneSequencingStatsResponse": {"description": "Response of LaneSequencingStats", "type": "object", "properties": {"laneNumber": {"format": "int32", "description": "LaneNumber of the LaneSequencingStats", "type": "integer"}, "density": {"format": "float", "description": "Density of the LaneSequencingStats", "type": "number"}, "percentPf": {"format": "float", "description": "PercentPf of the LaneSequencingStats", "type": "number"}, "phasing": {"format": "float", "description": "Phasing of the LaneSequencingStats", "type": "number"}, "prePhasing": {"format": "float", "description": "PrePhasing of the LaneSequencingStats", "type": "number"}, "reads": {"format": "int64", "description": "Reads of the LaneSequencingStats", "type": "integer"}, "readsPf": {"format": "int64", "description": "ReadsPf of the LaneSequencingStats", "type": "integer"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the LaneSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the LaneSequencingStats", "type": "number"}, "yield": {"format": "float", "description": "Yield of the LaneSequencingStats", "type": "number"}, "maxCycleCalled": {"format": "int32", "description": "MaxCycleCalled of the LaneSequencingStats", "type": "integer"}, "percentAligned": {"format": "float", "description": "PercentAligned of the LaneSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the LaneSequencingStats", "type": "number"}, "errorRate35": {"format": "float", "description": "ErrorRate35 of the LaneSequencingStats", "type": "number"}, "errorRate50": {"format": "float", "description": "ErrorRate50 of the LaneSequencingStats", "type": "number"}, "errorRate75": {"format": "float", "description": "ErrorRate75 of the LaneSequencingStats", "type": "number"}, "errorRate100": {"format": "float", "description": "ErrorRate100 of the LaneSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the LaneSequencingStats", "type": "number"}, "projectedYieldInGbp": {"format": "float", "description": "ProjectedYieldInGbp of the LaneSequencingStats", "type": "number"}, "maxProjectedYieldInGbp": {"format": "float", "description": "MaxProjectedYieldInGbp of the LaneSequencingStats", "type": "number"}, "phasingSlope": {"format": "float", "description": "PhasingSlope of the LaneSequencingStats", "type": "number"}, "phasingOffset": {"format": "float", "description": "PhasingOffset of the LaneSequencingStats", "type": "number"}, "prePhasingSlope": {"format": "float", "description": "PrePhasingSlope of the LaneSequencingStats", "type": "number"}, "prePhasingOffset": {"format": "float", "description": "PrePhasingOffset of the LaneSequencingStats", "type": "number"}}}, "Library": {"description": "Data contract for the full library", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the library", "type": "string"}, "description": {"description": "Description of the library", "type": "string"}, "status": {"description": "Status of the library", "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using index adapter kit with fixed index position", "type": "string"}, "index1Name": {"description": "Index 1 name", "type": "string"}, "index2Name": {"description": "Index 2 name", "type": "string"}, "index1Sequence": {"description": "Index 1 sequence used for this library", "type": "string"}, "index2Sequence": {"description": "Index 2 sequence used for this library", "type": "string"}, "adapterSequenceRead1": {"description": "Adapter sequence read 1", "type": "string"}, "adapterSequenceRead2": {"description": "Adapter sequence read 2", "type": "string"}, "sample": {"$ref": "#/definitions/SampleCompact"}, "libraryPrepKit": {"$ref": "#/definitions/LibraryPrepKitCompact"}, "indexAdapterKit": {"$ref": "#/definitions/IndexAdapterKitCompact"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryCompact": {"description": "Data contract for library (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the library", "type": "string"}, "description": {"description": "Description of the library", "type": "string"}, "status": {"description": "Status of the library", "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using index adapter kit with fixed index position", "type": "string"}, "index1Name": {"description": "Index 1 name", "type": "string"}, "index2Name": {"description": "Index 2 name", "type": "string"}, "index1Sequence": {"description": "Index 1 sequence used for this library", "type": "string"}, "index2Sequence": {"description": "Index 2 sequence used for this library", "type": "string"}, "adapterSequenceRead1": {"description": "Adapter sequence read 1", "type": "string"}, "adapterSequenceRead2": {"description": "Adapter sequence read 2", "type": "string"}, "sample": {"$ref": "#/definitions/SampleCompact"}, "libraryPrepKit": {"$ref": "#/definitions/LibraryPrepKitCompact"}, "indexAdapterKit": {"$ref": "#/definitions/IndexAdapterKitCompact"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryCompactLibrarySortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/LibraryCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "LibraryPool": {"description": "Data contract for library pool", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "containedLibraries": {"description": "List of libraries contained in the pool", "type": "array", "items": {"$ref": "#/definitions/LibraryCompact"}}, "name": {"description": "Name of the library pool", "type": "string"}, "description": {"description": "Description of the library pool", "type": "string"}, "status": {"description": "Status of the library pool", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryPoolCompact": {"description": "Defines the data contract for a library pool", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the library pool", "type": "string"}, "description": {"description": "Description of the library pool", "type": "string"}, "status": {"description": "Status of the library pool", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryPoolCompactLibraryPoolSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/LibraryPoolCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "LibraryPrepKit": {"description": "Data contract for the library prep kit", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "canUpdate": {"description": "Indicate whether the LibraryPrepKit can be updated currently.", "type": "boolean"}, "displayName": {"description": "User-friendly name of the library prep kit", "type": "string"}, "name": {"description": "Name of the LibraryPrepKit", "type": "string"}, "organization": {"description": "Organization from which the kit originated, e.g. illumina", "type": "string"}, "isIllumina": {"description": "Indicate whether the current library prep kit is from illumina or not.", "type": "boolean"}, "description": {"description": "Description of the library prep kit", "type": "string"}, "allowedReadTypes": {"description": "Indicates the types of reads that are allowed for this library prep kit", "type": "array", "items": {"type": "string"}}, "defaultRead1Length": {"format": "int32", "description": "Default read 1 length", "type": "integer"}, "defaultRead2Length": {"format": "int32", "description": "Default read 2 length", "type": "integer"}, "isApplicationSpecific": {"description": "Whether the library prep kit is application specific", "type": "boolean"}, "settings": {"$ref": "#/definitions/LibraryPrepKitSettingsResponse"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "libraryPrepKitCompatibleIndexAdapterKits": {"description": "Array of compatible index adapter kits for the library prep kit", "type": "array", "items": {"$ref": "#/definitions/IndexAdapterKitCompact"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryPrepKitAndIndexAdapterKitName": {"description": "Library prep kit and index adapter kit name", "type": "object", "properties": {"libraryPrepKitName": {"description": "Name of LibraryPrepKit", "type": "string"}, "indexAdapterKitName": {"description": "Name of IndexAdapterKit", "type": "string"}}}, "LibraryPrepKitCompact": {"description": "Data contract for library prep kit (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "displayName": {"description": "User-friendly name of the library prep kit", "type": "string"}, "name": {"description": "Name of the LibraryPrepKit", "type": "string"}, "organization": {"description": "Organization from which the kit originated, e.g. illumina", "type": "string"}, "isIllumina": {"description": "Indicate whether the current library prep kit is from illumina or not.", "type": "boolean"}, "description": {"description": "Description of the library prep kit", "type": "string"}, "allowedReadTypes": {"description": "Indicates the types of reads that are allowed for this library prep kit", "type": "array", "items": {"type": "string"}}, "defaultRead1Length": {"format": "int32", "description": "Default read 1 length", "type": "integer"}, "defaultRead2Length": {"format": "int32", "description": "Default read 2 length", "type": "integer"}, "isApplicationSpecific": {"description": "Whether the library prep kit is application specific", "type": "boolean"}, "settings": {"$ref": "#/definitions/LibraryPrepKitSettingsResponse"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "LibraryPrepKitCompactLibraryPrepKitSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/LibraryPrepKitCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "DisplayName", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "LibraryPrepKitSettings": {"description": "Settings for a library prep kit", "type": "object", "properties": {"defaultReadType": {"description": "Default read type value for library prep kit", "enum": ["Single", "Paired"], "type": "string"}}}, "LibraryPrepKitSettingsResponse": {"description": "Settings for a library prep kit", "type": "object", "properties": {"defaultReadType": {"description": "Default read type value for library prep kit", "type": "string"}}}, "NoContentResult": {"type": "object", "properties": {"statusCode": {"format": "int32", "type": "integer"}}}, "ParsedSequencingRun": {"description": "The parsed sequencing run", "type": "object", "properties": {"inputContainerIdentifier": {"description": "The input container identifier extracted from the sample sheet", "type": "string"}, "runConfiguration": {"$ref": "#/definitions/UpdateSequencingRunConfigurationRequest"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfigurations": {"description": "Run analysis configurations", "type": "array", "items": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}, "runPrepKitInfo": {"$ref": "#/definitions/SequencingRunPrepKitInfo"}}}, "ParseSampleSheetRequest": {"description": "Request to parse a sample sheet to sequencing run", "type": "object", "properties": {"include": {"description": "Include flags to specify what is included in the response", "type": "array", "items": {"description": "Include flags for parse sample sheet request", "enum": ["PrepKitInfo"], "type": "string"}}, "sampleSheetContent": {"description": "The csv string of the sample sheet", "maxLength": 10485760, "minLength": 0, "type": "string"}, "resolvePrepKits": {"description": "If true, resolve prep kit information from sample sheet if possible", "type": "boolean"}, "resolvePrepKitsByName": {"description": "If true, attempt to resolve prep kits by name if they cannot be resolved using URN column", "type": "boolean"}, "resolveIndexSequenceInfo": {"description": "If true, attempt to resolve index sequence info like Index Name and Position based on the index sequences", "type": "boolean"}, "enableWarningsForMissingCloudSections": {"description": "Enable warnings if cloud sections are not provided", "type": "boolean"}}}, "ParseSampleSheetResponse": {"description": "Request to generate a sample sheet", "type": "object", "properties": {"sequencingRun": {"$ref": "#/definitions/ParsedSequencingRun"}, "warnings": {"description": "The warnings during parsing", "type": "array", "items": {"$ref": "#/definitions/SampleSheetParsingWarning"}}}}, "ReadSequencingStats": {"description": "Defines the data transfer object (DTO) for creating ReadSequencingStats", "required": ["readNumber"], "type": "object", "properties": {"readNumber": {"format": "int32", "description": "ReadNumber of the ReadSequencingStats", "type": "integer"}, "isIndexed": {"description": "IsIndexed of the ReadSequencingStats", "type": "boolean"}, "totalCycles": {"format": "int32", "description": "TotalCycles of the ReadSequencingStats", "type": "integer"}, "yieldTotal": {"format": "float", "description": "YieldTotal of the ReadSequencingStats", "type": "number"}, "projectedTotalYield": {"format": "float", "description": "ProjectedTotalYield of the ReadSequencingStats", "type": "number"}, "percentAligned": {"format": "float", "description": "PercentAligned of the ReadSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the ReadSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the ReadSequencingStats", "type": "number"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the ReadSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the ReadSequencingStats", "type": "number"}}}, "ReadSequencingStatsResponse": {"description": "Response of ReadSequencingStats", "type": "object", "properties": {"readNumber": {"format": "int32", "description": "ReadNumber of the ReadSequencingStats", "type": "integer"}, "isIndexed": {"description": "IsIndexed of the ReadSequencingStats", "type": "boolean"}, "totalCycles": {"format": "int32", "description": "TotalCycles of the ReadSequencingStats", "type": "integer"}, "yieldTotal": {"format": "float", "description": "YieldTotal of the ReadSequencingStats", "type": "number"}, "projectedTotalYield": {"format": "float", "description": "ProjectedTotalYield of the ReadSequencingStats", "type": "number"}, "percentAligned": {"format": "float", "description": "PercentAligned of the ReadSequencingStats", "type": "number"}, "errorRate": {"format": "float", "description": "ErrorRate of the ReadSequencingStats", "type": "number"}, "intensityCycle1": {"format": "float", "description": "IntensityCycle1 of the ReadSequencingStats", "type": "number"}, "percentGtQ30": {"format": "float", "description": "PercentGtQ30 of the ReadSequencingStats", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "description": "PercentGtQ30Last10Cycles of the ReadSequencingStats", "type": "number"}}}, "RegisterSampleDataRequest": {"description": "Request to register data associated with the given sample", "type": "object", "properties": {"skipCopyFilesToProjectVolume": {"description": "Optional. If true, skip copying files to the project volume if the ProjectName matches a known project context", "type": "boolean"}, "totalSampleCount": {"format": "int32", "description": "Total number of samples that are being registered as part of the same ExternalAnalysisRunId", "type": "integer"}, "totalDatasetCount": {"format": "int32", "description": "Total number of datasets that are being registered as part of the same ExternalAnalysisRunId", "type": "integer"}, "sampleId": {"description": "Optional Sample Id of the sample (if name based matching is not being used)", "maxLength": 50, "minLength": 0, "type": "string"}, "sampleName": {"description": "Optional name of the sample (when identifying sample by Name+ProjectName)", "maxLength": 100, "minLength": 0, "type": "string"}, "projectName": {"description": "ProjectName of the sample (when identifying sample by Name+ProjectName)", "maxLength": 255, "minLength": 0, "type": "string"}, "externalSampleId": {"description": "Optional external ID to associate with the sample (only when a new sample is being created)", "maxLength": 255, "minLength": 0, "type": "string"}, "externalProjectId": {"description": "Optional external ID for the project associated with the sample (only when a new sample is being created)", "maxLength": 255, "minLength": 0, "type": "string"}, "externalAnalysisRunId": {"description": "Optional external Id for the analysis run", "maxLength": 255, "minLength": 0, "type": "string"}, "analysisDatasets": {"description": "One or more analysis datasets that should be associated with the analysis", "type": "array", "items": {"$ref": "#/definitions/CreateAnalysisDatasetParameters"}}}}, "RenderAnalysisVersionDefinitionRequest": {"description": "Request to render an analysis version definition", "required": ["context"], "type": "object", "properties": {"context": {"description": "Render context", "enum": ["Initial", "FieldChanged", "Edited"], "type": "string"}, "fieldId": {"description": "The id of the field changed by user.", "maxLength": 255, "minLength": 0, "type": "string"}, "runConfiguration": {"$ref": "#/definitions/CreateSequencingRunConfigurationRequest"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfiguration": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}, "currentAnalysisSettings": {"description": "Current analysis version definition settings"}, "currentAnalysisSampleSettings": {"description": "Current analysis version definition sample settings"}}}, "RenderAnalysisVersionDefinitionResponse": {"description": "Response of rendering an analysis version definition", "type": "object", "properties": {"validationErrors": {"description": "List of rendered message with errors", "type": "array", "items": {"$ref": "#/definitions/RenderMessage"}}, "validationWarnings": {"description": "List of rendered message with warnings", "type": "array", "items": {"$ref": "#/definitions/RenderMessage"}}, "analysisVersionDefinition": {"$ref": "#/definitions/AnalysisVersionDefinitionCompact"}, "runAnalysisConfiguration": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}, "changedSettingIds": {"description": "List of changed ids of analysis version definition settings", "type": "array", "items": {"type": "string"}}, "changedSettingValueIds": {"description": "List of changed ids of run analysis configuration setting values", "type": "array", "items": {"type": "string"}}, "changedSampleSettingIds": {"description": "List of changed ids of analysis version definition sample settings", "type": "array", "items": {"type": "string"}}, "changedSampleSettingValueIds": {"description": "Array of samples with list of changed sample setting value ids"}}}, "RenderMessage": {"description": "The render message", "type": "object", "properties": {"fieldId": {"description": "Field Id of the message", "type": "string"}, "sampleId": {"description": "Sample Id of the message", "type": "string"}, "message": {"description": "The message content", "type": "string"}}}, "ReplacePlannedRunRequest": {"description": "Request to replace a planned sequencing run", "required": ["runConfiguration"], "type": "object", "properties": {"runConfiguration": {"$ref": "#/definitions/CreateSequencingRunConfigurationRequest"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfigurations": {"description": "Run analysis configurations", "type": "array", "items": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}, "isFavorite": {"description": "Set the run as favorite runs", "type": "boolean"}}}, "ReplaceSequencingStatsRequest": {"description": "Request to update sequencing stats of a sequencing run", "required": ["cycleNumber"], "type": "object", "properties": {"cycleNumber": {"format": "int32", "type": "integer"}, "runSequencingStats": {"$ref": "#/definitions/RunSequencingStats"}, "laneSequencingStats": {"description": "List of LaneSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/LaneSequencingStats"}}, "readSequencingStats": {"description": "List of ReadSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/ReadSequencingStats"}}, "laneByReadSequencingStats": {"description": "List of LaneByReadSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/LaneByReadSequencingStats"}}}}, "RequeueSequencingRunAnalysisRequest": {"description": "Request for requeue sequencing run analysis", "required": ["runName"], "type": "object", "properties": {"runName": {"description": "Name of the run provided by the user", "maxLength": 255, "minLength": 0, "type": "string"}, "runContents": {"$ref": "#/definitions/UpdateSequencingRunContentsRequest"}, "runAnalysisConfigurations": {"description": "Requeue run analysis configurations", "type": "array", "items": {"$ref": "#/definitions/CreateSequencingRunAnalysisConfigurationRequest"}}, "requeueReason": {"description": "Reason for requeue of a sequencing run", "maxLength": 255, "minLength": 0, "type": "string"}, "replaceExistingRunRequeue": {"description": "Indicates replacement of existing run requeue", "type": "boolean"}}}, "RunDirectUploadInfoRequest": {"description": "Request to provide direct upload information associated with one or more files as part of a run upload", "type": "object", "properties": {"files": {"description": "Direct upload information for one or more files", "type": "array", "items": {"$ref": "#/definitions/DirectUploadFileInfo"}}}}, "RunSequencingStats": {"description": "Defines the data transfer object (DTO) for creating RunSequencingStats", "required": ["numCyclesIndex1", "numCyclesIndex2", "numCyclesRead1", "numCyclesRead2", "numLanes", "numReads", "numSurfaces", "numSwathsPerLane", "numTilesPerSwath"], "type": "object", "properties": {"numCyclesIndex1": {"format": "int32", "type": "integer"}, "numCyclesIndex2": {"format": "int32", "type": "integer"}, "numCyclesRead1": {"format": "int32", "type": "integer"}, "numCyclesRead2": {"format": "int32", "type": "integer"}, "numLanes": {"format": "int32", "type": "integer"}, "numReads": {"format": "int32", "type": "integer"}, "numSurfaces": {"format": "int32", "type": "integer"}, "numSwathsPerLane": {"format": "int32", "type": "integer"}, "numTilesPerSwath": {"format": "int32", "type": "integer"}, "errorRate": {"format": "float", "type": "number"}, "errorRateR1": {"format": "float", "type": "number"}, "errorRateR2": {"format": "float", "type": "number"}, "intensityCycle1": {"format": "float", "type": "number"}, "isIndexed": {"type": "boolean"}, "maxCycleCalled": {"format": "int32", "type": "integer"}, "maxCycleExtracted": {"format": "int32", "type": "integer"}, "maxCycleScored": {"format": "int32", "type": "integer"}, "minCycleCalled": {"format": "int32", "type": "integer"}, "minCycleExtracted": {"format": "int32", "type": "integer"}, "minCycleScored": {"format": "int32", "type": "integer"}, "nonIndexedErrorRate": {"format": "float", "type": "number"}, "nonIndexedIntensityCycle1": {"format": "float", "type": "number"}, "nonIndexedPercentAligned": {"format": "float", "type": "number"}, "nonIndexedPercentGtQ30": {"format": "float", "type": "number"}, "nonIndexedProjectedTotalYield": {"format": "float", "type": "number"}, "nonIndexedYieldTotal": {"format": "float", "type": "number"}, "percentAligned": {"format": "float", "type": "number"}, "percentGtQ30": {"format": "float", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "type": "number"}, "percentGtQ30R1": {"format": "float", "type": "number"}, "percentGtQ30R2": {"format": "float", "type": "number"}, "percentPf": {"format": "float", "type": "number"}, "percentResynthesis": {"format": "float", "type": "number"}, "phasingR1": {"format": "float", "type": "number"}, "phasingR2": {"format": "float", "type": "number"}, "prePhasingR1": {"format": "float", "type": "number"}, "prePhasingR2": {"format": "float", "type": "number"}, "projectedTotalYield": {"format": "float", "type": "number"}, "readsPfTotal": {"format": "int64", "type": "integer"}, "readsTotal": {"format": "int64", "type": "integer"}, "yieldTotal": {"format": "float", "type": "number"}, "clusters": {"format": "int64", "type": "integer"}, "clustersPf": {"format": "int64", "type": "integer"}, "clusterDensity": {"format": "float", "type": "number"}, "occupancy": {"format": "float", "type": "number"}, "percentLoadingConcentration": {"format": "float", "type": "number"}}}, "RunSequencingStatsResponse": {"description": "Response of RunSequencingStats", "type": "object", "properties": {"errorRate": {"format": "float", "type": "number"}, "errorRateR1": {"format": "float", "type": "number"}, "errorRateR2": {"format": "float", "type": "number"}, "intensityCycle1": {"format": "float", "type": "number"}, "isIndexed": {"type": "boolean"}, "maxCycleCalled": {"format": "int32", "type": "integer"}, "maxCycleExtracted": {"format": "int32", "type": "integer"}, "maxCycleScored": {"format": "int32", "type": "integer"}, "minCycleCalled": {"format": "int32", "type": "integer"}, "minCycleExtracted": {"format": "int32", "type": "integer"}, "minCycleScored": {"format": "int32", "type": "integer"}, "nonIndexedErrorRate": {"format": "float", "type": "number"}, "nonIndexedIntensityCycle1": {"format": "float", "type": "number"}, "nonIndexedPercentAligned": {"format": "float", "type": "number"}, "nonIndexedPercentGtQ30": {"format": "float", "type": "number"}, "nonIndexedProjectedTotalYield": {"format": "float", "type": "number"}, "nonIndexedYieldTotal": {"format": "float", "type": "number"}, "numCyclesIndex1": {"format": "int32", "type": "integer"}, "numCyclesIndex2": {"format": "int32", "type": "integer"}, "numCyclesRead1": {"format": "int32", "type": "integer"}, "numCyclesRead2": {"format": "int32", "type": "integer"}, "numLanes": {"format": "int32", "type": "integer"}, "numReads": {"format": "int32", "type": "integer"}, "numSurfaces": {"format": "int32", "type": "integer"}, "numSwathsPerLane": {"format": "int32", "type": "integer"}, "numTilesPerSwath": {"format": "int32", "type": "integer"}, "percentAligned": {"format": "float", "type": "number"}, "percentGtQ30": {"format": "float", "type": "number"}, "percentGtQ30Last10Cycles": {"format": "float", "type": "number"}, "percentGtQ30R1": {"format": "float", "type": "number"}, "percentGtQ30R2": {"format": "float", "type": "number"}, "percentPf": {"format": "float", "type": "number"}, "percentResynthesis": {"format": "float", "type": "number"}, "phasingR1": {"format": "float", "type": "number"}, "phasingR2": {"format": "float", "type": "number"}, "prePhasingR1": {"format": "float", "type": "number"}, "prePhasingR2": {"format": "float", "type": "number"}, "projectedTotalYield": {"format": "float", "type": "number"}, "readsPfTotal": {"format": "int64", "type": "integer"}, "readsTotal": {"format": "int64", "type": "integer"}, "yieldTotal": {"format": "float", "type": "number"}, "clusters": {"format": "int64", "type": "integer"}, "clustersPf": {"format": "int64", "type": "integer"}, "clusterDensity": {"format": "float", "type": "number"}, "occupancy": {"format": "float", "type": "number"}, "percentLoadingConcentration": {"format": "float", "type": "number"}}}, "RunSetupValidation": {"description": "Data transfer object (DTO) for the Settings.RunSetupValidation field of a validated analysis version definition", "type": "object", "properties": {"requireUniqueSampleIdsPerLane": {"description": "If true, the workflow requires unique sampleId values in each lane and does not support repeated sampleIds\r\nin a given lane with different index sequences", "type": "boolean"}, "enableCustomPrepKits": {"description": "If true the workflow allows custom prep kits. If false, the workflow requires that all prep kits used are in\r\nthe list of compatible prep kits defined by the analysis.", "type": "boolean"}, "read1LengthMin": {"format": "int32", "description": "Minimum value for read1 length", "type": "integer"}, "read1LengthMax": {"format": "int32", "description": "Maximum value for read1 length", "type": "integer"}, "read2LengthMin": {"format": "int32", "description": "Minimum value for read2 length", "type": "integer"}, "read2LengthMax": {"format": "int32", "description": "Maximum value for read2 length", "type": "integer"}, "allowedIndexStrategies": {"description": "Selected index strategy must match one of these values. Provided run contents must match.", "type": "array", "items": {"description": "Defines the index strategy for an index adapter kit", "enum": ["NoIndex", "Single", "Dual"], "type": "string"}}, "allowedReadTypes": {"description": "Read type selection must match one of these values.", "type": "array", "items": {"description": "Defines the read type used for the sequencing run. \r\nIllumina offers two read types: single-read sequencing and paired-end sequencing", "enum": ["Single", "Paired"], "type": "string"}}, "allowDeviations": {"description": "If true, the UI should allow deviations from default read length specified in prep kit,\r\nindex strategies and read types (does not apply to unique sample IDs per lane or custom kits)", "type": "boolean"}, "deviationWarningMessage": {"description": "Desired warning message when deviations are detected", "type": "string"}, "customPrepKitWarningMessage": {"description": "Desired warning message when using a custom kit (not part of the compatible kits)", "type": "string"}, "skipValidateIndexCyclesWithIndexSequenceLengths": {"description": "If true, skip index sequence length validation against run configured index cycles", "type": "boolean"}}}, "RuntVerificationResult": {"type": "object", "properties": {"overallStatus": {"type": "boolean"}, "runValid": {"$ref": "#/definitions/ComponentVerificationResult"}, "canActivateDRAGEN": {"$ref": "#/definitions/ComponentVerificationResult"}, "diskSpaceAvailable": {"$ref": "#/definitions/ComponentVerificationResult"}, "externalConnectivity": {"$ref": "#/definitions/ComponentVerificationResult"}}}, "Sample": {"description": "Data contract for the full sample", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "analysisDatasets": {"description": "Analysis datasets of the sample", "type": "array", "items": {"$ref": "#/definitions/AnalysisDatasetCompact"}}, "name": {"description": "Name of the sample", "type": "string"}, "description": {"description": "Description of the sample", "type": "string"}, "status": {"description": "Status of the sample", "type": "string"}, "labStatus": {"description": "User-customizable value indicating the status of the sample", "type": "string"}, "dataAggregationGroup": {"description": "Data aggregation group", "type": "string"}, "projectName": {"description": "Project Name\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "type": "string"}, "externalId": {"description": "Optional external ID associated with the sample", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SampleCompact": {"description": "Data contract for sample (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the sample", "type": "string"}, "description": {"description": "Description of the sample", "type": "string"}, "status": {"description": "Status of the sample", "type": "string"}, "labStatus": {"description": "User-customizable value indicating the status of the sample", "type": "string"}, "dataAggregationGroup": {"description": "Data aggregation group", "type": "string"}, "projectName": {"description": "Project Name\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "type": "string"}, "externalId": {"description": "Optional external ID associated with the sample", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SampleCompactSampleSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/SampleCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "SamplesDeliveryRequest": {"description": "Request to deliver samples", "required": ["sampleDelivery"], "type": "object", "properties": {"sampleDelivery": {"description": "Delivery payload of samples"}}}, "SamplesDeliveryResponse": {"description": "Response of sample delivery", "type": "object", "properties": {"samplesDelivered": {"description": "The sample payload is delivered", "type": "boolean"}}}, "SampleSettingEntry": {"description": "User provided per-sample settings for analysis configuration", "required": ["sampleId", "settings"], "type": "object", "properties": {"sampleId": {"description": "SampleId for the setting entry", "type": "string"}, "settings": {"description": "User-provided analysis settings for this sample"}}}, "SampleSheet": {"description": "Data contract for SampleSheet", "type": "object", "properties": {"sampleSheetContent": {"description": "Sample sheet string in csv format", "type": "string"}, "fileReferences": {"description": "File references", "type": "array", "items": {"$ref": "#/definitions/FileReferenceCompact"}}, "auxiliaryFileReferences": {"description": "Auxiliary file references", "type": "array", "items": {"$ref": "#/definitions/AuxiliaryFileReferenceCompact"}}}}, "SampleSheetParsingWarning": {"description": "Warning of sample sheet parsing", "type": "object", "properties": {"section": {"description": "Section name", "type": "string"}, "field": {"description": "Field name", "type": "string"}, "message": {"description": "error message", "type": "string"}, "severity": {"description": "Severity of the message", "type": "string"}}}, "SequencingAnalysisRun": {"description": "Data contract for the full SequencingAnalysisRun", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "analysisDatasets": {"description": "The optional list of analysis datasets that are associated with this analysis run", "type": "array", "items": {"$ref": "#/definitions/AnalysisDatasetCompact"}}, "analysisRunResults": {"$ref": "#/definitions/SequencingAnalysisRunResults"}, "name": {"description": "Name of the sequencing analysis run", "type": "string"}, "status": {"description": "Status of the sequencing analysis run", "type": "string"}, "workflowRunId": {"description": "Id of the associated WorkflowRun of the sequencing analysis run on WES", "type": "string"}, "workflowVersionName": {"description": "The name of the associated WorkflowVersion of the sequencing analysis run on WES", "type": "string"}, "workflowVersionId": {"description": "The id of the associated WorkflowVersion of the sequencing analysis run on WES", "type": "string"}, "analysisDataFolderUrn": {"description": "Urn of AnalysisDataFolder of the sequencing analysis run on GDS", "type": "string"}, "analysisDataVolumeUrn": {"description": "Urn of AnalysisDataVolume of the sequencing analysis run on GDS", "type": "string"}, "analysisDataFolderVolumePath": {"description": "Combination of GDS volume and path of AnalysisDataFolder of the sequencing analysis run", "type": "string"}, "externalId": {"description": "External ID of the sequencing analysis run", "type": "string"}, "sequencingRun": {"$ref": "#/definitions/SequencingRunCompact"}, "needsAttention": {"description": "Indicates with value 'true' if the analysis run needs attention", "type": "boolean"}, "needsAttentionReason": {"description": "Detail reason why the analysis run needs attention", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingAnalysisRunCompact": {"description": "Data contract for sequencing analysis run (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "name": {"description": "Name of the sequencing analysis run", "type": "string"}, "status": {"description": "Status of the sequencing analysis run", "type": "string"}, "workflowRunId": {"description": "Id of the associated WorkflowRun of the sequencing analysis run on WES", "type": "string"}, "workflowVersionName": {"description": "The name of the associated WorkflowVersion of the sequencing analysis run on WES", "type": "string"}, "workflowVersionId": {"description": "The id of the associated WorkflowVersion of the sequencing analysis run on WES", "type": "string"}, "analysisDataFolderUrn": {"description": "Urn of AnalysisDataFolder of the sequencing analysis run on GDS", "type": "string"}, "analysisDataVolumeUrn": {"description": "Urn of AnalysisDataVolume of the sequencing analysis run on GDS", "type": "string"}, "analysisDataFolderVolumePath": {"description": "Combination of GDS volume and path of AnalysisDataFolder of the sequencing analysis run", "type": "string"}, "externalId": {"description": "External ID of the sequencing analysis run", "type": "string"}, "sequencingRun": {"$ref": "#/definitions/SequencingRunCompact"}, "needsAttention": {"description": "Indicates with value 'true' if the analysis run needs attention", "type": "boolean"}, "needsAttentionReason": {"description": "Detail reason why the analysis run needs attention", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingAnalysisRunCompactSequencingAnalysisRunSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/SequencingAnalysisRunCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Status", "TimeCreated", "TimeModified"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "SequencingAnalysisRunResults": {"description": "Data contract for analysis run results", "type": "object", "properties": {"demuxingResults": {"description": "Demuxing results of the analysis run"}, "analysisResults": {"description": "Analysis results of the analysis run"}, "launchParametersSnapshot": {"description": "Snapshot of the analysis launch parameters"}, "sampleMapping": {"description": "Sample mapping of the analysis run"}, "sampleSheetSnapshot": {"description": "Snapshot of the sample sheet used in the analysis", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingRun": {"description": "Data contract for the full sequencing run", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "runOrigin": {"description": "Origin of the run data (Instrument, InstrumentPostRunUpload, Simulated, etc.)", "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the run", "type": "string"}, "instrumentRunId": {"description": "Run ID typically generated by instrument (not guaranteed to be unique for either tenant or system)", "type": "string"}, "externalRunId": {"description": "ID of the sequencing run in another system", "type": "string"}, "runName": {"description": "User-supplied name of the experiment/run (not guaranteed to be unique for either tenant or system)", "type": "string"}, "description": {"description": "User-supplied description of the run", "type": "string"}, "isPlanned": {"description": "Indicates with value 'true' when the run is in the planning stage (including while locked and assigned to an instrument)", "type": "boolean"}, "aggregateRunStatus": {"description": "Overall status of the run across all stages, including the status of post-upload cloud processing", "type": "string"}, "verificationStatus": {"description": "Status of the verification stage", "type": "string"}, "verificationStatusSummary": {"description": "Summary of the current status of the run", "type": "string"}, "verificationCompleted": {"description": "Indicates with value 'true' when the verification stage completes", "type": "boolean"}, "verificationTimeStarted": {"format": "date-time", "description": "Time when the verification stage started", "type": "string"}, "verificationTimeCompleted": {"format": "date-time", "description": "Time when the run fully completed on the instrument (if set, this marks the end of the verification stage)", "type": "string"}, "instrumentRunStatus": {"description": "Status of the instrument run stage", "type": "string"}, "instrumentRunStatusSummary": {"description": "Summary of the current status of the run", "type": "string"}, "instrumentRunCompleted": {"description": "Indicates with value 'true' when the instrument run stage completes", "type": "boolean"}, "instrumentRunTimeStarted": {"format": "date-time", "description": "Time when the instrument run stage started", "type": "string"}, "instrumentRunTimeCompleted": {"format": "date-time", "description": "Time when the run fully completed on the instrument (if set, this marks the end of the instrument run stage)", "type": "string"}, "instrumentCompleted": {"description": "Indicates with value 'true' when the instrument sub-stage completes", "type": "boolean"}, "instrumentTimeStarted": {"format": "date-time", "description": "Time when the instrument starts active work on the run (marks the start of the instrument sub-stage)", "type": "string"}, "instrumentTimeCompleted": {"format": "date-time", "description": "Time when the instrument completes active work on the run (excluding background file upload)", "type": "string"}, "sequencingCompleted": {"description": "Indicates with value 'true' when the sequencing sub-stage completes", "type": "boolean"}, "sequencingTimeStarted": {"format": "date-time", "description": "Time when the sequencing sub-stage started", "type": "string"}, "sequencingTimeCompleted": {"format": "date-time", "description": "Time when the sequencing sub-stage completed", "type": "string"}, "instrumentAnalysisStatus": {"description": "Status of the on-instrument analysis software", "type": "string"}, "instrumentAnalysisStatusSummary": {"description": "Summary of the instrument analysis status", "type": "string"}, "instrumentAnalysisPerformed": {"description": "Indicates with value 'true' if instrument analysis is being performed for the run", "type": "boolean"}, "instrumentAnalysisCompleted": {"description": "Indicates with value 'true' when the instrument analysis sub-stage completes", "type": "boolean"}, "instrumentAnalysisTimeStarted": {"format": "date-time", "description": "Time when the analysis starts on the instrument (marks the start of instrument analysis sub-stage)", "type": "string"}, "instrumentAnalysisTimeCompleted": {"format": "date-time", "description": "Time when the analysis completed on the instrument", "type": "string"}, "runUploadStatus": {"description": "Status of data upload from instrument", "type": "string"}, "runUploadStatusSummary": {"description": "Detailed summary of run upload status/progress", "type": "string"}, "runUploadCompleted": {"description": "Indicates with value 'true' when the run upload sub-stage completes", "type": "boolean"}, "runUploadTimeStarted": {"format": "date-time", "description": "Time when the data upload starts (marks the start of upload sub-stage)", "type": "string"}, "runUploadTimeCompleted": {"format": "date-time", "description": "Time when the run upload sub-stage completed", "type": "string"}, "isFailed": {"description": "Indicates whether the run failed", "type": "boolean"}, "runFailureType": {"description": "Indicates with value 'true' if the run failed during active processing by the instrument", "type": "string"}, "runFailureReason": {"description": "Specifies the reason why the run failure occurred", "type": "string"}, "needsAttention": {"description": "Indicates with value 'true' if the run needs attention", "type": "boolean"}, "needsAttentionReason": {"description": "Reason why the run needs attention", "type": "string"}, "isAborted": {"description": "Indicates with value 'true' that the run was stopped, canceled, or aborted", "type": "boolean"}, "isTimedOut": {"description": "Indicates with value 'true' if the run timed out", "type": "boolean"}, "prepKitInfo": {"$ref": "#/definitions/SequencingRunPrepKitInfo"}, "genomeInfo": {"$ref": "#/definitions/SequencingRunGenomeInfo"}, "flowCellBarcode": {"description": "Barcode of the flow cell used in the sequencing run", "type": "string"}, "inputContainerIdentifier": {"description": "Input container identifier used in the sequencing run", "type": "string"}, "consumables": {"description": "Information (such as barcodes) about consumables (such as reagents, buffers, etc.) used in the sequencing run"}, "runMode": {"description": "Describes the analysis and proactive data that is uploaded and processed in the cloud", "type": "string"}, "instrumentRunNumber": {"format": "int64", "description": "Records the number of runs performed on a specific instrument", "type": "integer"}, "sampleSheetName": {"description": "Name of the sample sheet file", "type": "string"}, "dataVolumeUrn": {"description": "URN of the data volume where run data is stored", "type": "string"}, "dataFolderUrn": {"description": "URN of the data folder where run data is stored", "type": "string"}, "dataFolderVolumePath": {"description": "Path with volume of the data folder where run data is stored", "type": "string"}, "totalSize": {"format": "int64", "description": "Total size of the run data files in bytes when the run data was first uploaded", "type": "integer"}, "lockedBy": {"description": "User that locked the sequencing run", "type": "string"}, "startedBy": {"description": "User that started the sequencing run", "type": "string"}, "timeLocked": {"format": "date-time", "description": "Time (in UTC) the sequencing run was locked", "type": "string"}, "isLocked": {"description": "Specifies whether or not the sequencing run has been locked", "type": "boolean"}, "config": {"$ref": "#/definitions/SequencingRunConfiguration"}, "instrument": {"$ref": "#/definitions/Instrument"}, "instrumentTypeSnapshot": {"description": "Instrument type snapshot when the run is locked or started", "type": "string"}, "instrumentSoftwareVersion": {"description": "Version of instrument control software provided by the instrument when the run starts", "type": "string"}, "analysisLocation": {"description": "Indicate the sequencing run will be performing local analysis or cloud analysis", "type": "string"}, "analysisSummaries": {"description": "Configured analysis summary information", "type": "array", "items": {"$ref": "#/definitions/SequencingRunAnalysisSummary"}}, "runAnalysisSettings": {"description": "Run analysis settings"}, "isFavorite": {"description": "Indicate whether the sequencing run is set as favorite run for the user", "type": "boolean"}, "externalLocation": {"description": "Stores the external location of the sequencing run", "type": "string"}, "checksumOfManifest": {"description": "Stores the checksum of manifest\r\nUsed to verify run contents copied from external location", "type": "string"}, "requeuedFromRun": {"$ref": "#/definitions/SequencingRunCompact"}, "requeueReason": {"description": "Reason for Requeue Analysis of a sequencing run", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "runParametersXml": {"description": "The content of the instrument RunParameters.xml file generated when sequencing run starts", "type": "string"}, "runInfoXml": {"description": "Content of the instrument RunInfo.xml file, generated in XML format when sequencing run starts", "type": "string"}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingRunAnalysisConfiguration": {"description": "Data contract for the full sequencing run analysis configuration", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "sequencingRun": {"$ref": "#/definitions/SequencingRunCompact"}, "sampleSettings": {"description": "User provided per-sample settings for this analysis configuration.", "type": "array", "items": {"$ref": "#/definitions/SequencingRunAnalysisSampleConfigurationCompact"}}, "name": {"description": "Name of the analysis configuration", "type": "string"}, "description": {"description": "Description of the analysis configuration", "type": "string"}, "settings": {"description": "User-provided analysis-level settings for this analysis configuration"}, "sampleSettingsSnapshot": {"description": "Snapshot of user provided per-sample settings for this analysis configuration."}, "originalSettings": {"description": "Original User-provided analysis-level settings for this analysis configuration"}, "originalSampleSettingsSnapshot": {"description": "Original Snapshot of user provided per-sample settings for this analysis configuration."}, "analysisVersion": {"$ref": "#/definitions/AnalysisVersionDefinitionCompact"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingRunAnalysisConfigurationSequencingRunAnalysisConfigurationSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/SequencingRunAnalysisConfiguration"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Name", "TimeCreated"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "SequencingRunAnalysisSampleConfigurationCompact": {"description": "Data contract for sequencing runs analysis per-sample configuration (compact)", "type": "object", "properties": {"sample": {"$ref": "#/definitions/SampleCompact"}, "settings": {"description": "Configurations for the sample"}}}, "SequencingRunAnalysisSummary": {"description": "Summary of a sequencing run analysis", "type": "object", "properties": {"definitionId": {"description": "Analysis version definition id", "type": "string"}, "configurationId": {"description": "Analysis configuration id", "type": "string"}, "name": {"description": "Analysis name", "type": "string"}, "displayName": {"description": "Analysis display name", "type": "string"}, "version": {"description": "Analysis version", "type": "string"}, "organization": {"description": "Analysis organization", "type": "string"}, "type": {"description": "Analysis type", "type": "string"}}}, "SequencingRunCompact": {"description": "Data contract for sequencing runs (compact)", "type": "object", "properties": {"id": {"description": "Unique object ID", "type": "string"}, "urn": {"description": "URN of the object", "type": "string"}, "href": {"format": "uri", "description": "HREF to the object", "type": "string"}, "runOrigin": {"description": "Origin of the run data (Instrument, InstrumentPostRunUpload, Simulated, etc.)", "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the run", "type": "string"}, "instrumentRunId": {"description": "Run ID typically generated by instrument (not guaranteed to be unique for either tenant or system)", "type": "string"}, "externalRunId": {"description": "ID of the sequencing run in another system", "type": "string"}, "runName": {"description": "User-supplied name of the experiment/run (not guaranteed to be unique for either tenant or system)", "type": "string"}, "description": {"description": "User-supplied description of the run", "type": "string"}, "isPlanned": {"description": "Indicates with value 'true' when the run is in the planning stage (including while locked and assigned to an instrument)", "type": "boolean"}, "aggregateRunStatus": {"description": "Overall status of the run across all stages, including the status of post-upload cloud processing", "type": "string"}, "verificationStatus": {"description": "Status of the verification stage", "type": "string"}, "verificationStatusSummary": {"description": "Summary of the current status of the run", "type": "string"}, "verificationCompleted": {"description": "Indicates with value 'true' when the verification stage completes", "type": "boolean"}, "verificationTimeStarted": {"format": "date-time", "description": "Time when the verification stage started", "type": "string"}, "verificationTimeCompleted": {"format": "date-time", "description": "Time when the run fully completed on the instrument (if set, this marks the end of the verification stage)", "type": "string"}, "instrumentRunStatus": {"description": "Status of the instrument run stage", "type": "string"}, "instrumentRunStatusSummary": {"description": "Summary of the current status of the run", "type": "string"}, "instrumentRunCompleted": {"description": "Indicates with value 'true' when the instrument run stage completes", "type": "boolean"}, "instrumentRunTimeStarted": {"format": "date-time", "description": "Time when the instrument run stage started", "type": "string"}, "instrumentRunTimeCompleted": {"format": "date-time", "description": "Time when the run fully completed on the instrument (if set, this marks the end of the instrument run stage)", "type": "string"}, "instrumentCompleted": {"description": "Indicates with value 'true' when the instrument sub-stage completes", "type": "boolean"}, "instrumentTimeStarted": {"format": "date-time", "description": "Time when the instrument starts active work on the run (marks the start of the instrument sub-stage)", "type": "string"}, "instrumentTimeCompleted": {"format": "date-time", "description": "Time when the instrument completes active work on the run (excluding background file upload)", "type": "string"}, "sequencingCompleted": {"description": "Indicates with value 'true' when the sequencing sub-stage completes", "type": "boolean"}, "sequencingTimeStarted": {"format": "date-time", "description": "Time when the sequencing sub-stage started", "type": "string"}, "sequencingTimeCompleted": {"format": "date-time", "description": "Time when the sequencing sub-stage completed", "type": "string"}, "instrumentAnalysisStatus": {"description": "Status of the on-instrument analysis software", "type": "string"}, "instrumentAnalysisStatusSummary": {"description": "Summary of the instrument analysis status", "type": "string"}, "instrumentAnalysisPerformed": {"description": "Indicates with value 'true' if instrument analysis is being performed for the run", "type": "boolean"}, "instrumentAnalysisCompleted": {"description": "Indicates with value 'true' when the instrument analysis sub-stage completes", "type": "boolean"}, "instrumentAnalysisTimeStarted": {"format": "date-time", "description": "Time when the analysis starts on the instrument (marks the start of instrument analysis sub-stage)", "type": "string"}, "instrumentAnalysisTimeCompleted": {"format": "date-time", "description": "Time when the analysis completed on the instrument", "type": "string"}, "runUploadStatus": {"description": "Status of data upload from instrument", "type": "string"}, "runUploadStatusSummary": {"description": "Detailed summary of run upload status/progress", "type": "string"}, "runUploadCompleted": {"description": "Indicates with value 'true' when the run upload sub-stage completes", "type": "boolean"}, "runUploadTimeStarted": {"format": "date-time", "description": "Time when the data upload starts (marks the start of upload sub-stage)", "type": "string"}, "runUploadTimeCompleted": {"format": "date-time", "description": "Time when the run upload sub-stage completed", "type": "string"}, "isFailed": {"description": "Indicates whether the run failed", "type": "boolean"}, "runFailureType": {"description": "Indicates with value 'true' if the run failed during active processing by the instrument", "type": "string"}, "runFailureReason": {"description": "Specifies the reason why the run failure occurred", "type": "string"}, "needsAttention": {"description": "Indicates with value 'true' if the run needs attention", "type": "boolean"}, "needsAttentionReason": {"description": "Reason why the run needs attention", "type": "string"}, "isAborted": {"description": "Indicates with value 'true' that the run was stopped, canceled, or aborted", "type": "boolean"}, "isTimedOut": {"description": "Indicates with value 'true' if the run timed out", "type": "boolean"}, "prepKitInfo": {"$ref": "#/definitions/SequencingRunPrepKitInfo"}, "genomeInfo": {"$ref": "#/definitions/SequencingRunGenomeInfo"}, "flowCellBarcode": {"description": "Barcode of the flow cell used in the sequencing run", "type": "string"}, "inputContainerIdentifier": {"description": "Input container identifier used in the sequencing run", "type": "string"}, "consumables": {"description": "Information (such as barcodes) about consumables (such as reagents, buffers, etc.) used in the sequencing run"}, "runMode": {"description": "Describes the analysis and proactive data that is uploaded and processed in the cloud", "type": "string"}, "instrumentRunNumber": {"format": "int64", "description": "Records the number of runs performed on a specific instrument", "type": "integer"}, "sampleSheetName": {"description": "Name of the sample sheet file", "type": "string"}, "dataVolumeUrn": {"description": "URN of the data volume where run data is stored", "type": "string"}, "dataFolderUrn": {"description": "URN of the data folder where run data is stored", "type": "string"}, "dataFolderVolumePath": {"description": "Path with volume of the data folder where run data is stored", "type": "string"}, "totalSize": {"format": "int64", "description": "Total size of the run data files in bytes when the run data was first uploaded", "type": "integer"}, "lockedBy": {"description": "User that locked the sequencing run", "type": "string"}, "startedBy": {"description": "User that started the sequencing run", "type": "string"}, "timeLocked": {"format": "date-time", "description": "Time (in UTC) the sequencing run was locked", "type": "string"}, "isLocked": {"description": "Specifies whether or not the sequencing run has been locked", "type": "boolean"}, "config": {"$ref": "#/definitions/SequencingRunConfiguration"}, "instrument": {"$ref": "#/definitions/Instrument"}, "instrumentTypeSnapshot": {"description": "Instrument type snapshot when the run is locked or started", "type": "string"}, "instrumentSoftwareVersion": {"description": "Version of instrument control software provided by the instrument when the run starts", "type": "string"}, "analysisLocation": {"description": "Indicate the sequencing run will be performing local analysis or cloud analysis", "type": "string"}, "analysisSummaries": {"description": "Configured analysis summary information", "type": "array", "items": {"$ref": "#/definitions/SequencingRunAnalysisSummary"}}, "runAnalysisSettings": {"description": "Run analysis settings"}, "isFavorite": {"description": "Indicate whether the sequencing run is set as favorite run for the user", "type": "boolean"}, "externalLocation": {"description": "Stores the external location of the sequencing run", "type": "string"}, "checksumOfManifest": {"description": "Stores the checksum of manifest\r\nUsed to verify run contents copied from external location", "type": "string"}, "requeuedFromRun": {"$ref": "#/definitions/SequencingRunCompact"}, "requeueReason": {"description": "Reason for Requeue Analysis of a sequencing run", "type": "string"}, "tenantId": {"description": "Unique identifier for the resource tenant", "type": "string"}, "subTenantId": {"description": "Organizational or Workgroup ID. If neither are present, User ID.", "type": "string"}, "acl": {"description": "Access control list of the object", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "ClientId that created the resource (bssh, stratus...)", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that last modified the resource", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}}}, "SequencingRunCompactSequencingRunSortFieldsPagedItems": {"description": "Paged list response including sort details", "type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/SequencingRunCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}, "sortedBy": {"description": "Sort order of item list", "enum": ["Id", "Default", "TimeModified", "RunName", "AggregateRunStatus"], "type": "string"}, "sortDirection": {"description": "Sort direction", "enum": ["Asc", "Desc"], "type": "string"}}}, "SequencingRunConfiguration": {"description": "Defines the configuration required for an instrument to start a run", "type": "object", "properties": {"instrumentType": {"description": "Type of instrument for which the run is planned", "type": "string"}, "instrumentPlatform": {"description": "Platform of instrument for which the run is planned", "type": "string"}, "numCyclesRead1": {"format": "int32", "description": "Number of read 1 cycles", "type": "integer"}, "numCyclesRead2": {"format": "int32", "description": "Number of read 2 cycles", "type": "integer"}, "readType": {"description": "Read type", "type": "string"}, "numCyclesIndex1": {"format": "int32", "description": "Number of index 1 cycles", "type": "integer"}, "numCyclesIndex2": {"format": "int32", "description": "Number of index 2 cycles", "type": "integer"}, "useCustomPrimerForRead1": {"description": "Indicates whether read 1 uses custom primer", "type": "boolean"}, "useCustomPrimerForRead2": {"description": "Indicates whether read 2 uses custom primer", "type": "boolean"}, "useCustomPrimerForIndex1": {"description": "Indicates whether index 1 uses custom primer", "type": "boolean"}, "useCustomPrimerForIndex2": {"description": "Indicates whether index 2 uses custom primer", "type": "boolean"}}}, "SequencingRunContentsResponse": {"description": "Defines the API response model that represents the sequencing run content", "type": "object", "properties": {"laneContentsResponse": {"description": "Defines the API response model that represents the lanes contained in the sequencing run", "type": "array", "items": {"$ref": "#/definitions/LaneContentResponse"}}}}, "SequencingRunGenome": {"description": "Genome involved in the sequencing run", "type": "object", "properties": {"id": {"description": "Id of the genome", "type": "string"}, "isIllumina": {"description": "Whether the genome is belonging to Illumina", "type": "boolean"}, "name": {"description": "Name of the genome", "type": "string"}, "species": {"description": "Species of the genome", "type": "string"}, "source": {"description": "Source of the genome", "type": "string"}, "build": {"description": "Build of the genome", "type": "string"}, "dragenVersion": {"description": "Dragen version for the genome", "type": "string"}, "genomeFormat": {"description": "Format for the genome file", "type": "string"}}}, "SequencingRunGenomeInfo": {"description": "Genomes information of the sequencing run", "type": "object", "properties": {"genomes": {"description": "Array of genome info", "type": "array", "items": {"$ref": "#/definitions/SequencingRunGenome"}}}}, "SequencingRunPrepKitInfo": {"description": "The library prep kit and index adapter kit information that is used in the sequencing run in ProActive format", "type": "object", "properties": {"libraryPrepKitNames": {"description": "Names of LibraryPrepKits used (Names of custom kits are \"Custom\")", "type": "string"}, "numSamples": {"format": "int32", "description": "Number of libraries", "type": "integer"}, "lanes": {"description": "Library prep kit and index adapter kit information for all lanes", "type": "array", "items": {"$ref": "#/definitions/LanePrepKitInfo"}}}}, "SequencingRunUpload": {"description": "Represents the returned data from the sequencing run upload. Includes sequencing run compact and upload credentials.", "type": "object", "properties": {"sequencingRunCompact": {"$ref": "#/definitions/SequencingRunCompact"}, "objectStoreAccess": {"$ref": "#/definitions/ObjectStoreAccess"}}}, "SequencingStatsResponse": {"description": "Defines the API response model that represents the sequencing stats", "type": "object", "properties": {"cycleNumber": {"format": "int32", "type": "integer"}, "runSequencingStats": {"$ref": "#/definitions/RunSequencingStatsResponse"}, "laneSequencingStats": {"description": "List of LaneSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/LaneSequencingStatsResponse"}}, "readSequencingStats": {"description": "List of ReadSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/ReadSequencingStatsResponse"}}, "laneByReadSequencingStats": {"description": "List of LaneByReadSequencingStats of the run", "type": "array", "items": {"$ref": "#/definitions/LaneByReadSequencingStatsResponse"}}}}, "StartPlannedRunRequest": {"description": "Request to start a planned run", "required": ["consumables", "flowCellBarcode", "instrumentRunId", "instrumentRunNumber", "instrumentRunStatus", "instrumentSoftwareVersion", "runMode", "runParametersXml"], "type": "object", "properties": {"instrumentRunId": {"description": "Run ID typically generated by instrument (not guaranteed to be unique for either request token or system)", "maxLength": 255, "minLength": 0, "type": "string"}, "instrumentRunStatus": {"description": "Instrument run status, provided by the instrument control software", "maxLength": 40, "minLength": 0, "type": "string"}, "flowCellBarcode": {"description": "Barcode of the flow cell used in the sequencing run", "maxLength": 255, "minLength": 0, "type": "string"}, "consumables": {"description": "Information (e.g. barcodes) about consumables (e.g. reagents or buffers) used in the sequencing run"}, "sampleSheetName": {"description": "Name of the sample sheet file. Sample sheets are not always required for all instrument types", "maxLength": 255, "minLength": 0, "type": "string"}, "runMode": {"description": "Method by which analysis data is uploaded and process in the cloud", "enum": ["InstrumentMetrics", "InstrumentAndRunMetrics", "InstrumentAndRunMetricsAndRunOutput"], "type": "string"}, "runName": {"description": "Name of the run", "maxLength": 255, "minLength": 0, "type": "string"}, "runParametersXml": {"description": "Content of the instrument RunParameters.xml file, generated in XML format when sequencing run starts", "type": "string"}, "runInfoXml": {"description": "Content of the instrument RunInfo.xml file, generated in XML format when sequencing run starts", "type": "string"}, "instrumentRunNumber": {"format": "int64", "description": "Number that records the number of runs that have been performed on a specific instrument", "minimum": 0, "type": "integer"}, "description": {"description": "Description of the run", "maxLength": 8192, "minLength": 0, "type": "string"}, "instrumentSoftwareVersion": {"description": "Version of instrument control software provided by the instrument when the run starts", "maxLength": 20, "minLength": 0, "type": "string"}, "externalLocation": {"description": "Stores the external location of the sequencing run", "maxLength": 4096, "minLength": 0, "type": "string"}}}, "StartVerificationRequest": {"description": "Start verification of a sequencing run", "type": "object", "properties": {"flowcellType": {"description": "Optional flowcell type being used by the instrument", "maxLength": 255, "minLength": 0, "type": "string"}, "sequencingRunSpaceRequiredInGb": {"format": "double", "description": "Estimated space required for the sequencing run data in GB", "type": "number"}}}, "SupportedInstrumentPlatformAndTypes": {"description": "Supported instrument platform and types", "required": ["instrumentPlatform"], "type": "object", "properties": {"instrumentPlatform": {"description": "Instrument platform", "type": "string"}, "instrumentTypes": {"description": "Instrument types", "type": "array", "items": {"type": "string"}}}}, "SupportedInstrumentTypes": {"description": "DTO of supported instrument types", "type": "object", "properties": {"instrumentTypes": {"description": "An list of supported instrument types", "type": "array", "items": {"$ref": "#/definitions/InstrumentTypeInfo"}}, "instrumentPlatforms": {"description": "A list of supported instrument platforms", "type": "array", "items": {"$ref": "#/definitions/InstrumentPlatformInfo"}}}}, "UpdateAclRequest": {"description": "Request to update the access control list of a resource", "required": ["acl"], "type": "object", "properties": {"acl": {"description": "Input access control list", "type": "array", "items": {"type": "string"}}}}, "UpdateAnalysisDefinitionRequest": {"description": "Request to update an analysis definition", "type": "object", "properties": {"name": {"description": "Name of the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization owning the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the analysis definition", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the analysis definition", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the analysis definition", "enum": ["Active", "Inactive"], "type": "string"}, "libraryPrepKitIds": {"description": "Array of library prep kit IDs that are compatible with this analysis definition", "type": "array", "items": {"type": "string"}}, "illuminaKitSupportMode": {"description": "Illumina Kits Support Mode of analysis definition", "enum": ["All", "Compatible", "None"], "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the analysis definition", "enum": ["RUO", "IVD", "IUO"], "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateAnalysisVersionDefinitionRequest": {"description": "Request to create an analysis version definition", "type": "object", "properties": {"version": {"description": "Version of the analysis version definition", "maxLength": 50, "minLength": 0, "type": "string"}, "supportedInstrumentPlatformAndTypes": {"description": "The instrument platform and instrument type supported by the analysis\r\nIf not specified, support all platforms and types", "type": "array", "items": {"$ref": "#/definitions/SupportedInstrumentPlatformAndTypes"}}, "description": {"description": "Description of this version of analysis definition", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the analysis version definition", "enum": ["Active", "Inactive"], "type": "string"}, "analysisType": {"description": "Analysis type of this version", "enum": ["Local", "CloudRun", "CloudRunSample", "EdgeRun", "EdgeRunSample"], "type": "string"}, "skipAnalysisSection": {"description": "Controls whether the sample sheet has an analysis-specific section for this analysis. If true, do not\r\ninclude the analysis-specific section.", "type": "boolean"}, "isDragen": {"description": "Analysis type of this version of the analysis definition", "type": "boolean"}, "supportedGenomeIds": {"description": "Array of genome IDs that are supported by this version of analysis definition", "type": "array", "items": {"type": "string"}}, "excludedGenomeIds": {"description": "Array of genome IDs that are not supported by this version of analysis definition", "type": "array", "items": {"type": "string"}}, "libraryPrepKitIds": {"description": "Array of library prep kit IDs that are compatible with this version of analysis definition", "type": "array", "items": {"type": "string"}}, "analysisSettings": {"description": "Settings for the analysis (at the global analysis level)"}, "analysisSampleSettings": {"description": "Per-sample settings for the analysis (at the per-sample level)"}, "onSubmitFunction": {"description": "Logic for validating and transforming AnalysisSettings and AnalysisSampleSettings", "maxLength": 100000, "minLength": 0, "type": "string"}, "onRenderFunction": {"description": "Logic for dynamically rendering AVD settings and AVD setting configurations", "maxLength": 100000, "minLength": 0, "type": "string"}, "onRenderRequireRunContents": {"description": "Defines whether the analysis fields should be changed based on input of run contents\r\nThis is to avoid unnecessary huge input from UI that is not really needed during rendering", "type": "boolean"}, "settings": {"$ref": "#/definitions/AnalysisVersionDefinitionSettings"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateGenomeRequest": {"description": "Request to update a genome", "type": "object", "properties": {"name": {"description": "Name of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "DisplayName of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "order": {"format": "int32", "description": "Order of the genome", "maximum": 2147483647, "minimum": -2147483648, "type": "integer"}, "isApplicationSpecific": {"description": "Whether the genome is application specific", "type": "boolean"}, "build": {"description": "Build of the genome", "maxLength": 50, "minLength": 0, "type": "string"}, "organization": {"description": "Organization of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the genome", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the genome", "enum": ["Active", "Inactive"], "type": "string"}, "species": {"description": "Species of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "source": {"description": "Source of the genome", "maxLength": 255, "minLength": 0, "type": "string"}, "dragenVersion": {"description": "Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.Domain.UpdateGenomeParameters.GenomeFormat is Dragen", "maxLength": 255, "minLength": 0, "type": "string"}, "dataLocationUrn": {"description": "Urn of the file in GDS containing the genome data file", "maxLength": 1152, "minLength": 0, "type": "string"}, "genomeFormat": {"description": "Format for the genome file, Illumina.GenomicSequencingService.Models.Domain.UpdateGenomeParameters.DragenVersion is required when it is Dragen", "enum": ["Dragen", "Fasta"], "type": "string"}, "settings": {"description": "Custom settings for the genome"}, "sourceFileMetadata": {"description": "Key-value pairs that indicate the source files for the specific genome"}, "acl": {"type": "array", "items": {"type": "string"}}, "fastaFileUrn": {"description": "Urn of the Fasta file being used by the genome", "maxLength": 1152, "minLength": 0, "type": "string"}}}, "UpdateIndexAdapterKitByDefinitionRequest": {"description": "Request to update an index adapter kit by definition", "required": ["definition"], "type": "object", "properties": {"definitionFormat": {"description": "The format for Definition (e.g. yaml)", "enum": ["Yaml", "Tsv"], "type": "string"}, "definition": {"description": "The kit definition in the specified DefinitionFormat", "type": "string"}, "force": {"description": "Set to true to force update even when the kit is in use", "type": "boolean"}, "skipIndexDiversityValidation": {"description": "Flag to skip index diversity validation", "type": "boolean"}}}, "UpdateIndexAdapterKitRequest": {"description": "Request to update an index adapter kit", "type": "object", "properties": {"name": {"description": "Name of the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization owning the kit", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the kit", "maxLength": 8192, "minLength": 0, "type": "string"}, "allowedIndexStrategies": {"description": "Allowed index strategies", "type": "array", "items": {"description": "Defines the index strategy for an index adapter kit", "enum": ["NoIndex", "Single", "Dual"], "type": "string"}}, "adapterSequenceRead1": {"description": "Optional read 1 adapter sequence", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Optional read 2 adapter sequence", "maxLength": 128, "minLength": 0, "type": "string"}, "settings": {"$ref": "#/definitions/IndexAdapterKitSettings"}, "indexSequences": {"description": "Index sequence mappings", "type": "array", "items": {"$ref": "#/definitions/IndexSequence"}}, "force": {"description": "Set to true to force update even when the kit is in use", "type": "boolean"}, "skipIndexDiversityValidation": {"description": "Flag to skip index diversity validation", "type": "boolean"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateLibraryPoolRequest": {"description": "Request to update a library pool", "type": "object", "properties": {"name": {"description": "Name of the library pool. This field is case-insensitive.", "maxLength": 100, "minLength": 0, "type": "string"}, "libraryIds": {"description": "IDs of libraries in the pool", "type": "array", "items": {"type": "string"}}, "description": {"description": "Description of the library pool", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the library pool", "enum": ["Active", "Failed", "Canceled", "Consumed", "QcFailed"], "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateLibraryPrepKitRequest": {"description": "Request to update a library prep kit", "type": "object", "properties": {"name": {"description": "Name of the library prep kit", "maxLength": 255, "minLength": 0, "type": "string"}, "displayName": {"description": "User-friendly name of the library prep kit", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization from where the library prep kit originated (e.g. Illumina)", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the library prep kit", "maxLength": 8192, "minLength": 0, "type": "string"}, "allowedReadTypes": {"description": "Reads types allowed for the library prep kit", "type": "array", "items": {"description": "Defines the read type used for the sequencing run. \r\nIllumina offers two read types: single-read sequencing and paired-end sequencing", "enum": ["Single", "Paired"], "type": "string"}}, "defaultRead1Length": {"format": "int32", "description": "Default read 1 length", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "defaultRead2Length": {"format": "int32", "description": "Default read 2 length", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "settings": {"$ref": "#/definitions/LibraryPrepKitSettings"}, "isApplicationSpecific": {"description": "Whether the library prep kit is application specific", "type": "boolean"}, "indexAdapterKitIds": {"description": "Array of index adapter kit IDs that are compatible with the library prep kit", "type": "array", "items": {"type": "string"}}, "force": {"description": "Set to true to force update even when the kit is in use", "type": "boolean"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateLibraryRequest": {"description": "Request to update a library", "type": "object", "properties": {"name": {"description": "Name of the library. This field is case-insensitive.", "maxLength": 140, "minLength": 0, "type": "string"}, "description": {"description": "Description of the library", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the library", "enum": ["Active", "Failed", "Canceled", "Consumed"], "type": "string"}, "libraryPrepKitId": {"description": "ID of the library prep kit used to prepare the library", "maxLength": 50, "minLength": 0, "type": "string"}, "indexAdapterKitId": {"description": "ID of the index kit used to prepare the library", "maxLength": 50, "minLength": 0, "type": "string"}, "indexContainerPosition": {"description": "The container position (well or plate+well position) for the library that is using an index adapter kit with fixed index position", "maxLength": 8, "minLength": 0, "type": "string"}, "index1Name": {"description": "Index 1 name", "maxLength": 255, "minLength": 0, "type": "string"}, "index2Name": {"description": "Index 2 name", "maxLength": 255, "minLength": 0, "type": "string"}, "index1Sequence": {"description": "Index 1 sequence", "maxLength": 10, "minLength": 0, "type": "string"}, "index2Sequence": {"description": "Index 2 sequence", "maxLength": 10, "minLength": 0, "type": "string"}, "adapterSequenceRead1": {"description": "Adapter sequence read 1", "maxLength": 128, "minLength": 0, "type": "string"}, "adapterSequenceRead2": {"description": "Adapter sequence read 2", "maxLength": 128, "minLength": 0, "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateSampleRequest": {"description": "Request to update a sample", "type": "object", "properties": {"name": {"description": "Name of the sample. This field is case-insensitive.", "maxLength": 100, "minLength": 0, "type": "string"}, "description": {"description": "Description of the sample", "maxLength": 8192, "minLength": 0, "type": "string"}, "status": {"description": "Status of the sample in the lab process", "enum": ["New", "Active", "Done", "Canceled", "QcFailed"], "type": "string"}, "labStatus": {"description": "User-customizable value that indicates the status of the sample", "maxLength": 255, "minLength": 0, "type": "string"}, "projectName": {"description": "ProjectName. This field is case-insensitive.\r\nNote: This field is an alias of DataAggregationGroup field until DataAggregationGroups is deprecated.", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateSequencingRunAnalysisConfigurationRequest": {"type": "object", "properties": {"name": {"description": "Name of the analysis configuration", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the analysis configuration", "maxLength": 8192, "minLength": 0, "type": "string"}, "analysisVersionDefinitionId": {"description": "The ID of the analysis version definition on which this analysis configuration is based", "maxLength": 8192, "minLength": 0, "type": "string"}, "settings": {"description": "User-provided analysis-level settings for this analysis configuration (validated against the analysis version definition)"}, "sampleSettings": {"description": "User provided per-sample settings for this analysis configuration\r\nThese must follow the schema described in the analysis version definition", "type": "array", "items": {"$ref": "#/definitions/SampleSettingEntry"}}}}, "UpdateSequencingRunConfigurationRequest": {"description": "Request to update sequencing run configuration", "type": "object", "properties": {"runName": {"description": "Name of the run\r\nMust not be null, empty, or consist only of white-space characters", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the run", "maxLength": 8192, "minLength": 0, "type": "string"}, "regulatoryMode": {"description": "Regulatory mode of the run", "enum": ["RUO", "IVD", "IUO"], "type": "string"}, "instrumentType": {"description": "Type of instrument for which the run is planned", "type": "string"}, "instrumentPlatform": {"description": "Platform of instrument for which the run is planned\r\nRecognized values include:\r\nNextSeq, HiSeq, MiSeq, Eco, iScan, HiSeqX, NeoPrep, MiniSeq, NovaSeq, iSeq, TruSightNIPT, NextSeq1k2k\r\nNo value entered is treated as the instrument platform of input InstrumentType", "type": "string"}, "numCyclesRead1": {"format": "int32", "description": "Number of cycles in read 1", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "numCyclesRead2": {"format": "int32", "description": "Number of cycles in read 2", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "readType": {"description": "Read type of the run", "enum": ["Single", "Paired"], "type": "string"}, "numCyclesIndex1": {"format": "int32", "description": "Number of cycles in index 1", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "numCyclesIndex2": {"format": "int32", "description": "Number of cycles in index 2", "maximum": 2147483647, "minimum": 0, "type": "integer"}, "useCustomPrimerForRead1": {"description": "Value indicating whether read 1 uses custom primer", "type": "boolean"}, "useCustomPrimerForRead2": {"description": "Value indicating whether read 2 uses custom primer", "type": "boolean"}, "useCustomPrimerForIndex1": {"description": "Value indicating whether index 1 uses custom primer", "type": "boolean"}, "useCustomPrimerForIndex2": {"description": "Value indicating whether index 2 uses custom primer", "type": "boolean"}}}, "UpdateSequencingRunContentsRequest": {"description": "Request to update the contents of a sequencing run", "required": ["laneContents"], "type": "object", "properties": {"allowIndexUpdates": {"description": "Indicates whether updating indexes is allowed", "type": "boolean"}, "laneContents": {"description": "Collection of lane contents", "type": "array", "items": {"$ref": "#/definitions/LaneContent"}}}}, "UpdateSequencingRunRequest": {"description": "Request to update an existing sequencing run resource. Metadata update must follow these rules:\r\n(1) If the run originates from instrument, metadata update is not permitted after instrument run starts.\r\n(2) If the run originates from upload, metadata update is not permitted after upload starts.\r\n(3) If the run is locked, metadata update is only permitted by the user who locked the run.\r\nNote that Description update is not constrained by these rules.", "type": "object", "properties": {"runName": {"description": "User-provided name of the experiment/run\r\nNot guaranteed to be unique for either request token or system\r\nIf null or undefined, existing value is left as is\r\nAny other non-null values are used to update the RunName field of the run\r\nThis property is considered metadata, and is restricted by metadata update rules", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-provided description of the experiment/run\r\nIf null or undefined, existing value is left as is\r\nAny other non-null values are used to update the RunName field of the run\r\nThis property is NOT considered metadata, and is not restricted by metadata update rules\r\nIf the run is locked, description may only be updated by the user who locked the run", "maxLength": 8192, "minLength": 0, "type": "string"}, "prepKitInfo": {"$ref": "#/definitions/SequencingRunPrepKitInfo"}, "flowCellBarcode": {"description": "The barcode of the FlowCell used in the sequencing run.\r\nIf null or undefined, existing value is left as is\r\nAny other non-null values are used to update the RunName field of the run\r\nThis property is considered metadata, and is restricted by metadata update rules", "maxLength": 255, "minLength": 0, "type": "string"}, "inputContainerIdentifier": {"description": "Input container identifier used in the sequencing run", "maxLength": 255, "minLength": 0, "type": "string"}, "consumables": {"description": "Information (such as barcodes) of the consumables (such as reagents, buffers, ...) used in the sequencing run.\r\nIf null or undefined, existing value is left as is\r\nAny other non-null values are used to update the RunName field of the run\r\nThis property is considered metadata, and is restricted by metadata update rules"}, "sampleSheetName": {"description": "Name of the sample sheet file\r\nIf null or undefined, existing value is left as is\r\nAny other non-null values are used to update the RunName field of the run\r\nThis property is considered metadata, and is restricted by metadata update rules", "maxLength": 255, "minLength": 0, "type": "string"}, "isFavorite": {"description": "Set the run as favorite runs", "type": "boolean"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "UpdateSequencingRunStatusRequest": {"type": "object", "properties": {"verificationStatus": {"description": "Verification status updated while the stage is completing", "maxLength": 40, "minLength": 0, "type": "string"}, "verificationStatusSummary": {"description": "Detailed summary of verification status", "maxLength": 255, "minLength": 0, "type": "string"}, "instrumentRunStatus": {"description": "Instrument run status updated by the instrument control software while the stage is completing", "maxLength": 40, "minLength": 0, "type": "string"}, "instrumentRunStatusSummary": {"description": "Detailed summary of instrument run status provided by instrument", "maxLength": 255, "minLength": 0, "type": "string"}, "instrumentAnalysisStatus": {"description": "Instrument analysis status updated by the instrument control software while the stage is completing", "maxLength": 40, "minLength": 0, "type": "string"}, "instrumentAnalysisStatusSummary": {"description": "Detailed summary of instrument analysis status provided by instrument", "maxLength": 255, "minLength": 0, "type": "string"}, "uploadStatusSummary": {"description": "Detailed summary of upload progress provided by instrument", "maxLength": 255, "minLength": 0, "type": "string"}, "verificationProgress": {"description": "Progress of the verification stage", "enum": ["Started", "Completed", "Failed"], "type": "string"}, "instrumentProgress": {"description": "Progress of the instrument stage", "enum": ["Started", "Completed", "Failed"], "type": "string"}, "sequencingProgress": {"description": "Progress of the sequencing stage", "enum": ["Started", "Completed", "Failed"], "type": "string"}, "instrumentAnalysisProgress": {"description": "Progress of the instrument analysis stage", "enum": ["Started", "Completed", "Failed"], "type": "string"}, "uploadProgress": {"description": "Progress of the upload stage", "enum": ["Started", "Completed", "Failed"], "type": "string"}, "failureReason": {"description": "Reason for reported failure", "maxLength": 8192, "minLength": 0, "type": "string"}, "needsAttention": {"description": "True if the run should be marked as needing attention for user, false otherwise", "type": "boolean"}, "needsAttentionReason": {"description": "Reason why the run needs attention", "maxLength": 255, "minLength": 0, "type": "string"}}}, "WorkflowMetadataDto": {"description": "Workflow meta data", "type": "object", "properties": {"workflowType": {"description": "Workflow type\r\nWe always force it to be nextflow for now", "type": "string"}, "workflowUrl": {"description": "Points to the workflow definition", "type": "string"}, "volumeSizeInGigabytes": {"format": "int32", "description": "The volume size limitation for the analysis output", "type": "integer"}, "tags": {"description": "A JSON object that can be used to pass metadata to the workflow"}, "workflowParams": {"description": "Workflow parameters with key/value pairs\r\nA JSON object that allows the definition to provide hard coded parameters to the workflow\r\nThese get merged with the parameters provided to the workflow via user settings"}, "workflowResourcesFolder": {"description": "Optional resources folder configured for the workflow", "type": "string"}}}, "TaskSummary": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "name": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "TaskSummaryPagedItems": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/TaskSummary"}}, "itemCount": {"format": "int32", "type": "integer"}, "firstPageToken": {"type": "string"}, "nextPageToken": {"type": "string"}, "prevPageToken": {"type": "string"}, "lastPageToken": {"type": "string"}, "totalItemCount": {"format": "int64", "type": "integer"}, "totalPageCount": {"format": "int64", "type": "integer"}}}, "Credentials": {"type": "object", "properties": {"username": {"type": "string"}, "password": {"type": "string"}}}, "Image": {"required": ["name"], "type": "object", "properties": {"name": {"description": "Name of url for Docker Image", "type": "string"}, "tag": {"description": "Version of image as defined in repository", "type": "string"}, "digest": {"description": "Version of image as defined in repository", "type": "string"}, "credentials": {"$ref": "#/definitions/Credentials"}}}, "InputMountMappingWithCreds": {"type": "object", "properties": {"storageProvider": {"type": "string"}, "credentials": {"type": "object", "additionalProperties": {"type": "string"}}, "path": {"type": "string"}, "url": {"type": "string"}, "urn": {"type": "string"}, "mode": {"type": "string"}, "type": {"default": "File", "type": "string"}}}, "MountMappingWithCreds": {"type": "object", "properties": {"path": {"type": "string"}, "url": {"type": "string"}, "urn": {"type": "string"}, "type": {"type": "string"}, "storageProvider": {"type": "string"}, "credentials": {"type": "object", "additionalProperties": {"type": "string"}}}}, "SystemFiles": {"type": "object", "properties": {"url": {"type": "string"}, "urn": {"type": "string"}, "storageProvider": {"type": "string"}, "credentials": {"type": "object", "additionalProperties": {"type": "string"}}}}, "Resources": {"type": "object", "properties": {"type": {"type": "string"}, "size": {"type": "string"}, "cpuCores": {"format": "double", "type": "number"}, "memoryGb": {"format": "double", "type": "number"}, "hardware": {"type": "array", "items": {"type": "string"}}, "tier": {"type": "string"}}}, "InputStreamSettings": {"type": "object", "properties": {"accessPattern": {"default": "sequential", "type": "string"}, "cacheSizeGB": {"format": "int32", "default": 50, "maximum": 10000, "minimum": 50, "type": "integer"}, "blockSizeMB": {"format": "double", "default": 32, "maximum": 1024, "minimum": 0, "type": "number"}, "prefetchBlocks": {"format": "int32", "default": 32, "maximum": 64, "minimum": 0, "type": "integer"}}}, "Environment": {"type": "object", "properties": {"variables": {"type": "object", "additionalProperties": {"type": "string"}}, "resources": {"$ref": "#/definitions/Resources"}, "inputStreamSettings": {"$ref": "#/definitions/InputStreamSettings"}}}, "Execution": {"type": "object", "properties": {"image": {"$ref": "#/definitions/Image"}, "command": {"type": "string"}, "args": {"description": "Argument to run specified task", "type": "array", "items": {"type": "string"}}, "inputs": {"description": "Path (Inputs) - Path to mount file at valid Url\r\nURL (Inputs) - Url of file mounted at specified path", "type": "array", "items": {"$ref": "#/definitions/InputMountMappingWithCreds"}}, "outputs": {"description": "Path (Outputs) - Path where files will be output to valid Url\r\nURL (Outputs) - Url of folder with files from the path will be uploaded", "type": "array", "items": {"$ref": "#/definitions/MountMappingWithCreds"}}, "systemFiles": {"$ref": "#/definitions/SystemFiles"}, "environment": {"$ref": "#/definitions/Environment"}, "workingDirectory": {"type": "string"}, "retryLimit": {"format": "int32", "default": 3, "type": "integer"}, "retryCount": {"format": "int32", "default": 0, "type": "integer"}}}, "CreateTaskVersionRequest": {"required": ["version"], "type": "object", "properties": {"version": {"description": "User-defined version of task version", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description of task version", "maxLength": 4096, "minLength": 0, "type": "string"}, "execution": {"$ref": "#/definitions/Execution"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "CreateTaskRequest": {"required": ["name"], "type": "object", "properties": {"name": {"description": "User-defined name of the task", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description of the task", "maxLength": 4096, "minLength": 0, "type": "string"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "taskVersions": {"description": "List of task versions", "type": "array", "items": {"$ref": "#/definitions/CreateTaskVersionRequest"}}}}, "TaskVersion": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "version": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "execution": {"$ref": "#/definitions/Execution"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "Task": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "name": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "taskVersions": {"type": "array", "items": {"$ref": "#/definitions/TaskVersion"}}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "UpdateTaskRequest": {"type": "object", "properties": {"name": {"description": "User-defined name of the task", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description of the task", "maxLength": 4096, "minLength": 0, "type": "string"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}}}, "TaskVersionSummary": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "version": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "TaskRunSummary": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "name": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "status": {"default": "Pending", "type": "string"}, "statusDetails": {"maxLength": 4096, "minLength": 0, "type": "string"}, "taskVersionSummary": {"$ref": "#/definitions/TaskVersionSummary"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "TaskRunSummaryPagedItems": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/TaskRunSummary"}}, "itemCount": {"format": "int32", "type": "integer"}, "firstPageToken": {"type": "string"}, "nextPageToken": {"type": "string"}, "prevPageToken": {"type": "string"}, "lastPageToken": {"type": "string"}, "totalItemCount": {"format": "int64", "type": "integer"}, "totalPageCount": {"format": "int64", "type": "integer"}}}, "CreateTaskRunRequest": {"type": "object", "properties": {"name": {"description": "User-defined name of the task run", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description of the task run", "maxLength": 4096, "minLength": 0, "type": "string"}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "execution": {"$ref": "#/definitions/Execution"}}}, "TaskRunLogs": {"type": "object", "properties": {"startTime": {"format": "date-time", "type": "string"}, "endTime": {"format": "date-time", "type": "string"}, "error": {"type": "string"}, "errorDetails": {"type": "string"}, "stdout": {"type": "string"}, "stderr": {"type": "string"}}}, "TaskRun": {"type": "object", "properties": {"id": {"description": "Global identifier for object", "type": "string"}, "href": {"description": "Href of the object", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "name": {"maxLength": 255, "minLength": 0, "type": "string"}, "description": {"maxLength": 4096, "minLength": 0, "type": "string"}, "status": {"default": "Pending", "type": "string"}, "statusDetails": {"maxLength": 4096, "minLength": 0, "type": "string"}, "execution": {"$ref": "#/definitions/Execution"}, "taskVersionSummary": {"$ref": "#/definitions/TaskVersionSummary"}, "logs": {"type": "array", "items": {"$ref": "#/definitions/TaskRunLogs"}}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}, "tenantId": {"type": "string"}, "subTenantId": {"type": "string"}, "createdBy": {"description": "User who created the object", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Date and Time (in UTC) when object was created in TES", "type": "string"}, "modifiedBy": {"description": "User who updated the object", "type": "string"}, "timeModified": {"format": "date-time", "description": "Date and Time (in UTC) when object was modified in TES", "type": "string"}}}, "ContainerStateWaiting": {"type": "object", "properties": {"reason": {"type": "string"}, "message": {"type": "string"}}}, "ContainerStateRunning": {"type": "object", "properties": {"startedAt": {"format": "date-time", "type": "string"}}}, "ContainerStateTerminated": {"type": "object", "properties": {"exitCode": {"format": "int32", "type": "integer"}, "signal": {"format": "int32", "type": "integer"}, "reason": {"type": "string"}, "message": {"type": "string"}, "startedAt": {"format": "date-time", "type": "string"}, "finishedAt": {"format": "date-time", "type": "string"}, "containerID": {"type": "string"}}}, "ContainerState": {"type": "object", "properties": {"waiting": {"$ref": "#/definitions/ContainerStateWaiting"}, "running": {"$ref": "#/definitions/ContainerStateRunning"}, "terminated": {"$ref": "#/definitions/ContainerStateTerminated"}}}, "ContainerStatus": {"type": "object", "properties": {"name": {"type": "string"}, "state": {"$ref": "#/definitions/ContainerState"}}}, "HeartbeatTaskRunRequest": {"type": "object", "properties": {"lastHeartbeat": {"description": "LastHeartbeat", "type": "boolean"}, "podName": {"type": "string"}, "podUID": {"type": "string"}, "podHardwareDetails": {"type": "string"}, "jobRetryCount": {"format": "int32", "type": "integer"}, "nonce": {"type": "string"}, "containerStatus": {"type": "array", "items": {"$ref": "#/definitions/ContainerStatus"}}}}, "TaskRunHeartbeat": {"type": "object", "properties": {"jwt": {"type": "string"}}}, "TaskVersionSummaryPagedItems": {"type": "object", "properties": {"items": {"type": "array", "items": {"$ref": "#/definitions/TaskVersionSummary"}}, "itemCount": {"format": "int32", "type": "integer"}, "firstPageToken": {"type": "string"}, "nextPageToken": {"type": "string"}, "prevPageToken": {"type": "string"}, "lastPageToken": {"type": "string"}, "totalItemCount": {"format": "int64", "type": "integer"}, "totalPageCount": {"format": "int64", "type": "integer"}}}, "UpdateTaskVersionRequest": {"type": "object", "properties": {"version": {"description": "User-defined version of task version", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description of task version", "maxLength": 4096, "minLength": 0, "type": "string"}, "execution": {"$ref": "#/definitions/Execution"}, "acl": {"type": "array", "items": {"type": "string"}}}}, "LaunchTaskRequest": {"type": "object", "properties": {"name": {"description": "User-defined name for the task run, if not specified version string of task version will be used", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "User-defined description for the task run, if not specified task version description will be used", "maxLength": 4096, "minLength": 0, "type": "string"}, "arguments": {"description": "Arguments to launch a task run", "type": "object", "additionalProperties": {"type": "string"}}, "acl": {"description": "Access Control List", "type": "array", "items": {"type": "string"}}}}, "WorkflowCompact": {"description": "Compact details of a workflow", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "name": {"description": "Name of the workflow", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization associated with the workflow", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the workflow", "maxLength": 256, "minLength": 0, "type": "string"}, "toolClass": {"description": "Workflow type", "type": "string"}, "categories": {"description": "Categories of the workflow (Limit Max Size : 10)", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "WorkflowList": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/WorkflowCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "WorkflowArgument": {"description": "Argument definition", "required": ["name"], "type": "object", "properties": {"name": {"description": "Name of the argument key", "maxLength": 128, "minLength": 0, "type": "string"}, "value": {"description": "A simple string value for the argument. Cannot provide both Value and Json at the same time.", "type": "string"}, "json": {"description": "A JSON value for the argument. Cannot provide both Value and Json at the same time."}, "options": {"description": "Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final\r\nSome combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc.", "type": "string"}}}, "WorkflowConnection": {"description": "Defines a connection that can be used in a workflow definition to perform actions", "required": ["name"], "type": "object", "properties": {"name": {"maxLength": 128, "minLength": 0, "type": "string"}, "type": {"description": "Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2", "type": "string"}, "host": {"format": "uri", "description": "For API based connections, the Host part of the API endpoint", "maxLength": 1024, "minLength": 0, "type": "string", "example": "https://api.myhost.com/v1/"}, "hostValidationRegex": {"description": "Regex that hosts associated with this connection must meet (when host override by each run is allowed)", "maxLength": 100, "minLength": 0, "type": "string"}, "credentials": {"description": "Credentials associated with the connection. Format depends on type of connection.", "type": "string"}, "options": {"description": "Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride", "type": "string"}, "autoDisableUrl": {"format": "uri", "description": "Relative URL (relative to Host) to call in order to disable the credentials", "maxLength": 1024, "minLength": 0, "type": "string"}, "autoDisableHttpMethod": {"description": "Http method to use to disable the credentials. Must be POST, PUT or DELETE", "maxLength": 10, "minLength": 0, "type": "string"}}}, "WorkflowLanguage": {"description": "Language details about a workflow version", "required": ["name"], "type": "object", "properties": {"name": {"description": "The name of the workflow language", "type": "string"}, "version": {"description": "The version of the workflow language, if any", "type": "string"}}}, "CreateWorkflowVersionRequest": {"description": "Create a new workflow version under an existing workflow root", "required": ["version"], "type": "object", "properties": {"version": {"type": "string"}, "description": {"maxLength": 256, "minLength": 0, "type": "string"}, "language": {"$ref": "#/definitions/WorkflowLanguage"}, "definition": {}, "acl": {"type": "array", "items": {"type": "string"}}, "status": {"description": "Published Status of the workflow version", "enum": ["draft", "released", "obsolete"], "type": "string"}}}, "CreateWorkflowRequest": {"description": "Create a workflow and optional version", "required": ["name"], "type": "object", "properties": {"name": {"type": "string"}, "description": {"maxLength": 256, "minLength": 0, "type": "string"}, "organization": {"maxLength": 255, "minLength": 0, "type": "string"}, "workflowVersion": {"$ref": "#/definitions/CreateWorkflowVersionRequest"}, "toolClass": {"enum": ["workflow", "commandLineTool"], "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}, "categories": {"type": "array", "items": {"type": "string"}}}}, "Workflow": {"description": "Details of a workflow", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "name": {"description": "Name of the workflow", "maxLength": 255, "minLength": 0, "type": "string"}, "organization": {"description": "Organization associated with the workflow", "maxLength": 255, "minLength": 0, "type": "string"}, "description": {"description": "Description of the workflow", "maxLength": 256, "minLength": 0, "type": "string"}, "toolClass": {"description": "Workflow type", "type": "string"}, "categories": {"description": "Categories of the workflow (Limit Max Size : 10)", "type": "array", "items": {"type": "string"}}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "UpdateWorkflowRequest": {"description": "Update an existing workflow", "type": "object", "properties": {"name": {"type": "string"}, "description": {"maxLength": 256, "minLength": 0, "type": "string"}, "organization": {"maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"type": "array", "items": {"type": "string"}}, "categories": {"type": "array", "items": {"type": "string"}}}}, "WorkflowVersionCompact": {"description": "Compact details of a Workflow version definition", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "version": {"description": "Name of the workflow version", "maxLength": 40, "minLength": 0, "type": "string"}, "category": {"description": "Category of the workflow version", "maxLength": 128, "minLength": 0, "type": "string"}, "description": {"description": "Description of the workflow version", "maxLength": 256, "minLength": 0, "type": "string"}, "language": {"$ref": "#/definitions/WorkflowLanguage"}, "status": {"description": "Published Status of the workflow version", "type": "string"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "WorkflowRunCompact": {"description": "Compact details of a workflow run", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "name": {"description": "Name of the workflow run", "maxLength": 255, "minLength": 0, "type": "string"}, "timeStarted": {"format": "date-time", "description": "The time (in UTC) the workflow run started", "type": "string"}, "timeStopped": {"format": "date-time", "description": "The time (in UTC) the Workflow Run stopped", "type": "string"}, "status": {"description": "Workflow run status", "type": "string"}, "idempotencyKey": {"type": "string"}, "statusSummary": {"description": "Workflow run status summary", "type": "string"}, "error": {"description": "Error for a failed workflow run", "type": "string"}, "errorCause": {"description": "Error cause for a failed workflow run", "type": "string"}, "workflowVersion": {"$ref": "#/definitions/WorkflowVersionCompact"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "engineParameters": {"description": "Workflow Engine Parameters", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "WorkflowRunList": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/WorkflowRunCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "WorkflowRun": {"description": "Details of a workflow run", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "name": {"description": "Name of the workflow run", "maxLength": 255, "minLength": 0, "type": "string"}, "timeStarted": {"format": "date-time", "description": "The time (in UTC) the workflow run started", "type": "string"}, "timeStopped": {"format": "date-time", "description": "The time (in UTC) the Workflow Run stopped", "type": "string"}, "status": {"description": "Workflow run status", "type": "string"}, "idempotencyKey": {"type": "string"}, "statusSummary": {"description": "Workflow run status summary", "type": "string"}, "error": {"description": "Error for a failed workflow run", "type": "string"}, "errorCause": {"description": "Error cause for a failed workflow run", "type": "string"}, "workflowVersion": {"$ref": "#/definitions/WorkflowVersionCompact"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "input": {"description": "Input to workflow run, as JSON"}, "output": {"description": "Output from workflow run, as JSON"}, "definition": {"description": "Definition of the workflow version", "type": "string"}, "engineParameters": {"description": "Workflow Engine Parameters", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "AbortWorkflowRunRequest": {"description": "Abort a workflow run", "required": ["error"], "type": "object", "properties": {"error": {"maxLength": 256, "minLength": 0, "type": "string"}, "cause": {"maxLength": 32768, "minLength": 0, "type": "string"}}}, "WorkflowRunHistoryEvent": {"description": "Information about a specific event in the workflow run history", "type": "object", "properties": {"name": {"description": "Name of the event, such as the name of the step/task for state-level events and run name for run-level events", "type": "string"}, "eventId": {"format": "int64", "description": "Identifier for the history event, if any", "type": "integer"}, "previousEventId": {"format": "int64", "description": "Identifier for any previous history event (if available)", "type": "integer"}, "eventType": {"description": "Type of history event. The associated details entry will be populated based on the type of event.", "type": "string"}, "timestamp": {"format": "date-time", "description": "Timestamp for the history event", "type": "string"}, "eventDetails": {"description": "Details for history event", "type": "object"}}}, "WorkflowRunHistoryEventList": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/WorkflowRunHistoryEvent"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "WorkflowSignal": {"type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "sendHeartbeatHref": {"format": "uri", "description": "HREF to send a heartbeat to a workflow signal", "type": "string"}, "sendSuccessResponseHref": {"format": "uri", "description": "HREF to succeed a workflow signal", "type": "string"}, "sendFailureResponseHref": {"format": "uri", "description": "HREF to fail a workflow signal", "type": "string"}, "name": {"description": "Unique name of the signal", "type": "string"}, "status": {"description": "Current status of the signal", "type": "string"}, "type": {"description": "User-defined type associated with the signal", "type": "string"}, "description": {"description": "Description of the signal", "maxLength": 256, "minLength": 0, "type": "string"}, "inputs": {"description": "Inputs defined by the originating WaitForSignal state, in JSON."}, "workflowRun": {"$ref": "#/definitions/WorkflowRunCompact"}, "timeoutSeconds": {"format": "int32", "description": "Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval.", "type": "integer"}, "result": {"description": "The result of a successful signalling action in JSON."}, "error": {"description": "The error of a failed signal.", "type": "string"}, "errorCause": {"description": "The error cause of a failed signal.", "type": "string"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "WorkflowSignalCompact": {"description": "Compact details of a signal", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "sendHeartbeatHref": {"format": "uri", "description": "HREF to send a heartbeat to a workflow signal", "type": "string"}, "sendSuccessResponseHref": {"format": "uri", "description": "HREF to succeed a workflow signal", "type": "string"}, "sendFailureResponseHref": {"format": "uri", "description": "HREF to fail a workflow signal", "type": "string"}, "name": {"description": "Unique name of the signal", "type": "string"}, "status": {"description": "Current status of the signal", "type": "string"}, "type": {"description": "User-defined type associated with the signal", "type": "string"}, "description": {"description": "Description of the signal", "maxLength": 256, "minLength": 0, "type": "string"}, "inputs": {"description": "Inputs defined by the originating WaitForSignal state, in JSON."}, "workflowRun": {"$ref": "#/definitions/WorkflowRunCompact"}, "timeoutSeconds": {"format": "int32", "description": "Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval.", "type": "integer"}, "result": {"description": "The result of a successful signalling action in JSON."}, "error": {"description": "The error of a failed signal.", "type": "string"}, "errorCause": {"description": "The error cause of a failed signal.", "type": "string"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "WorkflowSignalList": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/WorkflowSignalCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "SucceedWorkflowSignalRequest": {"type": "object", "properties": {"result": {"description": "External result of a successful signal. Must resolve to a JSON value."}}}, "FailWorkflowSignalRequest": {"description": "Fail workflow signal request", "required": ["error"], "type": "object", "properties": {"error": {"description": "Externally provided Error of a signalling action.", "type": "string"}, "cause": {"description": "Externally provided Cause of a failed signalling action.", "type": "string"}}}, "WorkflowVersion": {"description": "Details of a Workflow version definition", "type": "object", "properties": {"id": {"description": "Unique resource ID", "type": "string"}, "urn": {"description": "URN of the resource", "type": "string"}, "href": {"format": "uri", "description": "HREF to the resource", "type": "string"}, "version": {"description": "Name of the workflow version", "maxLength": 40, "minLength": 0, "type": "string"}, "category": {"description": "Category of the workflow version", "maxLength": 128, "minLength": 0, "type": "string"}, "description": {"description": "Description of the workflow version", "maxLength": 256, "minLength": 0, "type": "string"}, "language": {"$ref": "#/definitions/WorkflowLanguage"}, "status": {"description": "Published Status of the workflow version", "type": "string"}, "createdByClientId": {"description": "Client ID of the Origin Request", "type": "string"}, "definition": {"description": "Definition of the workflow version", "type": "string"}, "timeCreated": {"format": "date-time", "description": "Time (in UTC) the resource was created", "type": "string"}, "timeModified": {"format": "date-time", "description": "Time (in UTC) the resource was modified", "type": "string"}, "createdBy": {"description": "User that created the resource", "type": "string"}, "modifiedBy": {"description": "User that modified the resource", "type": "string"}, "tenantId": {"description": "Tenant ID the resource belongs to", "maxLength": 255, "minLength": 0, "type": "string"}, "acl": {"description": "Access control list of the resource", "maxLength": 128, "minLength": 0, "type": "array", "items": {"type": "string"}}}}, "UpdateWorkflowVersionRequest": {"description": "Update a workflow version definition using patch semantics", "type": "object", "properties": {"version": {"type": "string"}, "description": {"maxLength": 256, "minLength": 0, "type": "string"}, "language": {"$ref": "#/definitions/WorkflowLanguage"}, "definition": {}, "acl": {"type": "array", "items": {"type": "string"}}, "status": {"description": "New Status for workflow version", "enum": ["draft", "released", "obsolete"], "type": "string"}}}, "WorkflowVersionList": {"type": "object", "properties": {"items": {"description": "Items in paged list", "type": "array", "items": {"$ref": "#/definitions/WorkflowVersionCompact"}}, "itemCount": {"format": "int32", "description": "Number of items included in the page", "type": "integer"}, "firstPageToken": {"description": "PageToken for first paged list", "type": "string"}, "nextPageToken": {"description": "PageToken for the next paged list", "type": "string"}, "prevPageToken": {"description": "PageToken for the previous paged list", "type": "string"}, "lastPageToken": {"description": "PageToken for the last paged list. Only included when totalItemCount is listed", "type": "string"}, "totalItemCount": {"format": "int64", "description": "Total number of items in all pages. Only included when requested", "type": "integer"}, "totalPageCount": {"format": "int64", "description": "Total number of pages. Only included when totalItemCount is listed", "type": "integer"}}}, "LaunchWorkflowVersionRequest": {"type": "object", "properties": {"name": {"description": "Name of the workflow run", "maxLength": 255, "minLength": 0, "pattern": "^(?![wW][fF][rR]\\..*)(^[0-9a-zA-Z-_\\.]*$)", "type": "string"}, "input": {"description": "Input for the launched workflow run. Must resolve to a JSON object."}, "engineParameters": {"description": "Runtime options for launching workflows (currently only used for Airflow     and otherwise ignored). Must resolve to a JSON object."}}}}, "securityDefinitions": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header", "description": "Authorization header using Bearer scheme with token. Example: \"Bearer {token}\""}, "Basic": {"type": "basic", "description": "Basic Authorization"}}, "security": [{"Bearer": []}, {"Basic": []}]}