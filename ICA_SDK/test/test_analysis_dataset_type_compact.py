# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import ICA_SDK
from ICA_SDK.models.analysis_dataset_type_compact import AnalysisDatasetTypeCompact  # noqa: E501
from ICA_SDK.rest import ApiException

class TestAnalysisDatasetTypeCompact(unittest.TestCase):
    """AnalysisDatasetTypeCompact unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AnalysisDatasetTypeCompact
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = ICA_SDK.models.analysis_dataset_type_compact.AnalysisDatasetTypeCompact()  # noqa: E501
        if include_optional :
            return AnalysisDatasetTypeCompact(
                id = '0', 
                urn = '0', 
                href = '0', 
                name = '0', 
                namespace = '0', 
                display_name = '0', 
                documentation_uri = '0', 
                description_markdown = '0', 
                attribute_schema = ICA_SDK.models.attribute_schema.attributeSchema(), 
                sub_tenant_id = '0', 
                acl = [
                    '0'
                    ], 
                tenant_id = '0', 
                tenant_name = '0', 
                created_by_client_id = '0', 
                created_by = '0', 
                modified_by = '0', 
                time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                time_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else :
            return AnalysisDatasetTypeCompact(
        )

    def testAnalysisDatasetTypeCompact(self):
        """Test AnalysisDatasetTypeCompact"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
