# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RunSetupValidation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'require_unique_sample_ids_per_lane': 'bool',
        'enable_custom_prep_kits': 'bool',
        'read1_length_min': 'int',
        'read1_length_max': 'int',
        'read2_length_min': 'int',
        'read2_length_max': 'int',
        'allowed_index_strategies': 'list[str]',
        'allowed_read_types': 'list[str]',
        'allow_deviations': 'bool',
        'deviation_warning_message': 'str',
        'custom_prep_kit_warning_message': 'str',
        'skip_validate_index_cycles_with_index_sequence_lengths': 'bool'
    }

    attribute_map = {
        'require_unique_sample_ids_per_lane': 'requireUniqueSampleIdsPerLane',
        'enable_custom_prep_kits': 'enableCustomPrepKits',
        'read1_length_min': 'read1LengthMin',
        'read1_length_max': 'read1LengthMax',
        'read2_length_min': 'read2LengthMin',
        'read2_length_max': 'read2LengthMax',
        'allowed_index_strategies': 'allowedIndexStrategies',
        'allowed_read_types': 'allowedReadTypes',
        'allow_deviations': 'allowDeviations',
        'deviation_warning_message': 'deviationWarningMessage',
        'custom_prep_kit_warning_message': 'customPrepKitWarningMessage',
        'skip_validate_index_cycles_with_index_sequence_lengths': 'skipValidateIndexCyclesWithIndexSequenceLengths'
    }

    def __init__(self, require_unique_sample_ids_per_lane=None, enable_custom_prep_kits=None, read1_length_min=None, read1_length_max=None, read2_length_min=None, read2_length_max=None, allowed_index_strategies=None, allowed_read_types=None, allow_deviations=None, deviation_warning_message=None, custom_prep_kit_warning_message=None, skip_validate_index_cycles_with_index_sequence_lengths=None, local_vars_configuration=None):  # noqa: E501
        """RunSetupValidation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._require_unique_sample_ids_per_lane = None
        self._enable_custom_prep_kits = None
        self._read1_length_min = None
        self._read1_length_max = None
        self._read2_length_min = None
        self._read2_length_max = None
        self._allowed_index_strategies = None
        self._allowed_read_types = None
        self._allow_deviations = None
        self._deviation_warning_message = None
        self._custom_prep_kit_warning_message = None
        self._skip_validate_index_cycles_with_index_sequence_lengths = None
        self.discriminator = None

        if require_unique_sample_ids_per_lane is not None:
            self.require_unique_sample_ids_per_lane = require_unique_sample_ids_per_lane
        if enable_custom_prep_kits is not None:
            self.enable_custom_prep_kits = enable_custom_prep_kits
        if read1_length_min is not None:
            self.read1_length_min = read1_length_min
        if read1_length_max is not None:
            self.read1_length_max = read1_length_max
        if read2_length_min is not None:
            self.read2_length_min = read2_length_min
        if read2_length_max is not None:
            self.read2_length_max = read2_length_max
        if allowed_index_strategies is not None:
            self.allowed_index_strategies = allowed_index_strategies
        if allowed_read_types is not None:
            self.allowed_read_types = allowed_read_types
        if allow_deviations is not None:
            self.allow_deviations = allow_deviations
        if deviation_warning_message is not None:
            self.deviation_warning_message = deviation_warning_message
        if custom_prep_kit_warning_message is not None:
            self.custom_prep_kit_warning_message = custom_prep_kit_warning_message
        if skip_validate_index_cycles_with_index_sequence_lengths is not None:
            self.skip_validate_index_cycles_with_index_sequence_lengths = skip_validate_index_cycles_with_index_sequence_lengths

    @property
    def require_unique_sample_ids_per_lane(self):
        """Gets the require_unique_sample_ids_per_lane of this RunSetupValidation.  # noqa: E501

        If true, the workflow requires unique sampleId values in each lane and does not support repeated sampleIds  in a given lane with different index sequences  # noqa: E501

        :return: The require_unique_sample_ids_per_lane of this RunSetupValidation.  # noqa: E501
        :rtype: bool
        """
        return self._require_unique_sample_ids_per_lane

    @require_unique_sample_ids_per_lane.setter
    def require_unique_sample_ids_per_lane(self, require_unique_sample_ids_per_lane):
        """Sets the require_unique_sample_ids_per_lane of this RunSetupValidation.

        If true, the workflow requires unique sampleId values in each lane and does not support repeated sampleIds  in a given lane with different index sequences  # noqa: E501

        :param require_unique_sample_ids_per_lane: The require_unique_sample_ids_per_lane of this RunSetupValidation.  # noqa: E501
        :type: bool
        """

        self._require_unique_sample_ids_per_lane = require_unique_sample_ids_per_lane

    @property
    def enable_custom_prep_kits(self):
        """Gets the enable_custom_prep_kits of this RunSetupValidation.  # noqa: E501

        If true the workflow allows custom prep kits. If false, the workflow requires that all prep kits used are in  the list of compatible prep kits defined by the analysis.  # noqa: E501

        :return: The enable_custom_prep_kits of this RunSetupValidation.  # noqa: E501
        :rtype: bool
        """
        return self._enable_custom_prep_kits

    @enable_custom_prep_kits.setter
    def enable_custom_prep_kits(self, enable_custom_prep_kits):
        """Sets the enable_custom_prep_kits of this RunSetupValidation.

        If true the workflow allows custom prep kits. If false, the workflow requires that all prep kits used are in  the list of compatible prep kits defined by the analysis.  # noqa: E501

        :param enable_custom_prep_kits: The enable_custom_prep_kits of this RunSetupValidation.  # noqa: E501
        :type: bool
        """

        self._enable_custom_prep_kits = enable_custom_prep_kits

    @property
    def read1_length_min(self):
        """Gets the read1_length_min of this RunSetupValidation.  # noqa: E501

        Minimum value for read1 length  # noqa: E501

        :return: The read1_length_min of this RunSetupValidation.  # noqa: E501
        :rtype: int
        """
        return self._read1_length_min

    @read1_length_min.setter
    def read1_length_min(self, read1_length_min):
        """Sets the read1_length_min of this RunSetupValidation.

        Minimum value for read1 length  # noqa: E501

        :param read1_length_min: The read1_length_min of this RunSetupValidation.  # noqa: E501
        :type: int
        """

        self._read1_length_min = read1_length_min

    @property
    def read1_length_max(self):
        """Gets the read1_length_max of this RunSetupValidation.  # noqa: E501

        Maximum value for read1 length  # noqa: E501

        :return: The read1_length_max of this RunSetupValidation.  # noqa: E501
        :rtype: int
        """
        return self._read1_length_max

    @read1_length_max.setter
    def read1_length_max(self, read1_length_max):
        """Sets the read1_length_max of this RunSetupValidation.

        Maximum value for read1 length  # noqa: E501

        :param read1_length_max: The read1_length_max of this RunSetupValidation.  # noqa: E501
        :type: int
        """

        self._read1_length_max = read1_length_max

    @property
    def read2_length_min(self):
        """Gets the read2_length_min of this RunSetupValidation.  # noqa: E501

        Minimum value for read2 length  # noqa: E501

        :return: The read2_length_min of this RunSetupValidation.  # noqa: E501
        :rtype: int
        """
        return self._read2_length_min

    @read2_length_min.setter
    def read2_length_min(self, read2_length_min):
        """Sets the read2_length_min of this RunSetupValidation.

        Minimum value for read2 length  # noqa: E501

        :param read2_length_min: The read2_length_min of this RunSetupValidation.  # noqa: E501
        :type: int
        """

        self._read2_length_min = read2_length_min

    @property
    def read2_length_max(self):
        """Gets the read2_length_max of this RunSetupValidation.  # noqa: E501

        Maximum value for read2 length  # noqa: E501

        :return: The read2_length_max of this RunSetupValidation.  # noqa: E501
        :rtype: int
        """
        return self._read2_length_max

    @read2_length_max.setter
    def read2_length_max(self, read2_length_max):
        """Sets the read2_length_max of this RunSetupValidation.

        Maximum value for read2 length  # noqa: E501

        :param read2_length_max: The read2_length_max of this RunSetupValidation.  # noqa: E501
        :type: int
        """

        self._read2_length_max = read2_length_max

    @property
    def allowed_index_strategies(self):
        """Gets the allowed_index_strategies of this RunSetupValidation.  # noqa: E501

        Selected index strategy must match one of these values. Provided run contents must match.  # noqa: E501

        :return: The allowed_index_strategies of this RunSetupValidation.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_index_strategies

    @allowed_index_strategies.setter
    def allowed_index_strategies(self, allowed_index_strategies):
        """Sets the allowed_index_strategies of this RunSetupValidation.

        Selected index strategy must match one of these values. Provided run contents must match.  # noqa: E501

        :param allowed_index_strategies: The allowed_index_strategies of this RunSetupValidation.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NoIndex", "Single", "Dual"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(allowed_index_strategies).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allowed_index_strategies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_index_strategies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_index_strategies = allowed_index_strategies

    @property
    def allowed_read_types(self):
        """Gets the allowed_read_types of this RunSetupValidation.  # noqa: E501

        Read type selection must match one of these values.  # noqa: E501

        :return: The allowed_read_types of this RunSetupValidation.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_read_types

    @allowed_read_types.setter
    def allowed_read_types(self, allowed_read_types):
        """Sets the allowed_read_types of this RunSetupValidation.

        Read type selection must match one of these values.  # noqa: E501

        :param allowed_read_types: The allowed_read_types of this RunSetupValidation.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Single", "Paired"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(allowed_read_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allowed_read_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_read_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_read_types = allowed_read_types

    @property
    def allow_deviations(self):
        """Gets the allow_deviations of this RunSetupValidation.  # noqa: E501

        If true, the UI should allow deviations from default read length specified in prep kit,  index strategies and read types (does not apply to unique sample IDs per lane or custom kits)  # noqa: E501

        :return: The allow_deviations of this RunSetupValidation.  # noqa: E501
        :rtype: bool
        """
        return self._allow_deviations

    @allow_deviations.setter
    def allow_deviations(self, allow_deviations):
        """Sets the allow_deviations of this RunSetupValidation.

        If true, the UI should allow deviations from default read length specified in prep kit,  index strategies and read types (does not apply to unique sample IDs per lane or custom kits)  # noqa: E501

        :param allow_deviations: The allow_deviations of this RunSetupValidation.  # noqa: E501
        :type: bool
        """

        self._allow_deviations = allow_deviations

    @property
    def deviation_warning_message(self):
        """Gets the deviation_warning_message of this RunSetupValidation.  # noqa: E501

        Desired warning message when deviations are detected  # noqa: E501

        :return: The deviation_warning_message of this RunSetupValidation.  # noqa: E501
        :rtype: str
        """
        return self._deviation_warning_message

    @deviation_warning_message.setter
    def deviation_warning_message(self, deviation_warning_message):
        """Sets the deviation_warning_message of this RunSetupValidation.

        Desired warning message when deviations are detected  # noqa: E501

        :param deviation_warning_message: The deviation_warning_message of this RunSetupValidation.  # noqa: E501
        :type: str
        """

        self._deviation_warning_message = deviation_warning_message

    @property
    def custom_prep_kit_warning_message(self):
        """Gets the custom_prep_kit_warning_message of this RunSetupValidation.  # noqa: E501

        Desired warning message when using a custom kit (not part of the compatible kits)  # noqa: E501

        :return: The custom_prep_kit_warning_message of this RunSetupValidation.  # noqa: E501
        :rtype: str
        """
        return self._custom_prep_kit_warning_message

    @custom_prep_kit_warning_message.setter
    def custom_prep_kit_warning_message(self, custom_prep_kit_warning_message):
        """Sets the custom_prep_kit_warning_message of this RunSetupValidation.

        Desired warning message when using a custom kit (not part of the compatible kits)  # noqa: E501

        :param custom_prep_kit_warning_message: The custom_prep_kit_warning_message of this RunSetupValidation.  # noqa: E501
        :type: str
        """

        self._custom_prep_kit_warning_message = custom_prep_kit_warning_message

    @property
    def skip_validate_index_cycles_with_index_sequence_lengths(self):
        """Gets the skip_validate_index_cycles_with_index_sequence_lengths of this RunSetupValidation.  # noqa: E501

        If true, skip index sequence length validation against run configured index cycles  # noqa: E501

        :return: The skip_validate_index_cycles_with_index_sequence_lengths of this RunSetupValidation.  # noqa: E501
        :rtype: bool
        """
        return self._skip_validate_index_cycles_with_index_sequence_lengths

    @skip_validate_index_cycles_with_index_sequence_lengths.setter
    def skip_validate_index_cycles_with_index_sequence_lengths(self, skip_validate_index_cycles_with_index_sequence_lengths):
        """Sets the skip_validate_index_cycles_with_index_sequence_lengths of this RunSetupValidation.

        If true, skip index sequence length validation against run configured index cycles  # noqa: E501

        :param skip_validate_index_cycles_with_index_sequence_lengths: The skip_validate_index_cycles_with_index_sequence_lengths of this RunSetupValidation.  # noqa: E501
        :type: bool
        """

        self._skip_validate_index_cycles_with_index_sequence_lengths = skip_validate_index_cycles_with_index_sequence_lengths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSetupValidation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunSetupValidation):
            return True

        return self.to_dict() != other.to_dict()
