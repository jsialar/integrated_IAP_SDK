# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class InstrumentTypeInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instrument_type': 'str',
        'instrument_platform': 'str',
        'display_name': 'str',
        'run_planning_supported': 'bool',
        'cloud_orchestration_supported': 'bool',
        'max_number_of_lanes': 'int',
        'supported_analysis_locations': 'list[str]',
        'configure_flowcell_type': 'bool',
        'flow_cell_types': 'list[FlowCellType]',
        'read1_length_min': 'int',
        'read1_length_max': 'int',
        'read2_length_min': 'int',
        'read2_length_max': 'int',
        'multi_analysis_configuration': 'MultiAnalysisConfiguration'
    }

    attribute_map = {
        'instrument_type': 'instrumentType',
        'instrument_platform': 'instrumentPlatform',
        'display_name': 'displayName',
        'run_planning_supported': 'runPlanningSupported',
        'cloud_orchestration_supported': 'cloudOrchestrationSupported',
        'max_number_of_lanes': 'maxNumberOfLanes',
        'supported_analysis_locations': 'supportedAnalysisLocations',
        'configure_flowcell_type': 'configureFlowcellType',
        'flow_cell_types': 'flowCellTypes',
        'read1_length_min': 'read1LengthMin',
        'read1_length_max': 'read1LengthMax',
        'read2_length_min': 'read2LengthMin',
        'read2_length_max': 'read2LengthMax',
        'multi_analysis_configuration': 'multiAnalysisConfiguration'
    }

    def __init__(self, instrument_type=None, instrument_platform=None, display_name=None, run_planning_supported=None, cloud_orchestration_supported=None, max_number_of_lanes=None, supported_analysis_locations=None, configure_flowcell_type=None, flow_cell_types=None, read1_length_min=None, read1_length_max=None, read2_length_min=None, read2_length_max=None, multi_analysis_configuration=None, local_vars_configuration=None):  # noqa: E501
        """InstrumentTypeInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instrument_type = None
        self._instrument_platform = None
        self._display_name = None
        self._run_planning_supported = None
        self._cloud_orchestration_supported = None
        self._max_number_of_lanes = None
        self._supported_analysis_locations = None
        self._configure_flowcell_type = None
        self._flow_cell_types = None
        self._read1_length_min = None
        self._read1_length_max = None
        self._read2_length_min = None
        self._read2_length_max = None
        self._multi_analysis_configuration = None
        self.discriminator = None

        if instrument_type is not None:
            self.instrument_type = instrument_type
        if instrument_platform is not None:
            self.instrument_platform = instrument_platform
        if display_name is not None:
            self.display_name = display_name
        if run_planning_supported is not None:
            self.run_planning_supported = run_planning_supported
        if cloud_orchestration_supported is not None:
            self.cloud_orchestration_supported = cloud_orchestration_supported
        if max_number_of_lanes is not None:
            self.max_number_of_lanes = max_number_of_lanes
        if supported_analysis_locations is not None:
            self.supported_analysis_locations = supported_analysis_locations
        if configure_flowcell_type is not None:
            self.configure_flowcell_type = configure_flowcell_type
        if flow_cell_types is not None:
            self.flow_cell_types = flow_cell_types
        if read1_length_min is not None:
            self.read1_length_min = read1_length_min
        if read1_length_max is not None:
            self.read1_length_max = read1_length_max
        if read2_length_min is not None:
            self.read2_length_min = read2_length_min
        if read2_length_max is not None:
            self.read2_length_max = read2_length_max
        if multi_analysis_configuration is not None:
            self.multi_analysis_configuration = multi_analysis_configuration

    @property
    def instrument_type(self):
        """Gets the instrument_type of this InstrumentTypeInfo.  # noqa: E501

        Instrument type  # noqa: E501

        :return: The instrument_type of this InstrumentTypeInfo.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this InstrumentTypeInfo.

        Instrument type  # noqa: E501

        :param instrument_type: The instrument_type of this InstrumentTypeInfo.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def instrument_platform(self):
        """Gets the instrument_platform of this InstrumentTypeInfo.  # noqa: E501

        Instrument platform  # noqa: E501

        :return: The instrument_platform of this InstrumentTypeInfo.  # noqa: E501
        :rtype: str
        """
        return self._instrument_platform

    @instrument_platform.setter
    def instrument_platform(self, instrument_platform):
        """Sets the instrument_platform of this InstrumentTypeInfo.

        Instrument platform  # noqa: E501

        :param instrument_platform: The instrument_platform of this InstrumentTypeInfo.  # noqa: E501
        :type: str
        """

        self._instrument_platform = instrument_platform

    @property
    def display_name(self):
        """Gets the display_name of this InstrumentTypeInfo.  # noqa: E501

        Display name of instrument type  # noqa: E501

        :return: The display_name of this InstrumentTypeInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InstrumentTypeInfo.

        Display name of instrument type  # noqa: E501

        :param display_name: The display_name of this InstrumentTypeInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def run_planning_supported(self):
        """Gets the run_planning_supported of this InstrumentTypeInfo.  # noqa: E501

        Indicate if run planning is supported  # noqa: E501

        :return: The run_planning_supported of this InstrumentTypeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._run_planning_supported

    @run_planning_supported.setter
    def run_planning_supported(self, run_planning_supported):
        """Sets the run_planning_supported of this InstrumentTypeInfo.

        Indicate if run planning is supported  # noqa: E501

        :param run_planning_supported: The run_planning_supported of this InstrumentTypeInfo.  # noqa: E501
        :type: bool
        """

        self._run_planning_supported = run_planning_supported

    @property
    def cloud_orchestration_supported(self):
        """Gets the cloud_orchestration_supported of this InstrumentTypeInfo.  # noqa: E501

        Indicate if cloud orchestration is supported  # noqa: E501

        :return: The cloud_orchestration_supported of this InstrumentTypeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_orchestration_supported

    @cloud_orchestration_supported.setter
    def cloud_orchestration_supported(self, cloud_orchestration_supported):
        """Sets the cloud_orchestration_supported of this InstrumentTypeInfo.

        Indicate if cloud orchestration is supported  # noqa: E501

        :param cloud_orchestration_supported: The cloud_orchestration_supported of this InstrumentTypeInfo.  # noqa: E501
        :type: bool
        """

        self._cloud_orchestration_supported = cloud_orchestration_supported

    @property
    def max_number_of_lanes(self):
        """Gets the max_number_of_lanes of this InstrumentTypeInfo.  # noqa: E501

        Maximum Number of lanes supported by instrument type/platform  # noqa: E501

        :return: The max_number_of_lanes of this InstrumentTypeInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_lanes

    @max_number_of_lanes.setter
    def max_number_of_lanes(self, max_number_of_lanes):
        """Sets the max_number_of_lanes of this InstrumentTypeInfo.

        Maximum Number of lanes supported by instrument type/platform  # noqa: E501

        :param max_number_of_lanes: The max_number_of_lanes of this InstrumentTypeInfo.  # noqa: E501
        :type: int
        """

        self._max_number_of_lanes = max_number_of_lanes

    @property
    def supported_analysis_locations(self):
        """Gets the supported_analysis_locations of this InstrumentTypeInfo.  # noqa: E501

        Analysis Location Supported by instrument type/platform  # noqa: E501

        :return: The supported_analysis_locations of this InstrumentTypeInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_analysis_locations

    @supported_analysis_locations.setter
    def supported_analysis_locations(self, supported_analysis_locations):
        """Sets the supported_analysis_locations of this InstrumentTypeInfo.

        Analysis Location Supported by instrument type/platform  # noqa: E501

        :param supported_analysis_locations: The supported_analysis_locations of this InstrumentTypeInfo.  # noqa: E501
        :type: list[str]
        """

        self._supported_analysis_locations = supported_analysis_locations

    @property
    def configure_flowcell_type(self):
        """Gets the configure_flowcell_type of this InstrumentTypeInfo.  # noqa: E501

        Indicate if instrument allow configuring flow cell type  # noqa: E501

        :return: The configure_flowcell_type of this InstrumentTypeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._configure_flowcell_type

    @configure_flowcell_type.setter
    def configure_flowcell_type(self, configure_flowcell_type):
        """Sets the configure_flowcell_type of this InstrumentTypeInfo.

        Indicate if instrument allow configuring flow cell type  # noqa: E501

        :param configure_flowcell_type: The configure_flowcell_type of this InstrumentTypeInfo.  # noqa: E501
        :type: bool
        """

        self._configure_flowcell_type = configure_flowcell_type

    @property
    def flow_cell_types(self):
        """Gets the flow_cell_types of this InstrumentTypeInfo.  # noqa: E501

        Indicate flow cell configuration for instrument (Optional)  # noqa: E501

        :return: The flow_cell_types of this InstrumentTypeInfo.  # noqa: E501
        :rtype: list[FlowCellType]
        """
        return self._flow_cell_types

    @flow_cell_types.setter
    def flow_cell_types(self, flow_cell_types):
        """Sets the flow_cell_types of this InstrumentTypeInfo.

        Indicate flow cell configuration for instrument (Optional)  # noqa: E501

        :param flow_cell_types: The flow_cell_types of this InstrumentTypeInfo.  # noqa: E501
        :type: list[FlowCellType]
        """

        self._flow_cell_types = flow_cell_types

    @property
    def read1_length_min(self):
        """Gets the read1_length_min of this InstrumentTypeInfo.  # noqa: E501

        Minimum Read 1 Length  # noqa: E501

        :return: The read1_length_min of this InstrumentTypeInfo.  # noqa: E501
        :rtype: int
        """
        return self._read1_length_min

    @read1_length_min.setter
    def read1_length_min(self, read1_length_min):
        """Sets the read1_length_min of this InstrumentTypeInfo.

        Minimum Read 1 Length  # noqa: E501

        :param read1_length_min: The read1_length_min of this InstrumentTypeInfo.  # noqa: E501
        :type: int
        """

        self._read1_length_min = read1_length_min

    @property
    def read1_length_max(self):
        """Gets the read1_length_max of this InstrumentTypeInfo.  # noqa: E501

        Maximum Read 1 Length  # noqa: E501

        :return: The read1_length_max of this InstrumentTypeInfo.  # noqa: E501
        :rtype: int
        """
        return self._read1_length_max

    @read1_length_max.setter
    def read1_length_max(self, read1_length_max):
        """Sets the read1_length_max of this InstrumentTypeInfo.

        Maximum Read 1 Length  # noqa: E501

        :param read1_length_max: The read1_length_max of this InstrumentTypeInfo.  # noqa: E501
        :type: int
        """

        self._read1_length_max = read1_length_max

    @property
    def read2_length_min(self):
        """Gets the read2_length_min of this InstrumentTypeInfo.  # noqa: E501

        Minimum Read 2 Length  # noqa: E501

        :return: The read2_length_min of this InstrumentTypeInfo.  # noqa: E501
        :rtype: int
        """
        return self._read2_length_min

    @read2_length_min.setter
    def read2_length_min(self, read2_length_min):
        """Sets the read2_length_min of this InstrumentTypeInfo.

        Minimum Read 2 Length  # noqa: E501

        :param read2_length_min: The read2_length_min of this InstrumentTypeInfo.  # noqa: E501
        :type: int
        """

        self._read2_length_min = read2_length_min

    @property
    def read2_length_max(self):
        """Gets the read2_length_max of this InstrumentTypeInfo.  # noqa: E501

        Maximum Read 2 Length  # noqa: E501

        :return: The read2_length_max of this InstrumentTypeInfo.  # noqa: E501
        :rtype: int
        """
        return self._read2_length_max

    @read2_length_max.setter
    def read2_length_max(self, read2_length_max):
        """Sets the read2_length_max of this InstrumentTypeInfo.

        Maximum Read 2 Length  # noqa: E501

        :param read2_length_max: The read2_length_max of this InstrumentTypeInfo.  # noqa: E501
        :type: int
        """

        self._read2_length_max = read2_length_max

    @property
    def multi_analysis_configuration(self):
        """Gets the multi_analysis_configuration of this InstrumentTypeInfo.  # noqa: E501


        :return: The multi_analysis_configuration of this InstrumentTypeInfo.  # noqa: E501
        :rtype: MultiAnalysisConfiguration
        """
        return self._multi_analysis_configuration

    @multi_analysis_configuration.setter
    def multi_analysis_configuration(self, multi_analysis_configuration):
        """Sets the multi_analysis_configuration of this InstrumentTypeInfo.


        :param multi_analysis_configuration: The multi_analysis_configuration of this InstrumentTypeInfo.  # noqa: E501
        :type: MultiAnalysisConfiguration
        """

        self._multi_analysis_configuration = multi_analysis_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentTypeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstrumentTypeInfo):
            return True

        return self.to_dict() != other.to_dict()
