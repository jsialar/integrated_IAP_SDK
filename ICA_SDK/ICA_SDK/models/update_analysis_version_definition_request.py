# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateAnalysisVersionDefinitionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'supported_instrument_platform_and_types': 'list[SupportedInstrumentPlatformAndTypes]',
        'description': 'str',
        'status': 'str',
        'analysis_type': 'str',
        'skip_analysis_section': 'bool',
        'is_dragen': 'bool',
        'supported_genome_ids': 'list[str]',
        'excluded_genome_ids': 'list[str]',
        'library_prep_kit_ids': 'list[str]',
        'analysis_settings': 'object',
        'analysis_sample_settings': 'object',
        'on_submit_function': 'str',
        'on_render_function': 'str',
        'on_render_require_run_contents': 'bool',
        'settings': 'AnalysisVersionDefinitionSettings',
        'checksum': 'str',
        'acl': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'supported_instrument_platform_and_types': 'supportedInstrumentPlatformAndTypes',
        'description': 'description',
        'status': 'status',
        'analysis_type': 'analysisType',
        'skip_analysis_section': 'skipAnalysisSection',
        'is_dragen': 'isDragen',
        'supported_genome_ids': 'supportedGenomeIds',
        'excluded_genome_ids': 'excludedGenomeIds',
        'library_prep_kit_ids': 'libraryPrepKitIds',
        'analysis_settings': 'analysisSettings',
        'analysis_sample_settings': 'analysisSampleSettings',
        'on_submit_function': 'onSubmitFunction',
        'on_render_function': 'onRenderFunction',
        'on_render_require_run_contents': 'onRenderRequireRunContents',
        'settings': 'settings',
        'checksum': 'checksum',
        'acl': 'acl'
    }

    def __init__(self, version=None, supported_instrument_platform_and_types=None, description=None, status=None, analysis_type=None, skip_analysis_section=None, is_dragen=None, supported_genome_ids=None, excluded_genome_ids=None, library_prep_kit_ids=None, analysis_settings=None, analysis_sample_settings=None, on_submit_function=None, on_render_function=None, on_render_require_run_contents=None, settings=None, checksum=None, acl=None, local_vars_configuration=None):  # noqa: E501
        """UpdateAnalysisVersionDefinitionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._supported_instrument_platform_and_types = None
        self._description = None
        self._status = None
        self._analysis_type = None
        self._skip_analysis_section = None
        self._is_dragen = None
        self._supported_genome_ids = None
        self._excluded_genome_ids = None
        self._library_prep_kit_ids = None
        self._analysis_settings = None
        self._analysis_sample_settings = None
        self._on_submit_function = None
        self._on_render_function = None
        self._on_render_require_run_contents = None
        self._settings = None
        self._checksum = None
        self._acl = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if supported_instrument_platform_and_types is not None:
            self.supported_instrument_platform_and_types = supported_instrument_platform_and_types
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if analysis_type is not None:
            self.analysis_type = analysis_type
        if skip_analysis_section is not None:
            self.skip_analysis_section = skip_analysis_section
        if is_dragen is not None:
            self.is_dragen = is_dragen
        if supported_genome_ids is not None:
            self.supported_genome_ids = supported_genome_ids
        if excluded_genome_ids is not None:
            self.excluded_genome_ids = excluded_genome_ids
        if library_prep_kit_ids is not None:
            self.library_prep_kit_ids = library_prep_kit_ids
        if analysis_settings is not None:
            self.analysis_settings = analysis_settings
        if analysis_sample_settings is not None:
            self.analysis_sample_settings = analysis_sample_settings
        if on_submit_function is not None:
            self.on_submit_function = on_submit_function
        if on_render_function is not None:
            self.on_render_function = on_render_function
        if on_render_require_run_contents is not None:
            self.on_render_require_run_contents = on_render_require_run_contents
        if settings is not None:
            self.settings = settings
        if checksum is not None:
            self.checksum = checksum
        if acl is not None:
            self.acl = acl

    @property
    def version(self):
        """Gets the version of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Version of the analysis version definition  # noqa: E501

        :return: The version of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateAnalysisVersionDefinitionRequest.

        Version of the analysis version definition  # noqa: E501

        :param version: The version of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 50):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) < 0):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `0`")  # noqa: E501

        self._version = version

    @property
    def supported_instrument_platform_and_types(self):
        """Gets the supported_instrument_platform_and_types of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        The instrument platform and instrument type supported by the analysis  If not specified, support all platforms and types  # noqa: E501

        :return: The supported_instrument_platform_and_types of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: list[SupportedInstrumentPlatformAndTypes]
        """
        return self._supported_instrument_platform_and_types

    @supported_instrument_platform_and_types.setter
    def supported_instrument_platform_and_types(self, supported_instrument_platform_and_types):
        """Sets the supported_instrument_platform_and_types of this UpdateAnalysisVersionDefinitionRequest.

        The instrument platform and instrument type supported by the analysis  If not specified, support all platforms and types  # noqa: E501

        :param supported_instrument_platform_and_types: The supported_instrument_platform_and_types of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: list[SupportedInstrumentPlatformAndTypes]
        """

        self._supported_instrument_platform_and_types = supported_instrument_platform_and_types

    @property
    def description(self):
        """Gets the description of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Description of this version of analysis definition  # noqa: E501

        :return: The description of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAnalysisVersionDefinitionRequest.

        Description of this version of analysis definition  # noqa: E501

        :param description: The description of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def status(self):
        """Gets the status of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Status of the analysis version definition  # noqa: E501

        :return: The status of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAnalysisVersionDefinitionRequest.

        Status of the analysis version definition  # noqa: E501

        :param status: The status of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Archived"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def analysis_type(self):
        """Gets the analysis_type of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Analysis type of this version  # noqa: E501

        :return: The analysis_type of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type):
        """Sets the analysis_type of this UpdateAnalysisVersionDefinitionRequest.

        Analysis type of this version  # noqa: E501

        :param analysis_type: The analysis_type of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Local", "CloudRun", "CloudRunSample", "EdgeRun", "EdgeRunSample"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and analysis_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `analysis_type` ({0}), must be one of {1}"  # noqa: E501
                .format(analysis_type, allowed_values)
            )

        self._analysis_type = analysis_type

    @property
    def skip_analysis_section(self):
        """Gets the skip_analysis_section of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Controls whether the sample sheet has an analysis-specific section for this analysis. If true, do not  include the analysis-specific section.  # noqa: E501

        :return: The skip_analysis_section of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_analysis_section

    @skip_analysis_section.setter
    def skip_analysis_section(self, skip_analysis_section):
        """Sets the skip_analysis_section of this UpdateAnalysisVersionDefinitionRequest.

        Controls whether the sample sheet has an analysis-specific section for this analysis. If true, do not  include the analysis-specific section.  # noqa: E501

        :param skip_analysis_section: The skip_analysis_section of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._skip_analysis_section = skip_analysis_section

    @property
    def is_dragen(self):
        """Gets the is_dragen of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Analysis type of this version of the analysis definition  # noqa: E501

        :return: The is_dragen of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_dragen

    @is_dragen.setter
    def is_dragen(self, is_dragen):
        """Sets the is_dragen of this UpdateAnalysisVersionDefinitionRequest.

        Analysis type of this version of the analysis definition  # noqa: E501

        :param is_dragen: The is_dragen of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._is_dragen = is_dragen

    @property
    def supported_genome_ids(self):
        """Gets the supported_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Array of genome IDs that are supported by this version of analysis definition  # noqa: E501

        :return: The supported_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_genome_ids

    @supported_genome_ids.setter
    def supported_genome_ids(self, supported_genome_ids):
        """Sets the supported_genome_ids of this UpdateAnalysisVersionDefinitionRequest.

        Array of genome IDs that are supported by this version of analysis definition  # noqa: E501

        :param supported_genome_ids: The supported_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._supported_genome_ids = supported_genome_ids

    @property
    def excluded_genome_ids(self):
        """Gets the excluded_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Array of genome IDs that are not supported by this version of analysis definition  # noqa: E501

        :return: The excluded_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_genome_ids

    @excluded_genome_ids.setter
    def excluded_genome_ids(self, excluded_genome_ids):
        """Sets the excluded_genome_ids of this UpdateAnalysisVersionDefinitionRequest.

        Array of genome IDs that are not supported by this version of analysis definition  # noqa: E501

        :param excluded_genome_ids: The excluded_genome_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._excluded_genome_ids = excluded_genome_ids

    @property
    def library_prep_kit_ids(self):
        """Gets the library_prep_kit_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Array of library prep kit IDs that are compatible with this version of analysis definition  # noqa: E501

        :return: The library_prep_kit_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._library_prep_kit_ids

    @library_prep_kit_ids.setter
    def library_prep_kit_ids(self, library_prep_kit_ids):
        """Sets the library_prep_kit_ids of this UpdateAnalysisVersionDefinitionRequest.

        Array of library prep kit IDs that are compatible with this version of analysis definition  # noqa: E501

        :param library_prep_kit_ids: The library_prep_kit_ids of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._library_prep_kit_ids = library_prep_kit_ids

    @property
    def analysis_settings(self):
        """Gets the analysis_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Settings for the analysis (at the global analysis level)  # noqa: E501

        :return: The analysis_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._analysis_settings

    @analysis_settings.setter
    def analysis_settings(self, analysis_settings):
        """Sets the analysis_settings of this UpdateAnalysisVersionDefinitionRequest.

        Settings for the analysis (at the global analysis level)  # noqa: E501

        :param analysis_settings: The analysis_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: object
        """

        self._analysis_settings = analysis_settings

    @property
    def analysis_sample_settings(self):
        """Gets the analysis_sample_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Per-sample settings for the analysis (at the per-sample level)  # noqa: E501

        :return: The analysis_sample_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: object
        """
        return self._analysis_sample_settings

    @analysis_sample_settings.setter
    def analysis_sample_settings(self, analysis_sample_settings):
        """Sets the analysis_sample_settings of this UpdateAnalysisVersionDefinitionRequest.

        Per-sample settings for the analysis (at the per-sample level)  # noqa: E501

        :param analysis_sample_settings: The analysis_sample_settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: object
        """

        self._analysis_sample_settings = analysis_sample_settings

    @property
    def on_submit_function(self):
        """Gets the on_submit_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Logic for validating and transforming AnalysisSettings and AnalysisSampleSettings  # noqa: E501

        :return: The on_submit_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._on_submit_function

    @on_submit_function.setter
    def on_submit_function(self, on_submit_function):
        """Sets the on_submit_function of this UpdateAnalysisVersionDefinitionRequest.

        Logic for validating and transforming AnalysisSettings and AnalysisSampleSettings  # noqa: E501

        :param on_submit_function: The on_submit_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                on_submit_function is not None and len(on_submit_function) > 100000):
            raise ValueError("Invalid value for `on_submit_function`, length must be less than or equal to `100000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                on_submit_function is not None and len(on_submit_function) < 0):
            raise ValueError("Invalid value for `on_submit_function`, length must be greater than or equal to `0`")  # noqa: E501

        self._on_submit_function = on_submit_function

    @property
    def on_render_function(self):
        """Gets the on_render_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Logic for dynamically rendering AVD settings and AVD setting configurations  # noqa: E501

        :return: The on_render_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._on_render_function

    @on_render_function.setter
    def on_render_function(self, on_render_function):
        """Sets the on_render_function of this UpdateAnalysisVersionDefinitionRequest.

        Logic for dynamically rendering AVD settings and AVD setting configurations  # noqa: E501

        :param on_render_function: The on_render_function of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                on_render_function is not None and len(on_render_function) > 100000):
            raise ValueError("Invalid value for `on_render_function`, length must be less than or equal to `100000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                on_render_function is not None and len(on_render_function) < 0):
            raise ValueError("Invalid value for `on_render_function`, length must be greater than or equal to `0`")  # noqa: E501

        self._on_render_function = on_render_function

    @property
    def on_render_require_run_contents(self):
        """Gets the on_render_require_run_contents of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Defines whether the analysis fields should be changed based on input of run contents  This is to avoid unnecessary huge input from UI that is not really needed during rendering  # noqa: E501

        :return: The on_render_require_run_contents of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._on_render_require_run_contents

    @on_render_require_run_contents.setter
    def on_render_require_run_contents(self, on_render_require_run_contents):
        """Sets the on_render_require_run_contents of this UpdateAnalysisVersionDefinitionRequest.

        Defines whether the analysis fields should be changed based on input of run contents  This is to avoid unnecessary huge input from UI that is not really needed during rendering  # noqa: E501

        :param on_render_require_run_contents: The on_render_require_run_contents of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._on_render_require_run_contents = on_render_require_run_contents

    @property
    def settings(self):
        """Gets the settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501


        :return: The settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: AnalysisVersionDefinitionSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdateAnalysisVersionDefinitionRequest.


        :param settings: The settings of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: AnalysisVersionDefinitionSettings
        """

        self._settings = settings

    @property
    def checksum(self):
        """Gets the checksum of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501

        Checksum of AnalysisVersionDefinition  # noqa: E501

        :return: The checksum of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this UpdateAnalysisVersionDefinitionRequest.

        Checksum of AnalysisVersionDefinition  # noqa: E501

        :param checksum: The checksum of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 0):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `0`")  # noqa: E501

        self._checksum = checksum

    @property
    def acl(self):
        """Gets the acl of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501


        :return: The acl of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this UpdateAnalysisVersionDefinitionRequest.


        :param acl: The acl of this UpdateAnalysisVersionDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAnalysisVersionDefinitionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateAnalysisVersionDefinitionRequest):
            return True

        return self.to_dict() != other.to_dict()
