# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class DirectUploadCredentials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prefix': 'str',
        'volume_name': 'str',
        'expiration_date': 'datetime',
        'file_creation_api_path': 'str',
        'file_upload_api_path': 'str',
        'upload_id': 'str'
    }

    attribute_map = {
        'prefix': 'prefix',
        'volume_name': 'volumeName',
        'expiration_date': 'expirationDate',
        'file_creation_api_path': 'fileCreationApiPath',
        'file_upload_api_path': 'fileUploadApiPath',
        'upload_id': 'uploadId'
    }

    def __init__(self, prefix=None, volume_name=None, expiration_date=None, file_creation_api_path=None, file_upload_api_path=None, upload_id=None, local_vars_configuration=None):  # noqa: E501
        """DirectUploadCredentials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prefix = None
        self._volume_name = None
        self._expiration_date = None
        self._file_creation_api_path = None
        self._file_upload_api_path = None
        self._upload_id = None
        self.discriminator = None

        if prefix is not None:
            self.prefix = prefix
        if volume_name is not None:
            self.volume_name = volume_name
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if file_creation_api_path is not None:
            self.file_creation_api_path = file_creation_api_path
        if file_upload_api_path is not None:
            self.file_upload_api_path = file_upload_api_path
        if upload_id is not None:
            self.upload_id = upload_id

    @property
    def prefix(self):
        """Gets the prefix of this DirectUploadCredentials.  # noqa: E501

        Optional path prefix for all file uploads using these credentials. Should be prepended to relative path  # noqa: E501

        :return: The prefix of this DirectUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DirectUploadCredentials.

        Optional path prefix for all file uploads using these credentials. Should be prepended to relative path  # noqa: E501

        :param prefix: The prefix of this DirectUploadCredentials.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def volume_name(self):
        """Gets the volume_name of this DirectUploadCredentials.  # noqa: E501

        Name of the volume for the file uploads  # noqa: E501

        :return: The volume_name of this DirectUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this DirectUploadCredentials.

        Name of the volume for the file uploads  # noqa: E501

        :param volume_name: The volume_name of this DirectUploadCredentials.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DirectUploadCredentials.  # noqa: E501

        Optional expiration date for the credentials or null if they don't expire  # noqa: E501

        :return: The expiration_date of this DirectUploadCredentials.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DirectUploadCredentials.

        Optional expiration date for the credentials or null if they don't expire  # noqa: E501

        :param expiration_date: The expiration_date of this DirectUploadCredentials.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def file_creation_api_path(self):
        """Gets the file_creation_api_path of this DirectUploadCredentials.  # noqa: E501

        API path for the file creation endpoint (relative to base URL)  # noqa: E501

        :return: The file_creation_api_path of this DirectUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._file_creation_api_path

    @file_creation_api_path.setter
    def file_creation_api_path(self, file_creation_api_path):
        """Sets the file_creation_api_path of this DirectUploadCredentials.

        API path for the file creation endpoint (relative to base URL)  # noqa: E501

        :param file_creation_api_path: The file_creation_api_path of this DirectUploadCredentials.  # noqa: E501
        :type: str
        """

        self._file_creation_api_path = file_creation_api_path

    @property
    def file_upload_api_path(self):
        """Gets the file_upload_api_path of this DirectUploadCredentials.  # noqa: E501

        API path for the file upload endpoint (relative to base URL)  # noqa: E501

        :return: The file_upload_api_path of this DirectUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._file_upload_api_path

    @file_upload_api_path.setter
    def file_upload_api_path(self, file_upload_api_path):
        """Sets the file_upload_api_path of this DirectUploadCredentials.

        API path for the file upload endpoint (relative to base URL)  # noqa: E501

        :param file_upload_api_path: The file_upload_api_path of this DirectUploadCredentials.  # noqa: E501
        :type: str
        """

        self._file_upload_api_path = file_upload_api_path

    @property
    def upload_id(self):
        """Gets the upload_id of this DirectUploadCredentials.  # noqa: E501

        File upload id, used to upload file  # noqa: E501

        :return: The upload_id of this DirectUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this DirectUploadCredentials.

        File upload id, used to upload file  # noqa: E501

        :param upload_id: The upload_id of this DirectUploadCredentials.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectUploadCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DirectUploadCredentials):
            return True

        return self.to_dict() != other.to_dict()
