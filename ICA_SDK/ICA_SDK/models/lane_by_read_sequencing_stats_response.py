# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class LaneByReadSequencingStatsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lane_number': 'int',
        'read_number': 'int',
        'tile_count': 'int',
        'density': 'float',
        'density_deviation': 'float',
        'percent_pf': 'float',
        'percent_pf_deviation': 'float',
        'phasing': 'float',
        'pre_phasing': 'float',
        'reads': 'int',
        'reads_pf': 'int',
        'percent_gt_q30': 'float',
        'percent_gt_q30_last10_cycles': 'float',
        '_yield': 'float',
        'min_cycle_called': 'int',
        'max_cycle_called': 'int',
        'percent_aligned': 'float',
        'percent_aligned_deviation': 'float',
        'error_rate': 'float',
        'error_rate_deviation': 'float',
        'error_rate35': 'float',
        'error_rate35_deviation': 'float',
        'error_rate50': 'float',
        'error_rate50_deviation': 'float',
        'error_rate75': 'float',
        'error_rate75_deviation': 'float',
        'error_rate100': 'float',
        'error_rate100_deviation': 'float',
        'intensity_cycle1': 'float',
        'intensity_cycle1_deviation': 'float',
        'min_cycle_error': 'int',
        'max_cycle_error': 'int',
        'phasing_slope': 'float',
        'phasing_offset': 'float',
        'pre_phasing_slope': 'float',
        'pre_phasing_offset': 'float',
        'percent_no_calls': 'float',
        'cluster_density': 'float',
        'occupancy': 'float'
    }

    attribute_map = {
        'lane_number': 'laneNumber',
        'read_number': 'readNumber',
        'tile_count': 'tileCount',
        'density': 'density',
        'density_deviation': 'densityDeviation',
        'percent_pf': 'percentPf',
        'percent_pf_deviation': 'percentPfDeviation',
        'phasing': 'phasing',
        'pre_phasing': 'prePhasing',
        'reads': 'reads',
        'reads_pf': 'readsPf',
        'percent_gt_q30': 'percentGtQ30',
        'percent_gt_q30_last10_cycles': 'percentGtQ30Last10Cycles',
        '_yield': 'yield',
        'min_cycle_called': 'minCycleCalled',
        'max_cycle_called': 'maxCycleCalled',
        'percent_aligned': 'percentAligned',
        'percent_aligned_deviation': 'percentAlignedDeviation',
        'error_rate': 'errorRate',
        'error_rate_deviation': 'errorRateDeviation',
        'error_rate35': 'errorRate35',
        'error_rate35_deviation': 'errorRate35Deviation',
        'error_rate50': 'errorRate50',
        'error_rate50_deviation': 'errorRate50Deviation',
        'error_rate75': 'errorRate75',
        'error_rate75_deviation': 'errorRate75Deviation',
        'error_rate100': 'errorRate100',
        'error_rate100_deviation': 'errorRate100Deviation',
        'intensity_cycle1': 'intensityCycle1',
        'intensity_cycle1_deviation': 'intensityCycle1Deviation',
        'min_cycle_error': 'minCycleError',
        'max_cycle_error': 'maxCycleError',
        'phasing_slope': 'phasingSlope',
        'phasing_offset': 'phasingOffset',
        'pre_phasing_slope': 'prePhasingSlope',
        'pre_phasing_offset': 'prePhasingOffset',
        'percent_no_calls': 'percentNoCalls',
        'cluster_density': 'clusterDensity',
        'occupancy': 'occupancy'
    }

    def __init__(self, lane_number=None, read_number=None, tile_count=None, density=None, density_deviation=None, percent_pf=None, percent_pf_deviation=None, phasing=None, pre_phasing=None, reads=None, reads_pf=None, percent_gt_q30=None, percent_gt_q30_last10_cycles=None, _yield=None, min_cycle_called=None, max_cycle_called=None, percent_aligned=None, percent_aligned_deviation=None, error_rate=None, error_rate_deviation=None, error_rate35=None, error_rate35_deviation=None, error_rate50=None, error_rate50_deviation=None, error_rate75=None, error_rate75_deviation=None, error_rate100=None, error_rate100_deviation=None, intensity_cycle1=None, intensity_cycle1_deviation=None, min_cycle_error=None, max_cycle_error=None, phasing_slope=None, phasing_offset=None, pre_phasing_slope=None, pre_phasing_offset=None, percent_no_calls=None, cluster_density=None, occupancy=None, local_vars_configuration=None):  # noqa: E501
        """LaneByReadSequencingStatsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lane_number = None
        self._read_number = None
        self._tile_count = None
        self._density = None
        self._density_deviation = None
        self._percent_pf = None
        self._percent_pf_deviation = None
        self._phasing = None
        self._pre_phasing = None
        self._reads = None
        self._reads_pf = None
        self._percent_gt_q30 = None
        self._percent_gt_q30_last10_cycles = None
        self.__yield = None
        self._min_cycle_called = None
        self._max_cycle_called = None
        self._percent_aligned = None
        self._percent_aligned_deviation = None
        self._error_rate = None
        self._error_rate_deviation = None
        self._error_rate35 = None
        self._error_rate35_deviation = None
        self._error_rate50 = None
        self._error_rate50_deviation = None
        self._error_rate75 = None
        self._error_rate75_deviation = None
        self._error_rate100 = None
        self._error_rate100_deviation = None
        self._intensity_cycle1 = None
        self._intensity_cycle1_deviation = None
        self._min_cycle_error = None
        self._max_cycle_error = None
        self._phasing_slope = None
        self._phasing_offset = None
        self._pre_phasing_slope = None
        self._pre_phasing_offset = None
        self._percent_no_calls = None
        self._cluster_density = None
        self._occupancy = None
        self.discriminator = None

        if lane_number is not None:
            self.lane_number = lane_number
        if read_number is not None:
            self.read_number = read_number
        if tile_count is not None:
            self.tile_count = tile_count
        if density is not None:
            self.density = density
        if density_deviation is not None:
            self.density_deviation = density_deviation
        if percent_pf is not None:
            self.percent_pf = percent_pf
        if percent_pf_deviation is not None:
            self.percent_pf_deviation = percent_pf_deviation
        if phasing is not None:
            self.phasing = phasing
        if pre_phasing is not None:
            self.pre_phasing = pre_phasing
        if reads is not None:
            self.reads = reads
        if reads_pf is not None:
            self.reads_pf = reads_pf
        if percent_gt_q30 is not None:
            self.percent_gt_q30 = percent_gt_q30
        if percent_gt_q30_last10_cycles is not None:
            self.percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles
        if _yield is not None:
            self._yield = _yield
        if min_cycle_called is not None:
            self.min_cycle_called = min_cycle_called
        if max_cycle_called is not None:
            self.max_cycle_called = max_cycle_called
        if percent_aligned is not None:
            self.percent_aligned = percent_aligned
        if percent_aligned_deviation is not None:
            self.percent_aligned_deviation = percent_aligned_deviation
        if error_rate is not None:
            self.error_rate = error_rate
        if error_rate_deviation is not None:
            self.error_rate_deviation = error_rate_deviation
        if error_rate35 is not None:
            self.error_rate35 = error_rate35
        if error_rate35_deviation is not None:
            self.error_rate35_deviation = error_rate35_deviation
        if error_rate50 is not None:
            self.error_rate50 = error_rate50
        if error_rate50_deviation is not None:
            self.error_rate50_deviation = error_rate50_deviation
        if error_rate75 is not None:
            self.error_rate75 = error_rate75
        if error_rate75_deviation is not None:
            self.error_rate75_deviation = error_rate75_deviation
        if error_rate100 is not None:
            self.error_rate100 = error_rate100
        if error_rate100_deviation is not None:
            self.error_rate100_deviation = error_rate100_deviation
        if intensity_cycle1 is not None:
            self.intensity_cycle1 = intensity_cycle1
        if intensity_cycle1_deviation is not None:
            self.intensity_cycle1_deviation = intensity_cycle1_deviation
        if min_cycle_error is not None:
            self.min_cycle_error = min_cycle_error
        if max_cycle_error is not None:
            self.max_cycle_error = max_cycle_error
        if phasing_slope is not None:
            self.phasing_slope = phasing_slope
        if phasing_offset is not None:
            self.phasing_offset = phasing_offset
        if pre_phasing_slope is not None:
            self.pre_phasing_slope = pre_phasing_slope
        if pre_phasing_offset is not None:
            self.pre_phasing_offset = pre_phasing_offset
        if percent_no_calls is not None:
            self.percent_no_calls = percent_no_calls
        if cluster_density is not None:
            self.cluster_density = cluster_density
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def lane_number(self):
        """Gets the lane_number of this LaneByReadSequencingStatsResponse.  # noqa: E501

        LaneNumber of the LaneByReadSequencingStats  # noqa: E501

        :return: The lane_number of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this LaneByReadSequencingStatsResponse.

        LaneNumber of the LaneByReadSequencingStats  # noqa: E501

        :param lane_number: The lane_number of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._lane_number = lane_number

    @property
    def read_number(self):
        """Gets the read_number of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ReadNumber of the LaneByReadSequencingStats  # noqa: E501

        :return: The read_number of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._read_number

    @read_number.setter
    def read_number(self, read_number):
        """Sets the read_number of this LaneByReadSequencingStatsResponse.

        ReadNumber of the LaneByReadSequencingStats  # noqa: E501

        :param read_number: The read_number of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._read_number = read_number

    @property
    def tile_count(self):
        """Gets the tile_count of this LaneByReadSequencingStatsResponse.  # noqa: E501

        TileCount of the LaneByReadSequencingStats  # noqa: E501

        :return: The tile_count of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._tile_count

    @tile_count.setter
    def tile_count(self, tile_count):
        """Sets the tile_count of this LaneByReadSequencingStatsResponse.

        TileCount of the LaneByReadSequencingStats  # noqa: E501

        :param tile_count: The tile_count of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._tile_count = tile_count

    @property
    def density(self):
        """Gets the density of this LaneByReadSequencingStatsResponse.  # noqa: E501

        Density of the LaneByReadSequencingStats  # noqa: E501

        :return: The density of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this LaneByReadSequencingStatsResponse.

        Density of the LaneByReadSequencingStats  # noqa: E501

        :param density: The density of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def density_deviation(self):
        """Gets the density_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        DensityDeviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The density_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._density_deviation

    @density_deviation.setter
    def density_deviation(self, density_deviation):
        """Sets the density_deviation of this LaneByReadSequencingStatsResponse.

        DensityDeviation of the LaneByReadSequencingStats  # noqa: E501

        :param density_deviation: The density_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._density_deviation = density_deviation

    @property
    def percent_pf(self):
        """Gets the percent_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentPf of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_pf

    @percent_pf.setter
    def percent_pf(self, percent_pf):
        """Sets the percent_pf of this LaneByReadSequencingStatsResponse.

        PercentPf of the LaneByReadSequencingStats  # noqa: E501

        :param percent_pf: The percent_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_pf = percent_pf

    @property
    def percent_pf_deviation(self):
        """Gets the percent_pf_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentPfDeviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_pf_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_pf_deviation

    @percent_pf_deviation.setter
    def percent_pf_deviation(self, percent_pf_deviation):
        """Sets the percent_pf_deviation of this LaneByReadSequencingStatsResponse.

        PercentPfDeviation of the LaneByReadSequencingStats  # noqa: E501

        :param percent_pf_deviation: The percent_pf_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_pf_deviation = percent_pf_deviation

    @property
    def phasing(self):
        """Gets the phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501

        Phasing of the LaneByReadSequencingStats  # noqa: E501

        :return: The phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._phasing

    @phasing.setter
    def phasing(self, phasing):
        """Sets the phasing of this LaneByReadSequencingStatsResponse.

        Phasing of the LaneByReadSequencingStats  # noqa: E501

        :param phasing: The phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._phasing = phasing

    @property
    def pre_phasing(self):
        """Gets the pre_phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PrePhasing of the LaneByReadSequencingStats  # noqa: E501

        :return: The pre_phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing

    @pre_phasing.setter
    def pre_phasing(self, pre_phasing):
        """Sets the pre_phasing of this LaneByReadSequencingStatsResponse.

        PrePhasing of the LaneByReadSequencingStats  # noqa: E501

        :param pre_phasing: The pre_phasing of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._pre_phasing = pre_phasing

    @property
    def reads(self):
        """Gets the reads of this LaneByReadSequencingStatsResponse.  # noqa: E501

        Reads of the LaneByReadSequencingStats  # noqa: E501

        :return: The reads of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._reads

    @reads.setter
    def reads(self, reads):
        """Sets the reads of this LaneByReadSequencingStatsResponse.

        Reads of the LaneByReadSequencingStats  # noqa: E501

        :param reads: The reads of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._reads = reads

    @property
    def reads_pf(self):
        """Gets the reads_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ReadsPf of the LaneByReadSequencingStats  # noqa: E501

        :return: The reads_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._reads_pf

    @reads_pf.setter
    def reads_pf(self, reads_pf):
        """Sets the reads_pf of this LaneByReadSequencingStatsResponse.

        ReadsPf of the LaneByReadSequencingStats  # noqa: E501

        :param reads_pf: The reads_pf of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._reads_pf = reads_pf

    @property
    def percent_gt_q30(self):
        """Gets the percent_gt_q30 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentGtQ30 of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_gt_q30 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30

    @percent_gt_q30.setter
    def percent_gt_q30(self, percent_gt_q30):
        """Sets the percent_gt_q30 of this LaneByReadSequencingStatsResponse.

        PercentGtQ30 of the LaneByReadSequencingStats  # noqa: E501

        :param percent_gt_q30: The percent_gt_q30 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30 = percent_gt_q30

    @property
    def percent_gt_q30_last10_cycles(self):
        """Gets the percent_gt_q30_last10_cycles of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentGtQ30Last10Cycles of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_gt_q30_last10_cycles of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_last10_cycles

    @percent_gt_q30_last10_cycles.setter
    def percent_gt_q30_last10_cycles(self, percent_gt_q30_last10_cycles):
        """Sets the percent_gt_q30_last10_cycles of this LaneByReadSequencingStatsResponse.

        PercentGtQ30Last10Cycles of the LaneByReadSequencingStats  # noqa: E501

        :param percent_gt_q30_last10_cycles: The percent_gt_q30_last10_cycles of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles

    @property
    def _yield(self):
        """Gets the _yield of this LaneByReadSequencingStatsResponse.  # noqa: E501

        Yield of the LaneByReadSequencingStats  # noqa: E501

        :return: The _yield of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this LaneByReadSequencingStatsResponse.

        Yield of the LaneByReadSequencingStats  # noqa: E501

        :param _yield: The _yield of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def min_cycle_called(self):
        """Gets the min_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501

        MinCycleCalled of the LaneByReadSequencingStats  # noqa: E501

        :return: The min_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._min_cycle_called

    @min_cycle_called.setter
    def min_cycle_called(self, min_cycle_called):
        """Sets the min_cycle_called of this LaneByReadSequencingStatsResponse.

        MinCycleCalled of the LaneByReadSequencingStats  # noqa: E501

        :param min_cycle_called: The min_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._min_cycle_called = min_cycle_called

    @property
    def max_cycle_called(self):
        """Gets the max_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501

        MaxCycleCalled of the LaneByReadSequencingStats  # noqa: E501

        :return: The max_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_called

    @max_cycle_called.setter
    def max_cycle_called(self, max_cycle_called):
        """Sets the max_cycle_called of this LaneByReadSequencingStatsResponse.

        MaxCycleCalled of the LaneByReadSequencingStats  # noqa: E501

        :param max_cycle_called: The max_cycle_called of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._max_cycle_called = max_cycle_called

    @property
    def percent_aligned(self):
        """Gets the percent_aligned of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentAligned of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_aligned of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_aligned

    @percent_aligned.setter
    def percent_aligned(self, percent_aligned):
        """Sets the percent_aligned of this LaneByReadSequencingStatsResponse.

        PercentAligned of the LaneByReadSequencingStats  # noqa: E501

        :param percent_aligned: The percent_aligned of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_aligned = percent_aligned

    @property
    def percent_aligned_deviation(self):
        """Gets the percent_aligned_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentAlignedDeviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_aligned_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_aligned_deviation

    @percent_aligned_deviation.setter
    def percent_aligned_deviation(self, percent_aligned_deviation):
        """Sets the percent_aligned_deviation of this LaneByReadSequencingStatsResponse.

        PercentAlignedDeviation of the LaneByReadSequencingStats  # noqa: E501

        :param percent_aligned_deviation: The percent_aligned_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_aligned_deviation = percent_aligned_deviation

    @property
    def error_rate(self):
        """Gets the error_rate of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this LaneByReadSequencingStatsResponse.

        ErrorRate of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate: The error_rate of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def error_rate_deviation(self):
        """Gets the error_rate_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRateDeviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate_deviation

    @error_rate_deviation.setter
    def error_rate_deviation(self, error_rate_deviation):
        """Sets the error_rate_deviation of this LaneByReadSequencingStatsResponse.

        ErrorRateDeviation of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate_deviation: The error_rate_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate_deviation = error_rate_deviation

    @property
    def error_rate35(self):
        """Gets the error_rate35 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate35 of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate35 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate35

    @error_rate35.setter
    def error_rate35(self, error_rate35):
        """Sets the error_rate35 of this LaneByReadSequencingStatsResponse.

        ErrorRate35 of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate35: The error_rate35 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate35 = error_rate35

    @property
    def error_rate35_deviation(self):
        """Gets the error_rate35_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate35Deviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate35_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate35_deviation

    @error_rate35_deviation.setter
    def error_rate35_deviation(self, error_rate35_deviation):
        """Sets the error_rate35_deviation of this LaneByReadSequencingStatsResponse.

        ErrorRate35Deviation of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate35_deviation: The error_rate35_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate35_deviation = error_rate35_deviation

    @property
    def error_rate50(self):
        """Gets the error_rate50 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate50 of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate50 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate50

    @error_rate50.setter
    def error_rate50(self, error_rate50):
        """Sets the error_rate50 of this LaneByReadSequencingStatsResponse.

        ErrorRate50 of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate50: The error_rate50 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate50 = error_rate50

    @property
    def error_rate50_deviation(self):
        """Gets the error_rate50_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate50Deviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate50_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate50_deviation

    @error_rate50_deviation.setter
    def error_rate50_deviation(self, error_rate50_deviation):
        """Sets the error_rate50_deviation of this LaneByReadSequencingStatsResponse.

        ErrorRate50Deviation of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate50_deviation: The error_rate50_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate50_deviation = error_rate50_deviation

    @property
    def error_rate75(self):
        """Gets the error_rate75 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate75 of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate75 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate75

    @error_rate75.setter
    def error_rate75(self, error_rate75):
        """Sets the error_rate75 of this LaneByReadSequencingStatsResponse.

        ErrorRate75 of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate75: The error_rate75 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate75 = error_rate75

    @property
    def error_rate75_deviation(self):
        """Gets the error_rate75_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate75Deviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate75_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate75_deviation

    @error_rate75_deviation.setter
    def error_rate75_deviation(self, error_rate75_deviation):
        """Sets the error_rate75_deviation of this LaneByReadSequencingStatsResponse.

        ErrorRate75Deviation of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate75_deviation: The error_rate75_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate75_deviation = error_rate75_deviation

    @property
    def error_rate100(self):
        """Gets the error_rate100 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate100 of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate100 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate100

    @error_rate100.setter
    def error_rate100(self, error_rate100):
        """Sets the error_rate100 of this LaneByReadSequencingStatsResponse.

        ErrorRate100 of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate100: The error_rate100 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate100 = error_rate100

    @property
    def error_rate100_deviation(self):
        """Gets the error_rate100_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ErrorRate100Deviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The error_rate100_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate100_deviation

    @error_rate100_deviation.setter
    def error_rate100_deviation(self, error_rate100_deviation):
        """Sets the error_rate100_deviation of this LaneByReadSequencingStatsResponse.

        ErrorRate100Deviation of the LaneByReadSequencingStats  # noqa: E501

        :param error_rate100_deviation: The error_rate100_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate100_deviation = error_rate100_deviation

    @property
    def intensity_cycle1(self):
        """Gets the intensity_cycle1 of this LaneByReadSequencingStatsResponse.  # noqa: E501

        IntensityCycle1 of the LaneByReadSequencingStats  # noqa: E501

        :return: The intensity_cycle1 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._intensity_cycle1

    @intensity_cycle1.setter
    def intensity_cycle1(self, intensity_cycle1):
        """Sets the intensity_cycle1 of this LaneByReadSequencingStatsResponse.

        IntensityCycle1 of the LaneByReadSequencingStats  # noqa: E501

        :param intensity_cycle1: The intensity_cycle1 of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._intensity_cycle1 = intensity_cycle1

    @property
    def intensity_cycle1_deviation(self):
        """Gets the intensity_cycle1_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501

        IntensityCycle1Deviation of the LaneByReadSequencingStats  # noqa: E501

        :return: The intensity_cycle1_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._intensity_cycle1_deviation

    @intensity_cycle1_deviation.setter
    def intensity_cycle1_deviation(self, intensity_cycle1_deviation):
        """Sets the intensity_cycle1_deviation of this LaneByReadSequencingStatsResponse.

        IntensityCycle1Deviation of the LaneByReadSequencingStats  # noqa: E501

        :param intensity_cycle1_deviation: The intensity_cycle1_deviation of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._intensity_cycle1_deviation = intensity_cycle1_deviation

    @property
    def min_cycle_error(self):
        """Gets the min_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501

        MinCycleError of the LaneByReadSequencingStats  # noqa: E501

        :return: The min_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._min_cycle_error

    @min_cycle_error.setter
    def min_cycle_error(self, min_cycle_error):
        """Sets the min_cycle_error of this LaneByReadSequencingStatsResponse.

        MinCycleError of the LaneByReadSequencingStats  # noqa: E501

        :param min_cycle_error: The min_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._min_cycle_error = min_cycle_error

    @property
    def max_cycle_error(self):
        """Gets the max_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501

        MaxCycleError of the LaneByReadSequencingStats  # noqa: E501

        :return: The max_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_error

    @max_cycle_error.setter
    def max_cycle_error(self, max_cycle_error):
        """Sets the max_cycle_error of this LaneByReadSequencingStatsResponse.

        MaxCycleError of the LaneByReadSequencingStats  # noqa: E501

        :param max_cycle_error: The max_cycle_error of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._max_cycle_error = max_cycle_error

    @property
    def phasing_slope(self):
        """Gets the phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PhasingSlope of the LaneByReadSequencingStats  # noqa: E501

        :return: The phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._phasing_slope

    @phasing_slope.setter
    def phasing_slope(self, phasing_slope):
        """Sets the phasing_slope of this LaneByReadSequencingStatsResponse.

        PhasingSlope of the LaneByReadSequencingStats  # noqa: E501

        :param phasing_slope: The phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._phasing_slope = phasing_slope

    @property
    def phasing_offset(self):
        """Gets the phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PhasingOffset of the LaneByReadSequencingStats  # noqa: E501

        :return: The phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._phasing_offset

    @phasing_offset.setter
    def phasing_offset(self, phasing_offset):
        """Sets the phasing_offset of this LaneByReadSequencingStatsResponse.

        PhasingOffset of the LaneByReadSequencingStats  # noqa: E501

        :param phasing_offset: The phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._phasing_offset = phasing_offset

    @property
    def pre_phasing_slope(self):
        """Gets the pre_phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PrePhasingSlope of the LaneByReadSequencingStats  # noqa: E501

        :return: The pre_phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_slope

    @pre_phasing_slope.setter
    def pre_phasing_slope(self, pre_phasing_slope):
        """Sets the pre_phasing_slope of this LaneByReadSequencingStatsResponse.

        PrePhasingSlope of the LaneByReadSequencingStats  # noqa: E501

        :param pre_phasing_slope: The pre_phasing_slope of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._pre_phasing_slope = pre_phasing_slope

    @property
    def pre_phasing_offset(self):
        """Gets the pre_phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PrePhasingOffset of the LaneByReadSequencingStats  # noqa: E501

        :return: The pre_phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_offset

    @pre_phasing_offset.setter
    def pre_phasing_offset(self, pre_phasing_offset):
        """Sets the pre_phasing_offset of this LaneByReadSequencingStatsResponse.

        PrePhasingOffset of the LaneByReadSequencingStats  # noqa: E501

        :param pre_phasing_offset: The pre_phasing_offset of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._pre_phasing_offset = pre_phasing_offset

    @property
    def percent_no_calls(self):
        """Gets the percent_no_calls of this LaneByReadSequencingStatsResponse.  # noqa: E501

        PercentNoCalls of the LaneByReadSequencingStats  # noqa: E501

        :return: The percent_no_calls of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_no_calls

    @percent_no_calls.setter
    def percent_no_calls(self, percent_no_calls):
        """Sets the percent_no_calls of this LaneByReadSequencingStatsResponse.

        PercentNoCalls of the LaneByReadSequencingStats  # noqa: E501

        :param percent_no_calls: The percent_no_calls of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_no_calls = percent_no_calls

    @property
    def cluster_density(self):
        """Gets the cluster_density of this LaneByReadSequencingStatsResponse.  # noqa: E501

        ClusterDensity of the LaneByReadSequencingStats  # noqa: E501

        :return: The cluster_density of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._cluster_density

    @cluster_density.setter
    def cluster_density(self, cluster_density):
        """Sets the cluster_density of this LaneByReadSequencingStatsResponse.

        ClusterDensity of the LaneByReadSequencingStats  # noqa: E501

        :param cluster_density: The cluster_density of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._cluster_density = cluster_density

    @property
    def occupancy(self):
        """Gets the occupancy of this LaneByReadSequencingStatsResponse.  # noqa: E501

        Occupancy of the LaneByReadSequencingStats  # noqa: E501

        :return: The occupancy of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this LaneByReadSequencingStatsResponse.

        Occupancy of the LaneByReadSequencingStats  # noqa: E501

        :param occupancy: The occupancy of this LaneByReadSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._occupancy = occupancy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaneByReadSequencingStatsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaneByReadSequencingStatsResponse):
            return True

        return self.to_dict() != other.to_dict()
