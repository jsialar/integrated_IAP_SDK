# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class IndexSequence(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'read_number': 'int',
        'sequence': 'str'
    }

    attribute_map = {
        'name': 'name',
        'read_number': 'readNumber',
        'sequence': 'sequence'
    }

    def __init__(self, name=None, read_number=None, sequence=None, local_vars_configuration=None):  # noqa: E501
        """IndexSequence - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._read_number = None
        self._sequence = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.read_number = read_number
        self.sequence = sequence

    @property
    def name(self):
        """Gets the name of this IndexSequence.  # noqa: E501

        Name of index  # noqa: E501

        :return: The name of this IndexSequence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexSequence.

        Name of index  # noqa: E501

        :param name: The name of this IndexSequence.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def read_number(self):
        """Gets the read_number of this IndexSequence.  # noqa: E501

        Read number of index  # noqa: E501

        :return: The read_number of this IndexSequence.  # noqa: E501
        :rtype: int
        """
        return self._read_number

    @read_number.setter
    def read_number(self, read_number):
        """Sets the read_number of this IndexSequence.

        Read number of index  # noqa: E501

        :param read_number: The read_number of this IndexSequence.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and read_number is None:  # noqa: E501
            raise ValueError("Invalid value for `read_number`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                read_number is not None and read_number > 2):  # noqa: E501
            raise ValueError("Invalid value for `read_number`, must be a value less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                read_number is not None and read_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `read_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._read_number = read_number

    @property
    def sequence(self):
        """Gets the sequence of this IndexSequence.  # noqa: E501

        Sequence of index  # noqa: E501

        :return: The sequence of this IndexSequence.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this IndexSequence.

        Sequence of index  # noqa: E501

        :param sequence: The sequence of this IndexSequence.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sequence is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sequence is not None and len(sequence) > 10):
            raise ValueError("Invalid value for `sequence`, length must be less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sequence is not None and len(sequence) < 0):
            raise ValueError("Invalid value for `sequence`, length must be greater than or equal to `0`")  # noqa: E501

        self._sequence = sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexSequence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexSequence):
            return True

        return self.to_dict() != other.to_dict()
