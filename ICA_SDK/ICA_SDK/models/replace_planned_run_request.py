# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class ReplacePlannedRunRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_configuration': 'CreateSequencingRunConfigurationRequest',
        'run_contents': 'UpdateSequencingRunContentsRequest',
        'run_analysis_configurations': 'list[CreateSequencingRunAnalysisConfigurationRequest]',
        'is_favorite': 'bool'
    }

    attribute_map = {
        'run_configuration': 'runConfiguration',
        'run_contents': 'runContents',
        'run_analysis_configurations': 'runAnalysisConfigurations',
        'is_favorite': 'isFavorite'
    }

    def __init__(self, run_configuration=None, run_contents=None, run_analysis_configurations=None, is_favorite=None, local_vars_configuration=None):  # noqa: E501
        """ReplacePlannedRunRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_configuration = None
        self._run_contents = None
        self._run_analysis_configurations = None
        self._is_favorite = None
        self.discriminator = None

        self.run_configuration = run_configuration
        if run_contents is not None:
            self.run_contents = run_contents
        if run_analysis_configurations is not None:
            self.run_analysis_configurations = run_analysis_configurations
        if is_favorite is not None:
            self.is_favorite = is_favorite

    @property
    def run_configuration(self):
        """Gets the run_configuration of this ReplacePlannedRunRequest.  # noqa: E501


        :return: The run_configuration of this ReplacePlannedRunRequest.  # noqa: E501
        :rtype: CreateSequencingRunConfigurationRequest
        """
        return self._run_configuration

    @run_configuration.setter
    def run_configuration(self, run_configuration):
        """Sets the run_configuration of this ReplacePlannedRunRequest.


        :param run_configuration: The run_configuration of this ReplacePlannedRunRequest.  # noqa: E501
        :type: CreateSequencingRunConfigurationRequest
        """
        if self.local_vars_configuration.client_side_validation and run_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `run_configuration`, must not be `None`")  # noqa: E501

        self._run_configuration = run_configuration

    @property
    def run_contents(self):
        """Gets the run_contents of this ReplacePlannedRunRequest.  # noqa: E501


        :return: The run_contents of this ReplacePlannedRunRequest.  # noqa: E501
        :rtype: UpdateSequencingRunContentsRequest
        """
        return self._run_contents

    @run_contents.setter
    def run_contents(self, run_contents):
        """Sets the run_contents of this ReplacePlannedRunRequest.


        :param run_contents: The run_contents of this ReplacePlannedRunRequest.  # noqa: E501
        :type: UpdateSequencingRunContentsRequest
        """

        self._run_contents = run_contents

    @property
    def run_analysis_configurations(self):
        """Gets the run_analysis_configurations of this ReplacePlannedRunRequest.  # noqa: E501

        Run analysis configurations  # noqa: E501

        :return: The run_analysis_configurations of this ReplacePlannedRunRequest.  # noqa: E501
        :rtype: list[CreateSequencingRunAnalysisConfigurationRequest]
        """
        return self._run_analysis_configurations

    @run_analysis_configurations.setter
    def run_analysis_configurations(self, run_analysis_configurations):
        """Sets the run_analysis_configurations of this ReplacePlannedRunRequest.

        Run analysis configurations  # noqa: E501

        :param run_analysis_configurations: The run_analysis_configurations of this ReplacePlannedRunRequest.  # noqa: E501
        :type: list[CreateSequencingRunAnalysisConfigurationRequest]
        """

        self._run_analysis_configurations = run_analysis_configurations

    @property
    def is_favorite(self):
        """Gets the is_favorite of this ReplacePlannedRunRequest.  # noqa: E501

        Set the run as favorite runs  # noqa: E501

        :return: The is_favorite of this ReplacePlannedRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this ReplacePlannedRunRequest.

        Set the run as favorite runs  # noqa: E501

        :param is_favorite: The is_favorite of this ReplacePlannedRunRequest.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplacePlannedRunRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplacePlannedRunRequest):
            return True

        return self.to_dict() != other.to_dict()
