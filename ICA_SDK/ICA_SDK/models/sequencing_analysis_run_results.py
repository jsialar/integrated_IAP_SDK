# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class SequencingAnalysisRunResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'demuxing_results': 'object',
        'analysis_results': 'object',
        'launch_parameters_snapshot': 'object',
        'sample_mapping': 'object',
        'sample_sheet_snapshot': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'time_created': 'datetime',
        'time_modified': 'datetime'
    }

    attribute_map = {
        'demuxing_results': 'demuxingResults',
        'analysis_results': 'analysisResults',
        'launch_parameters_snapshot': 'launchParametersSnapshot',
        'sample_mapping': 'sampleMapping',
        'sample_sheet_snapshot': 'sampleSheetSnapshot',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'time_created': 'timeCreated',
        'time_modified': 'timeModified'
    }

    def __init__(self, demuxing_results=None, analysis_results=None, launch_parameters_snapshot=None, sample_mapping=None, sample_sheet_snapshot=None, created_by=None, modified_by=None, time_created=None, time_modified=None, local_vars_configuration=None):  # noqa: E501
        """SequencingAnalysisRunResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._demuxing_results = None
        self._analysis_results = None
        self._launch_parameters_snapshot = None
        self._sample_mapping = None
        self._sample_sheet_snapshot = None
        self._created_by = None
        self._modified_by = None
        self._time_created = None
        self._time_modified = None
        self.discriminator = None

        if demuxing_results is not None:
            self.demuxing_results = demuxing_results
        if analysis_results is not None:
            self.analysis_results = analysis_results
        if launch_parameters_snapshot is not None:
            self.launch_parameters_snapshot = launch_parameters_snapshot
        if sample_mapping is not None:
            self.sample_mapping = sample_mapping
        if sample_sheet_snapshot is not None:
            self.sample_sheet_snapshot = sample_sheet_snapshot
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if time_created is not None:
            self.time_created = time_created
        if time_modified is not None:
            self.time_modified = time_modified

    @property
    def demuxing_results(self):
        """Gets the demuxing_results of this SequencingAnalysisRunResults.  # noqa: E501

        Demuxing results of the analysis run  # noqa: E501

        :return: The demuxing_results of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: object
        """
        return self._demuxing_results

    @demuxing_results.setter
    def demuxing_results(self, demuxing_results):
        """Sets the demuxing_results of this SequencingAnalysisRunResults.

        Demuxing results of the analysis run  # noqa: E501

        :param demuxing_results: The demuxing_results of this SequencingAnalysisRunResults.  # noqa: E501
        :type: object
        """

        self._demuxing_results = demuxing_results

    @property
    def analysis_results(self):
        """Gets the analysis_results of this SequencingAnalysisRunResults.  # noqa: E501

        Analysis results of the analysis run  # noqa: E501

        :return: The analysis_results of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: object
        """
        return self._analysis_results

    @analysis_results.setter
    def analysis_results(self, analysis_results):
        """Sets the analysis_results of this SequencingAnalysisRunResults.

        Analysis results of the analysis run  # noqa: E501

        :param analysis_results: The analysis_results of this SequencingAnalysisRunResults.  # noqa: E501
        :type: object
        """

        self._analysis_results = analysis_results

    @property
    def launch_parameters_snapshot(self):
        """Gets the launch_parameters_snapshot of this SequencingAnalysisRunResults.  # noqa: E501

        Snapshot of the analysis launch parameters  # noqa: E501

        :return: The launch_parameters_snapshot of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: object
        """
        return self._launch_parameters_snapshot

    @launch_parameters_snapshot.setter
    def launch_parameters_snapshot(self, launch_parameters_snapshot):
        """Sets the launch_parameters_snapshot of this SequencingAnalysisRunResults.

        Snapshot of the analysis launch parameters  # noqa: E501

        :param launch_parameters_snapshot: The launch_parameters_snapshot of this SequencingAnalysisRunResults.  # noqa: E501
        :type: object
        """

        self._launch_parameters_snapshot = launch_parameters_snapshot

    @property
    def sample_mapping(self):
        """Gets the sample_mapping of this SequencingAnalysisRunResults.  # noqa: E501

        Sample mapping of the analysis run  # noqa: E501

        :return: The sample_mapping of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: object
        """
        return self._sample_mapping

    @sample_mapping.setter
    def sample_mapping(self, sample_mapping):
        """Sets the sample_mapping of this SequencingAnalysisRunResults.

        Sample mapping of the analysis run  # noqa: E501

        :param sample_mapping: The sample_mapping of this SequencingAnalysisRunResults.  # noqa: E501
        :type: object
        """

        self._sample_mapping = sample_mapping

    @property
    def sample_sheet_snapshot(self):
        """Gets the sample_sheet_snapshot of this SequencingAnalysisRunResults.  # noqa: E501

        Snapshot of the sample sheet used in the analysis  # noqa: E501

        :return: The sample_sheet_snapshot of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: str
        """
        return self._sample_sheet_snapshot

    @sample_sheet_snapshot.setter
    def sample_sheet_snapshot(self, sample_sheet_snapshot):
        """Sets the sample_sheet_snapshot of this SequencingAnalysisRunResults.

        Snapshot of the sample sheet used in the analysis  # noqa: E501

        :param sample_sheet_snapshot: The sample_sheet_snapshot of this SequencingAnalysisRunResults.  # noqa: E501
        :type: str
        """

        self._sample_sheet_snapshot = sample_sheet_snapshot

    @property
    def created_by(self):
        """Gets the created_by of this SequencingAnalysisRunResults.  # noqa: E501

        User that created the resource  # noqa: E501

        :return: The created_by of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SequencingAnalysisRunResults.

        User that created the resource  # noqa: E501

        :param created_by: The created_by of this SequencingAnalysisRunResults.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this SequencingAnalysisRunResults.  # noqa: E501

        User that last modified the resource  # noqa: E501

        :return: The modified_by of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SequencingAnalysisRunResults.

        User that last modified the resource  # noqa: E501

        :param modified_by: The modified_by of this SequencingAnalysisRunResults.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def time_created(self):
        """Gets the time_created of this SequencingAnalysisRunResults.  # noqa: E501

        Time (in UTC) the resource was created  # noqa: E501

        :return: The time_created of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this SequencingAnalysisRunResults.

        Time (in UTC) the resource was created  # noqa: E501

        :param time_created: The time_created of this SequencingAnalysisRunResults.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def time_modified(self):
        """Gets the time_modified of this SequencingAnalysisRunResults.  # noqa: E501

        Time (in UTC) the resource was modified  # noqa: E501

        :return: The time_modified of this SequencingAnalysisRunResults.  # noqa: E501
        :rtype: datetime
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this SequencingAnalysisRunResults.

        Time (in UTC) the resource was modified  # noqa: E501

        :param time_modified: The time_modified of this SequencingAnalysisRunResults.  # noqa: E501
        :type: datetime
        """

        self._time_modified = time_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequencingAnalysisRunResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequencingAnalysisRunResults):
            return True

        return self.to_dict() != other.to_dict()
