# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class CreateAnalysisDatasetParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'external_id': 'str',
        'task_run_id': 'str',
        'workflow_run_id': 'str',
        'lane_number': 'int',
        'data_folder_urn': 'str',
        'data_folder_volume_path': 'str',
        'attributes': 'object',
        'type': 'str',
        'qc_status': 'str',
        'qc_status_summary': 'str',
        'file_urns': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'external_id': 'externalId',
        'task_run_id': 'taskRunId',
        'workflow_run_id': 'workflowRunId',
        'lane_number': 'laneNumber',
        'data_folder_urn': 'dataFolderUrn',
        'data_folder_volume_path': 'dataFolderVolumePath',
        'attributes': 'attributes',
        'type': 'type',
        'qc_status': 'qcStatus',
        'qc_status_summary': 'qcStatusSummary',
        'file_urns': 'fileUrns'
    }

    def __init__(self, name=None, display_name=None, external_id=None, task_run_id=None, workflow_run_id=None, lane_number=None, data_folder_urn=None, data_folder_volume_path=None, attributes=None, type=None, qc_status=None, qc_status_summary=None, file_urns=None, local_vars_configuration=None):  # noqa: E501
        """CreateAnalysisDatasetParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._external_id = None
        self._task_run_id = None
        self._workflow_run_id = None
        self._lane_number = None
        self._data_folder_urn = None
        self._data_folder_volume_path = None
        self._attributes = None
        self._type = None
        self._qc_status = None
        self._qc_status_summary = None
        self._file_urns = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if external_id is not None:
            self.external_id = external_id
        if task_run_id is not None:
            self.task_run_id = task_run_id
        if workflow_run_id is not None:
            self.workflow_run_id = workflow_run_id
        if lane_number is not None:
            self.lane_number = lane_number
        if data_folder_urn is not None:
            self.data_folder_urn = data_folder_urn
        if data_folder_volume_path is not None:
            self.data_folder_volume_path = data_folder_volume_path
        if attributes is not None:
            self.attributes = attributes
        if type is not None:
            self.type = type
        if qc_status is not None:
            self.qc_status = qc_status
        if qc_status_summary is not None:
            self.qc_status_summary = qc_status_summary
        if file_urns is not None:
            self.file_urns = file_urns

    @property
    def name(self):
        """Gets the name of this CreateAnalysisDatasetParameters.  # noqa: E501

        Optional name of the analysis dataset. Must be unique in tenant if provided  # noqa: E501

        :return: The name of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnalysisDatasetParameters.

        Optional name of the analysis dataset. Must be unique in tenant if provided  # noqa: E501

        :param name: The name of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 150):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this CreateAnalysisDatasetParameters.  # noqa: E501

        Optional display name of the analysis dataset  # noqa: E501

        :return: The display_name of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateAnalysisDatasetParameters.

        Optional display name of the analysis dataset  # noqa: E501

        :param display_name: The display_name of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 150):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `150`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def external_id(self):
        """Gets the external_id of this CreateAnalysisDatasetParameters.  # noqa: E501

        External ID to associate with the analysis dataset  # noqa: E501

        :return: The external_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateAnalysisDatasetParameters.

        External ID to associate with the analysis dataset  # noqa: E501

        :param external_id: The external_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 255):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) < 0):
            raise ValueError("Invalid value for `external_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_id = external_id

    @property
    def task_run_id(self):
        """Gets the task_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501

        Optional Task run id of the analysis dataset  # noqa: E501

        :return: The task_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._task_run_id

    @task_run_id.setter
    def task_run_id(self, task_run_id):
        """Sets the task_run_id of this CreateAnalysisDatasetParameters.

        Optional Task run id of the analysis dataset  # noqa: E501

        :param task_run_id: The task_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                task_run_id is not None and len(task_run_id) > 50):
            raise ValueError("Invalid value for `task_run_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                task_run_id is not None and len(task_run_id) < 0):
            raise ValueError("Invalid value for `task_run_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._task_run_id = task_run_id

    @property
    def workflow_run_id(self):
        """Gets the workflow_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501

        Optional Workflow run id of the analysis dataset  # noqa: E501

        :return: The workflow_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._workflow_run_id

    @workflow_run_id.setter
    def workflow_run_id(self, workflow_run_id):
        """Sets the workflow_run_id of this CreateAnalysisDatasetParameters.

        Optional Workflow run id of the analysis dataset  # noqa: E501

        :param workflow_run_id: The workflow_run_id of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                workflow_run_id is not None and len(workflow_run_id) > 50):
            raise ValueError("Invalid value for `workflow_run_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                workflow_run_id is not None and len(workflow_run_id) < 0):
            raise ValueError("Invalid value for `workflow_run_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._workflow_run_id = workflow_run_id

    @property
    def lane_number(self):
        """Gets the lane_number of this CreateAnalysisDatasetParameters.  # noqa: E501

        Optional Lane number associated with the analysis dataset  # noqa: E501

        :return: The lane_number of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this CreateAnalysisDatasetParameters.

        Optional Lane number associated with the analysis dataset  # noqa: E501

        :param lane_number: The lane_number of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                lane_number is not None and lane_number > 8):  # noqa: E501
            raise ValueError("Invalid value for `lane_number`, must be a value less than or equal to `8`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lane_number is not None and lane_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `lane_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lane_number = lane_number

    @property
    def data_folder_urn(self):
        """Gets the data_folder_urn of this CreateAnalysisDatasetParameters.  # noqa: E501

        Data folder urn of the analysis dataset  # noqa: E501

        :return: The data_folder_urn of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._data_folder_urn

    @data_folder_urn.setter
    def data_folder_urn(self, data_folder_urn):
        """Sets the data_folder_urn of this CreateAnalysisDatasetParameters.

        Data folder urn of the analysis dataset  # noqa: E501

        :param data_folder_urn: The data_folder_urn of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                data_folder_urn is not None and len(data_folder_urn) > 1152):
            raise ValueError("Invalid value for `data_folder_urn`, length must be less than or equal to `1152`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                data_folder_urn is not None and len(data_folder_urn) < 0):
            raise ValueError("Invalid value for `data_folder_urn`, length must be greater than or equal to `0`")  # noqa: E501

        self._data_folder_urn = data_folder_urn

    @property
    def data_folder_volume_path(self):
        """Gets the data_folder_volume_path of this CreateAnalysisDatasetParameters.  # noqa: E501

        VolumeName + path of the DataFolder  # noqa: E501

        :return: The data_folder_volume_path of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._data_folder_volume_path

    @data_folder_volume_path.setter
    def data_folder_volume_path(self, data_folder_volume_path):
        """Sets the data_folder_volume_path of this CreateAnalysisDatasetParameters.

        VolumeName + path of the DataFolder  # noqa: E501

        :param data_folder_volume_path: The data_folder_volume_path of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                data_folder_volume_path is not None and len(data_folder_volume_path) > 2048):
            raise ValueError("Invalid value for `data_folder_volume_path`, length must be less than or equal to `2048`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                data_folder_volume_path is not None and len(data_folder_volume_path) < 0):
            raise ValueError("Invalid value for `data_folder_volume_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._data_folder_volume_path = data_folder_volume_path

    @property
    def attributes(self):
        """Gets the attributes of this CreateAnalysisDatasetParameters.  # noqa: E501

        Attributes of the analysis dataset  # noqa: E501

        :return: The attributes of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateAnalysisDatasetParameters.

        Attributes of the analysis dataset  # noqa: E501

        :param attributes: The attributes of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def type(self):
        """Gets the type of this CreateAnalysisDatasetParameters.  # noqa: E501

        Type of the analysis dataset  # noqa: E501

        :return: The type of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateAnalysisDatasetParameters.

        Type of the analysis dataset  # noqa: E501

        :param type: The type of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) > 255):
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 0):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `0`")  # noqa: E501

        self._type = type

    @property
    def qc_status(self):
        """Gets the qc_status of this CreateAnalysisDatasetParameters.  # noqa: E501

        QC status of the analysis dataset  # noqa: E501

        :return: The qc_status of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._qc_status

    @qc_status.setter
    def qc_status(self, qc_status):
        """Sets the qc_status of this CreateAnalysisDatasetParameters.

        QC status of the analysis dataset  # noqa: E501

        :param qc_status: The qc_status of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                qc_status is not None and len(qc_status) > 255):
            raise ValueError("Invalid value for `qc_status`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                qc_status is not None and len(qc_status) < 0):
            raise ValueError("Invalid value for `qc_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._qc_status = qc_status

    @property
    def qc_status_summary(self):
        """Gets the qc_status_summary of this CreateAnalysisDatasetParameters.  # noqa: E501

        QC summary of the analysis dataset  # noqa: E501

        :return: The qc_status_summary of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: str
        """
        return self._qc_status_summary

    @qc_status_summary.setter
    def qc_status_summary(self, qc_status_summary):
        """Sets the qc_status_summary of this CreateAnalysisDatasetParameters.

        QC summary of the analysis dataset  # noqa: E501

        :param qc_status_summary: The qc_status_summary of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                qc_status_summary is not None and len(qc_status_summary) > 255):
            raise ValueError("Invalid value for `qc_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                qc_status_summary is not None and len(qc_status_summary) < 0):
            raise ValueError("Invalid value for `qc_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._qc_status_summary = qc_status_summary

    @property
    def file_urns(self):
        """Gets the file_urns of this CreateAnalysisDatasetParameters.  # noqa: E501

        FileUrns (or FileIds) of the AnalysisDataset  # noqa: E501

        :return: The file_urns of this CreateAnalysisDatasetParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_urns

    @file_urns.setter
    def file_urns(self, file_urns):
        """Sets the file_urns of this CreateAnalysisDatasetParameters.

        FileUrns (or FileIds) of the AnalysisDataset  # noqa: E501

        :param file_urns: The file_urns of this CreateAnalysisDatasetParameters.  # noqa: E501
        :type: list[str]
        """

        self._file_urns = file_urns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAnalysisDatasetParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAnalysisDatasetParameters):
            return True

        return self.to_dict() != other.to_dict()
