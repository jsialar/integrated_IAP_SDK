# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class SequencingRunCompact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'urn': 'str',
        'href': 'str',
        'run_origin': 'str',
        'regulatory_mode': 'str',
        'instrument_run_id': 'str',
        'external_run_id': 'str',
        'run_name': 'str',
        'description': 'str',
        'is_planned': 'bool',
        'aggregate_run_status': 'str',
        'verification_status': 'str',
        'verification_status_summary': 'str',
        'verification_completed': 'bool',
        'verification_time_started': 'datetime',
        'verification_time_completed': 'datetime',
        'instrument_run_status': 'str',
        'instrument_run_status_summary': 'str',
        'instrument_run_completed': 'bool',
        'instrument_run_time_started': 'datetime',
        'instrument_run_time_completed': 'datetime',
        'instrument_completed': 'bool',
        'instrument_time_started': 'datetime',
        'instrument_time_completed': 'datetime',
        'sequencing_completed': 'bool',
        'sequencing_time_started': 'datetime',
        'sequencing_time_completed': 'datetime',
        'instrument_analysis_status': 'str',
        'instrument_analysis_status_summary': 'str',
        'instrument_analysis_performed': 'bool',
        'instrument_analysis_completed': 'bool',
        'instrument_analysis_time_started': 'datetime',
        'instrument_analysis_time_completed': 'datetime',
        'run_upload_status': 'str',
        'run_upload_status_summary': 'str',
        'run_upload_completed': 'bool',
        'run_upload_time_started': 'datetime',
        'run_upload_time_completed': 'datetime',
        'is_completed': 'bool',
        'is_failed': 'bool',
        'run_failure_type': 'str',
        'run_failure_reason': 'str',
        'needs_attention': 'bool',
        'needs_attention_reason': 'str',
        'is_aborted': 'bool',
        'is_timed_out': 'bool',
        'prep_kit_info': 'SequencingRunPrepKitInfo',
        'genome_info': 'SequencingRunGenomeInfo',
        'flow_cell_barcode': 'str',
        'input_container_identifier': 'str',
        'consumables': 'object',
        'run_mode': 'str',
        'instrument_run_number': 'int',
        'sample_sheet_name': 'str',
        'data_volume_urn': 'str',
        'data_folder_urn': 'str',
        'data_folder_volume_path': 'str',
        'total_size': 'int',
        'locked_by': 'str',
        'started_by': 'str',
        'time_locked': 'datetime',
        'is_locked': 'bool',
        'config': 'SequencingRunConfiguration',
        'instrument': 'Instrument',
        'instrument_type_snapshot': 'str',
        'instrument_software_version': 'str',
        'analysis_location': 'str',
        'analysis_summaries': 'list[SequencingRunAnalysisSummary]',
        'run_analysis_settings': 'object',
        'is_favorite': 'bool',
        'external_location': 'str',
        'checksum_of_manifest': 'str',
        'requeued_from_run': 'SequencingRunCompact',
        'requeue_reason': 'str',
        'verification_results': 'RunVerificationResult',
        'can_edit_run': 'bool',
        'can_requeue_run': 'bool',
        'can_delete': 'bool',
        'analysis_time_started': 'datetime',
        'analysis_time_completed': 'datetime',
        'run_time_completed': 'datetime',
        'run_sequencing_stats': 'RunSequencingStatsResponse',
        'analysis_runs': 'list[SequencingAnalysisRunCompact]',
        'sub_tenant_id': 'str',
        'acl': 'list[str]',
        'tenant_id': 'str',
        'tenant_name': 'str',
        'created_by_client_id': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'time_created': 'datetime',
        'time_modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'urn': 'urn',
        'href': 'href',
        'run_origin': 'runOrigin',
        'regulatory_mode': 'regulatoryMode',
        'instrument_run_id': 'instrumentRunId',
        'external_run_id': 'externalRunId',
        'run_name': 'runName',
        'description': 'description',
        'is_planned': 'isPlanned',
        'aggregate_run_status': 'aggregateRunStatus',
        'verification_status': 'verificationStatus',
        'verification_status_summary': 'verificationStatusSummary',
        'verification_completed': 'verificationCompleted',
        'verification_time_started': 'verificationTimeStarted',
        'verification_time_completed': 'verificationTimeCompleted',
        'instrument_run_status': 'instrumentRunStatus',
        'instrument_run_status_summary': 'instrumentRunStatusSummary',
        'instrument_run_completed': 'instrumentRunCompleted',
        'instrument_run_time_started': 'instrumentRunTimeStarted',
        'instrument_run_time_completed': 'instrumentRunTimeCompleted',
        'instrument_completed': 'instrumentCompleted',
        'instrument_time_started': 'instrumentTimeStarted',
        'instrument_time_completed': 'instrumentTimeCompleted',
        'sequencing_completed': 'sequencingCompleted',
        'sequencing_time_started': 'sequencingTimeStarted',
        'sequencing_time_completed': 'sequencingTimeCompleted',
        'instrument_analysis_status': 'instrumentAnalysisStatus',
        'instrument_analysis_status_summary': 'instrumentAnalysisStatusSummary',
        'instrument_analysis_performed': 'instrumentAnalysisPerformed',
        'instrument_analysis_completed': 'instrumentAnalysisCompleted',
        'instrument_analysis_time_started': 'instrumentAnalysisTimeStarted',
        'instrument_analysis_time_completed': 'instrumentAnalysisTimeCompleted',
        'run_upload_status': 'runUploadStatus',
        'run_upload_status_summary': 'runUploadStatusSummary',
        'run_upload_completed': 'runUploadCompleted',
        'run_upload_time_started': 'runUploadTimeStarted',
        'run_upload_time_completed': 'runUploadTimeCompleted',
        'is_completed': 'isCompleted',
        'is_failed': 'isFailed',
        'run_failure_type': 'runFailureType',
        'run_failure_reason': 'runFailureReason',
        'needs_attention': 'needsAttention',
        'needs_attention_reason': 'needsAttentionReason',
        'is_aborted': 'isAborted',
        'is_timed_out': 'isTimedOut',
        'prep_kit_info': 'prepKitInfo',
        'genome_info': 'genomeInfo',
        'flow_cell_barcode': 'flowCellBarcode',
        'input_container_identifier': 'inputContainerIdentifier',
        'consumables': 'consumables',
        'run_mode': 'runMode',
        'instrument_run_number': 'instrumentRunNumber',
        'sample_sheet_name': 'sampleSheetName',
        'data_volume_urn': 'dataVolumeUrn',
        'data_folder_urn': 'dataFolderUrn',
        'data_folder_volume_path': 'dataFolderVolumePath',
        'total_size': 'totalSize',
        'locked_by': 'lockedBy',
        'started_by': 'startedBy',
        'time_locked': 'timeLocked',
        'is_locked': 'isLocked',
        'config': 'config',
        'instrument': 'instrument',
        'instrument_type_snapshot': 'instrumentTypeSnapshot',
        'instrument_software_version': 'instrumentSoftwareVersion',
        'analysis_location': 'analysisLocation',
        'analysis_summaries': 'analysisSummaries',
        'run_analysis_settings': 'runAnalysisSettings',
        'is_favorite': 'isFavorite',
        'external_location': 'externalLocation',
        'checksum_of_manifest': 'checksumOfManifest',
        'requeued_from_run': 'requeuedFromRun',
        'requeue_reason': 'requeueReason',
        'verification_results': 'verificationResults',
        'can_edit_run': 'canEditRun',
        'can_requeue_run': 'canRequeueRun',
        'can_delete': 'canDelete',
        'analysis_time_started': 'analysisTimeStarted',
        'analysis_time_completed': 'analysisTimeCompleted',
        'run_time_completed': 'runTimeCompleted',
        'run_sequencing_stats': 'runSequencingStats',
        'analysis_runs': 'analysisRuns',
        'sub_tenant_id': 'subTenantId',
        'acl': 'acl',
        'tenant_id': 'tenantId',
        'tenant_name': 'tenantName',
        'created_by_client_id': 'createdByClientId',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'time_created': 'timeCreated',
        'time_modified': 'timeModified'
    }

    def __init__(self, id=None, urn=None, href=None, run_origin=None, regulatory_mode=None, instrument_run_id=None, external_run_id=None, run_name=None, description=None, is_planned=None, aggregate_run_status=None, verification_status=None, verification_status_summary=None, verification_completed=None, verification_time_started=None, verification_time_completed=None, instrument_run_status=None, instrument_run_status_summary=None, instrument_run_completed=None, instrument_run_time_started=None, instrument_run_time_completed=None, instrument_completed=None, instrument_time_started=None, instrument_time_completed=None, sequencing_completed=None, sequencing_time_started=None, sequencing_time_completed=None, instrument_analysis_status=None, instrument_analysis_status_summary=None, instrument_analysis_performed=None, instrument_analysis_completed=None, instrument_analysis_time_started=None, instrument_analysis_time_completed=None, run_upload_status=None, run_upload_status_summary=None, run_upload_completed=None, run_upload_time_started=None, run_upload_time_completed=None, is_completed=None, is_failed=None, run_failure_type=None, run_failure_reason=None, needs_attention=None, needs_attention_reason=None, is_aborted=None, is_timed_out=None, prep_kit_info=None, genome_info=None, flow_cell_barcode=None, input_container_identifier=None, consumables=None, run_mode=None, instrument_run_number=None, sample_sheet_name=None, data_volume_urn=None, data_folder_urn=None, data_folder_volume_path=None, total_size=None, locked_by=None, started_by=None, time_locked=None, is_locked=None, config=None, instrument=None, instrument_type_snapshot=None, instrument_software_version=None, analysis_location=None, analysis_summaries=None, run_analysis_settings=None, is_favorite=None, external_location=None, checksum_of_manifest=None, requeued_from_run=None, requeue_reason=None, verification_results=None, can_edit_run=None, can_requeue_run=None, can_delete=None, analysis_time_started=None, analysis_time_completed=None, run_time_completed=None, run_sequencing_stats=None, analysis_runs=None, sub_tenant_id=None, acl=None, tenant_id=None, tenant_name=None, created_by_client_id=None, created_by=None, modified_by=None, time_created=None, time_modified=None, local_vars_configuration=None):  # noqa: E501
        """SequencingRunCompact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urn = None
        self._href = None
        self._run_origin = None
        self._regulatory_mode = None
        self._instrument_run_id = None
        self._external_run_id = None
        self._run_name = None
        self._description = None
        self._is_planned = None
        self._aggregate_run_status = None
        self._verification_status = None
        self._verification_status_summary = None
        self._verification_completed = None
        self._verification_time_started = None
        self._verification_time_completed = None
        self._instrument_run_status = None
        self._instrument_run_status_summary = None
        self._instrument_run_completed = None
        self._instrument_run_time_started = None
        self._instrument_run_time_completed = None
        self._instrument_completed = None
        self._instrument_time_started = None
        self._instrument_time_completed = None
        self._sequencing_completed = None
        self._sequencing_time_started = None
        self._sequencing_time_completed = None
        self._instrument_analysis_status = None
        self._instrument_analysis_status_summary = None
        self._instrument_analysis_performed = None
        self._instrument_analysis_completed = None
        self._instrument_analysis_time_started = None
        self._instrument_analysis_time_completed = None
        self._run_upload_status = None
        self._run_upload_status_summary = None
        self._run_upload_completed = None
        self._run_upload_time_started = None
        self._run_upload_time_completed = None
        self._is_completed = None
        self._is_failed = None
        self._run_failure_type = None
        self._run_failure_reason = None
        self._needs_attention = None
        self._needs_attention_reason = None
        self._is_aborted = None
        self._is_timed_out = None
        self._prep_kit_info = None
        self._genome_info = None
        self._flow_cell_barcode = None
        self._input_container_identifier = None
        self._consumables = None
        self._run_mode = None
        self._instrument_run_number = None
        self._sample_sheet_name = None
        self._data_volume_urn = None
        self._data_folder_urn = None
        self._data_folder_volume_path = None
        self._total_size = None
        self._locked_by = None
        self._started_by = None
        self._time_locked = None
        self._is_locked = None
        self._config = None
        self._instrument = None
        self._instrument_type_snapshot = None
        self._instrument_software_version = None
        self._analysis_location = None
        self._analysis_summaries = None
        self._run_analysis_settings = None
        self._is_favorite = None
        self._external_location = None
        self._checksum_of_manifest = None
        self._requeued_from_run = None
        self._requeue_reason = None
        self._verification_results = None
        self._can_edit_run = None
        self._can_requeue_run = None
        self._can_delete = None
        self._analysis_time_started = None
        self._analysis_time_completed = None
        self._run_time_completed = None
        self._run_sequencing_stats = None
        self._analysis_runs = None
        self._sub_tenant_id = None
        self._acl = None
        self._tenant_id = None
        self._tenant_name = None
        self._created_by_client_id = None
        self._created_by = None
        self._modified_by = None
        self._time_created = None
        self._time_modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urn is not None:
            self.urn = urn
        if href is not None:
            self.href = href
        if run_origin is not None:
            self.run_origin = run_origin
        if regulatory_mode is not None:
            self.regulatory_mode = regulatory_mode
        if instrument_run_id is not None:
            self.instrument_run_id = instrument_run_id
        if external_run_id is not None:
            self.external_run_id = external_run_id
        if run_name is not None:
            self.run_name = run_name
        if description is not None:
            self.description = description
        if is_planned is not None:
            self.is_planned = is_planned
        if aggregate_run_status is not None:
            self.aggregate_run_status = aggregate_run_status
        if verification_status is not None:
            self.verification_status = verification_status
        if verification_status_summary is not None:
            self.verification_status_summary = verification_status_summary
        if verification_completed is not None:
            self.verification_completed = verification_completed
        if verification_time_started is not None:
            self.verification_time_started = verification_time_started
        if verification_time_completed is not None:
            self.verification_time_completed = verification_time_completed
        if instrument_run_status is not None:
            self.instrument_run_status = instrument_run_status
        if instrument_run_status_summary is not None:
            self.instrument_run_status_summary = instrument_run_status_summary
        if instrument_run_completed is not None:
            self.instrument_run_completed = instrument_run_completed
        if instrument_run_time_started is not None:
            self.instrument_run_time_started = instrument_run_time_started
        if instrument_run_time_completed is not None:
            self.instrument_run_time_completed = instrument_run_time_completed
        if instrument_completed is not None:
            self.instrument_completed = instrument_completed
        if instrument_time_started is not None:
            self.instrument_time_started = instrument_time_started
        if instrument_time_completed is not None:
            self.instrument_time_completed = instrument_time_completed
        if sequencing_completed is not None:
            self.sequencing_completed = sequencing_completed
        if sequencing_time_started is not None:
            self.sequencing_time_started = sequencing_time_started
        if sequencing_time_completed is not None:
            self.sequencing_time_completed = sequencing_time_completed
        if instrument_analysis_status is not None:
            self.instrument_analysis_status = instrument_analysis_status
        if instrument_analysis_status_summary is not None:
            self.instrument_analysis_status_summary = instrument_analysis_status_summary
        if instrument_analysis_performed is not None:
            self.instrument_analysis_performed = instrument_analysis_performed
        if instrument_analysis_completed is not None:
            self.instrument_analysis_completed = instrument_analysis_completed
        if instrument_analysis_time_started is not None:
            self.instrument_analysis_time_started = instrument_analysis_time_started
        if instrument_analysis_time_completed is not None:
            self.instrument_analysis_time_completed = instrument_analysis_time_completed
        if run_upload_status is not None:
            self.run_upload_status = run_upload_status
        if run_upload_status_summary is not None:
            self.run_upload_status_summary = run_upload_status_summary
        if run_upload_completed is not None:
            self.run_upload_completed = run_upload_completed
        if run_upload_time_started is not None:
            self.run_upload_time_started = run_upload_time_started
        if run_upload_time_completed is not None:
            self.run_upload_time_completed = run_upload_time_completed
        if is_completed is not None:
            self.is_completed = is_completed
        if is_failed is not None:
            self.is_failed = is_failed
        if run_failure_type is not None:
            self.run_failure_type = run_failure_type
        if run_failure_reason is not None:
            self.run_failure_reason = run_failure_reason
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if needs_attention_reason is not None:
            self.needs_attention_reason = needs_attention_reason
        if is_aborted is not None:
            self.is_aborted = is_aborted
        if is_timed_out is not None:
            self.is_timed_out = is_timed_out
        if prep_kit_info is not None:
            self.prep_kit_info = prep_kit_info
        if genome_info is not None:
            self.genome_info = genome_info
        if flow_cell_barcode is not None:
            self.flow_cell_barcode = flow_cell_barcode
        if input_container_identifier is not None:
            self.input_container_identifier = input_container_identifier
        if consumables is not None:
            self.consumables = consumables
        if run_mode is not None:
            self.run_mode = run_mode
        if instrument_run_number is not None:
            self.instrument_run_number = instrument_run_number
        if sample_sheet_name is not None:
            self.sample_sheet_name = sample_sheet_name
        if data_volume_urn is not None:
            self.data_volume_urn = data_volume_urn
        if data_folder_urn is not None:
            self.data_folder_urn = data_folder_urn
        if data_folder_volume_path is not None:
            self.data_folder_volume_path = data_folder_volume_path
        if total_size is not None:
            self.total_size = total_size
        if locked_by is not None:
            self.locked_by = locked_by
        if started_by is not None:
            self.started_by = started_by
        if time_locked is not None:
            self.time_locked = time_locked
        if is_locked is not None:
            self.is_locked = is_locked
        if config is not None:
            self.config = config
        if instrument is not None:
            self.instrument = instrument
        if instrument_type_snapshot is not None:
            self.instrument_type_snapshot = instrument_type_snapshot
        if instrument_software_version is not None:
            self.instrument_software_version = instrument_software_version
        if analysis_location is not None:
            self.analysis_location = analysis_location
        if analysis_summaries is not None:
            self.analysis_summaries = analysis_summaries
        if run_analysis_settings is not None:
            self.run_analysis_settings = run_analysis_settings
        if is_favorite is not None:
            self.is_favorite = is_favorite
        if external_location is not None:
            self.external_location = external_location
        if checksum_of_manifest is not None:
            self.checksum_of_manifest = checksum_of_manifest
        if requeued_from_run is not None:
            self.requeued_from_run = requeued_from_run
        if requeue_reason is not None:
            self.requeue_reason = requeue_reason
        if verification_results is not None:
            self.verification_results = verification_results
        if can_edit_run is not None:
            self.can_edit_run = can_edit_run
        if can_requeue_run is not None:
            self.can_requeue_run = can_requeue_run
        if can_delete is not None:
            self.can_delete = can_delete
        if analysis_time_started is not None:
            self.analysis_time_started = analysis_time_started
        if analysis_time_completed is not None:
            self.analysis_time_completed = analysis_time_completed
        if run_time_completed is not None:
            self.run_time_completed = run_time_completed
        if run_sequencing_stats is not None:
            self.run_sequencing_stats = run_sequencing_stats
        if analysis_runs is not None:
            self.analysis_runs = analysis_runs
        if sub_tenant_id is not None:
            self.sub_tenant_id = sub_tenant_id
        if acl is not None:
            self.acl = acl
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if created_by_client_id is not None:
            self.created_by_client_id = created_by_client_id
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if time_created is not None:
            self.time_created = time_created
        if time_modified is not None:
            self.time_modified = time_modified

    @property
    def id(self):
        """Gets the id of this SequencingRunCompact.  # noqa: E501

        Unique object ID  # noqa: E501

        :return: The id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SequencingRunCompact.

        Unique object ID  # noqa: E501

        :param id: The id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def urn(self):
        """Gets the urn of this SequencingRunCompact.  # noqa: E501

        URN of the object  # noqa: E501

        :return: The urn of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this SequencingRunCompact.

        URN of the object  # noqa: E501

        :param urn: The urn of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def href(self):
        """Gets the href of this SequencingRunCompact.  # noqa: E501

        HREF to the object  # noqa: E501

        :return: The href of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SequencingRunCompact.

        HREF to the object  # noqa: E501

        :param href: The href of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def run_origin(self):
        """Gets the run_origin of this SequencingRunCompact.  # noqa: E501

        Origin of the run data (Instrument, InstrumentPostRunUpload, Simulated, etc.)  # noqa: E501

        :return: The run_origin of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_origin

    @run_origin.setter
    def run_origin(self, run_origin):
        """Sets the run_origin of this SequencingRunCompact.

        Origin of the run data (Instrument, InstrumentPostRunUpload, Simulated, etc.)  # noqa: E501

        :param run_origin: The run_origin of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_origin = run_origin

    @property
    def regulatory_mode(self):
        """Gets the regulatory_mode of this SequencingRunCompact.  # noqa: E501

        Regulatory mode of the run  # noqa: E501

        :return: The regulatory_mode of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._regulatory_mode

    @regulatory_mode.setter
    def regulatory_mode(self, regulatory_mode):
        """Sets the regulatory_mode of this SequencingRunCompact.

        Regulatory mode of the run  # noqa: E501

        :param regulatory_mode: The regulatory_mode of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._regulatory_mode = regulatory_mode

    @property
    def instrument_run_id(self):
        """Gets the instrument_run_id of this SequencingRunCompact.  # noqa: E501

        Run ID typically generated by instrument (not guaranteed to be unique for either tenant or system)  # noqa: E501

        :return: The instrument_run_id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_id

    @instrument_run_id.setter
    def instrument_run_id(self, instrument_run_id):
        """Sets the instrument_run_id of this SequencingRunCompact.

        Run ID typically generated by instrument (not guaranteed to be unique for either tenant or system)  # noqa: E501

        :param instrument_run_id: The instrument_run_id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_run_id = instrument_run_id

    @property
    def external_run_id(self):
        """Gets the external_run_id of this SequencingRunCompact.  # noqa: E501

        ID of the sequencing run in another system  # noqa: E501

        :return: The external_run_id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._external_run_id

    @external_run_id.setter
    def external_run_id(self, external_run_id):
        """Sets the external_run_id of this SequencingRunCompact.

        ID of the sequencing run in another system  # noqa: E501

        :param external_run_id: The external_run_id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._external_run_id = external_run_id

    @property
    def run_name(self):
        """Gets the run_name of this SequencingRunCompact.  # noqa: E501

        User-supplied name of the experiment/run (not guaranteed to be unique for either tenant or system)  # noqa: E501

        :return: The run_name of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this SequencingRunCompact.

        User-supplied name of the experiment/run (not guaranteed to be unique for either tenant or system)  # noqa: E501

        :param run_name: The run_name of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def description(self):
        """Gets the description of this SequencingRunCompact.  # noqa: E501

        User-supplied description of the run  # noqa: E501

        :return: The description of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SequencingRunCompact.

        User-supplied description of the run  # noqa: E501

        :param description: The description of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_planned(self):
        """Gets the is_planned of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the run is in the planning stage (including while locked and assigned to an instrument)  # noqa: E501

        :return: The is_planned of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_planned

    @is_planned.setter
    def is_planned(self, is_planned):
        """Sets the is_planned of this SequencingRunCompact.

        Indicates with value 'true' when the run is in the planning stage (including while locked and assigned to an instrument)  # noqa: E501

        :param is_planned: The is_planned of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_planned = is_planned

    @property
    def aggregate_run_status(self):
        """Gets the aggregate_run_status of this SequencingRunCompact.  # noqa: E501

        Overall status of the run across all stages, including the status of post-upload cloud processing  # noqa: E501

        :return: The aggregate_run_status of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_run_status

    @aggregate_run_status.setter
    def aggregate_run_status(self, aggregate_run_status):
        """Sets the aggregate_run_status of this SequencingRunCompact.

        Overall status of the run across all stages, including the status of post-upload cloud processing  # noqa: E501

        :param aggregate_run_status: The aggregate_run_status of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._aggregate_run_status = aggregate_run_status

    @property
    def verification_status(self):
        """Gets the verification_status of this SequencingRunCompact.  # noqa: E501

        Status of the verification stage  # noqa: E501

        :return: The verification_status of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this SequencingRunCompact.

        Status of the verification stage  # noqa: E501

        :param verification_status: The verification_status of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._verification_status = verification_status

    @property
    def verification_status_summary(self):
        """Gets the verification_status_summary of this SequencingRunCompact.  # noqa: E501

        Summary of the current status of the run  # noqa: E501

        :return: The verification_status_summary of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._verification_status_summary

    @verification_status_summary.setter
    def verification_status_summary(self, verification_status_summary):
        """Sets the verification_status_summary of this SequencingRunCompact.

        Summary of the current status of the run  # noqa: E501

        :param verification_status_summary: The verification_status_summary of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._verification_status_summary = verification_status_summary

    @property
    def verification_completed(self):
        """Gets the verification_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the verification stage completes  # noqa: E501

        :return: The verification_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._verification_completed

    @verification_completed.setter
    def verification_completed(self, verification_completed):
        """Sets the verification_completed of this SequencingRunCompact.

        Indicates with value 'true' when the verification stage completes  # noqa: E501

        :param verification_completed: The verification_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._verification_completed = verification_completed

    @property
    def verification_time_started(self):
        """Gets the verification_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the verification stage started  # noqa: E501

        :return: The verification_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_time_started

    @verification_time_started.setter
    def verification_time_started(self, verification_time_started):
        """Sets the verification_time_started of this SequencingRunCompact.

        Time when the verification stage started  # noqa: E501

        :param verification_time_started: The verification_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._verification_time_started = verification_time_started

    @property
    def verification_time_completed(self):
        """Gets the verification_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the run fully completed on the instrument (if set, this marks the end of the verification stage)  # noqa: E501

        :return: The verification_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._verification_time_completed

    @verification_time_completed.setter
    def verification_time_completed(self, verification_time_completed):
        """Sets the verification_time_completed of this SequencingRunCompact.

        Time when the run fully completed on the instrument (if set, this marks the end of the verification stage)  # noqa: E501

        :param verification_time_completed: The verification_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._verification_time_completed = verification_time_completed

    @property
    def instrument_run_status(self):
        """Gets the instrument_run_status of this SequencingRunCompact.  # noqa: E501

        Status of the instrument run stage  # noqa: E501

        :return: The instrument_run_status of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_status

    @instrument_run_status.setter
    def instrument_run_status(self, instrument_run_status):
        """Sets the instrument_run_status of this SequencingRunCompact.

        Status of the instrument run stage  # noqa: E501

        :param instrument_run_status: The instrument_run_status of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_run_status = instrument_run_status

    @property
    def instrument_run_status_summary(self):
        """Gets the instrument_run_status_summary of this SequencingRunCompact.  # noqa: E501

        Summary of the current status of the run  # noqa: E501

        :return: The instrument_run_status_summary of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_status_summary

    @instrument_run_status_summary.setter
    def instrument_run_status_summary(self, instrument_run_status_summary):
        """Sets the instrument_run_status_summary of this SequencingRunCompact.

        Summary of the current status of the run  # noqa: E501

        :param instrument_run_status_summary: The instrument_run_status_summary of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_run_status_summary = instrument_run_status_summary

    @property
    def instrument_run_completed(self):
        """Gets the instrument_run_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the instrument run stage completes  # noqa: E501

        :return: The instrument_run_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._instrument_run_completed

    @instrument_run_completed.setter
    def instrument_run_completed(self, instrument_run_completed):
        """Sets the instrument_run_completed of this SequencingRunCompact.

        Indicates with value 'true' when the instrument run stage completes  # noqa: E501

        :param instrument_run_completed: The instrument_run_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._instrument_run_completed = instrument_run_completed

    @property
    def instrument_run_time_started(self):
        """Gets the instrument_run_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the instrument run stage started  # noqa: E501

        :return: The instrument_run_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_run_time_started

    @instrument_run_time_started.setter
    def instrument_run_time_started(self, instrument_run_time_started):
        """Sets the instrument_run_time_started of this SequencingRunCompact.

        Time when the instrument run stage started  # noqa: E501

        :param instrument_run_time_started: The instrument_run_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_run_time_started = instrument_run_time_started

    @property
    def instrument_run_time_completed(self):
        """Gets the instrument_run_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the run fully completed on the instrument (if set, this marks the end of the instrument run stage)  # noqa: E501

        :return: The instrument_run_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_run_time_completed

    @instrument_run_time_completed.setter
    def instrument_run_time_completed(self, instrument_run_time_completed):
        """Sets the instrument_run_time_completed of this SequencingRunCompact.

        Time when the run fully completed on the instrument (if set, this marks the end of the instrument run stage)  # noqa: E501

        :param instrument_run_time_completed: The instrument_run_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_run_time_completed = instrument_run_time_completed

    @property
    def instrument_completed(self):
        """Gets the instrument_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the instrument sub-stage completes  # noqa: E501

        :return: The instrument_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._instrument_completed

    @instrument_completed.setter
    def instrument_completed(self, instrument_completed):
        """Sets the instrument_completed of this SequencingRunCompact.

        Indicates with value 'true' when the instrument sub-stage completes  # noqa: E501

        :param instrument_completed: The instrument_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._instrument_completed = instrument_completed

    @property
    def instrument_time_started(self):
        """Gets the instrument_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the instrument starts active work on the run (marks the start of the instrument sub-stage)  # noqa: E501

        :return: The instrument_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_time_started

    @instrument_time_started.setter
    def instrument_time_started(self, instrument_time_started):
        """Sets the instrument_time_started of this SequencingRunCompact.

        Time when the instrument starts active work on the run (marks the start of the instrument sub-stage)  # noqa: E501

        :param instrument_time_started: The instrument_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_time_started = instrument_time_started

    @property
    def instrument_time_completed(self):
        """Gets the instrument_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the instrument completes active work on the run (excluding background file upload)  # noqa: E501

        :return: The instrument_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_time_completed

    @instrument_time_completed.setter
    def instrument_time_completed(self, instrument_time_completed):
        """Sets the instrument_time_completed of this SequencingRunCompact.

        Time when the instrument completes active work on the run (excluding background file upload)  # noqa: E501

        :param instrument_time_completed: The instrument_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_time_completed = instrument_time_completed

    @property
    def sequencing_completed(self):
        """Gets the sequencing_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the sequencing sub-stage completes  # noqa: E501

        :return: The sequencing_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._sequencing_completed

    @sequencing_completed.setter
    def sequencing_completed(self, sequencing_completed):
        """Sets the sequencing_completed of this SequencingRunCompact.

        Indicates with value 'true' when the sequencing sub-stage completes  # noqa: E501

        :param sequencing_completed: The sequencing_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._sequencing_completed = sequencing_completed

    @property
    def sequencing_time_started(self):
        """Gets the sequencing_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the sequencing sub-stage started  # noqa: E501

        :return: The sequencing_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._sequencing_time_started

    @sequencing_time_started.setter
    def sequencing_time_started(self, sequencing_time_started):
        """Sets the sequencing_time_started of this SequencingRunCompact.

        Time when the sequencing sub-stage started  # noqa: E501

        :param sequencing_time_started: The sequencing_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._sequencing_time_started = sequencing_time_started

    @property
    def sequencing_time_completed(self):
        """Gets the sequencing_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the sequencing sub-stage completed  # noqa: E501

        :return: The sequencing_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._sequencing_time_completed

    @sequencing_time_completed.setter
    def sequencing_time_completed(self, sequencing_time_completed):
        """Sets the sequencing_time_completed of this SequencingRunCompact.

        Time when the sequencing sub-stage completed  # noqa: E501

        :param sequencing_time_completed: The sequencing_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._sequencing_time_completed = sequencing_time_completed

    @property
    def instrument_analysis_status(self):
        """Gets the instrument_analysis_status of this SequencingRunCompact.  # noqa: E501

        Status of the on-instrument analysis software  # noqa: E501

        :return: The instrument_analysis_status of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_analysis_status

    @instrument_analysis_status.setter
    def instrument_analysis_status(self, instrument_analysis_status):
        """Sets the instrument_analysis_status of this SequencingRunCompact.

        Status of the on-instrument analysis software  # noqa: E501

        :param instrument_analysis_status: The instrument_analysis_status of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_analysis_status = instrument_analysis_status

    @property
    def instrument_analysis_status_summary(self):
        """Gets the instrument_analysis_status_summary of this SequencingRunCompact.  # noqa: E501

        Summary of the instrument analysis status  # noqa: E501

        :return: The instrument_analysis_status_summary of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_analysis_status_summary

    @instrument_analysis_status_summary.setter
    def instrument_analysis_status_summary(self, instrument_analysis_status_summary):
        """Sets the instrument_analysis_status_summary of this SequencingRunCompact.

        Summary of the instrument analysis status  # noqa: E501

        :param instrument_analysis_status_summary: The instrument_analysis_status_summary of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_analysis_status_summary = instrument_analysis_status_summary

    @property
    def instrument_analysis_performed(self):
        """Gets the instrument_analysis_performed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' if instrument analysis is being performed for the run  # noqa: E501

        :return: The instrument_analysis_performed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._instrument_analysis_performed

    @instrument_analysis_performed.setter
    def instrument_analysis_performed(self, instrument_analysis_performed):
        """Sets the instrument_analysis_performed of this SequencingRunCompact.

        Indicates with value 'true' if instrument analysis is being performed for the run  # noqa: E501

        :param instrument_analysis_performed: The instrument_analysis_performed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._instrument_analysis_performed = instrument_analysis_performed

    @property
    def instrument_analysis_completed(self):
        """Gets the instrument_analysis_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the instrument analysis sub-stage completes  # noqa: E501

        :return: The instrument_analysis_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._instrument_analysis_completed

    @instrument_analysis_completed.setter
    def instrument_analysis_completed(self, instrument_analysis_completed):
        """Sets the instrument_analysis_completed of this SequencingRunCompact.

        Indicates with value 'true' when the instrument analysis sub-stage completes  # noqa: E501

        :param instrument_analysis_completed: The instrument_analysis_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._instrument_analysis_completed = instrument_analysis_completed

    @property
    def instrument_analysis_time_started(self):
        """Gets the instrument_analysis_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the analysis starts on the instrument (marks the start of instrument analysis sub-stage)  # noqa: E501

        :return: The instrument_analysis_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_analysis_time_started

    @instrument_analysis_time_started.setter
    def instrument_analysis_time_started(self, instrument_analysis_time_started):
        """Sets the instrument_analysis_time_started of this SequencingRunCompact.

        Time when the analysis starts on the instrument (marks the start of instrument analysis sub-stage)  # noqa: E501

        :param instrument_analysis_time_started: The instrument_analysis_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_analysis_time_started = instrument_analysis_time_started

    @property
    def instrument_analysis_time_completed(self):
        """Gets the instrument_analysis_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the analysis completed on the instrument  # noqa: E501

        :return: The instrument_analysis_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._instrument_analysis_time_completed

    @instrument_analysis_time_completed.setter
    def instrument_analysis_time_completed(self, instrument_analysis_time_completed):
        """Sets the instrument_analysis_time_completed of this SequencingRunCompact.

        Time when the analysis completed on the instrument  # noqa: E501

        :param instrument_analysis_time_completed: The instrument_analysis_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._instrument_analysis_time_completed = instrument_analysis_time_completed

    @property
    def run_upload_status(self):
        """Gets the run_upload_status of this SequencingRunCompact.  # noqa: E501

        Status of data upload from instrument  # noqa: E501

        :return: The run_upload_status of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_upload_status

    @run_upload_status.setter
    def run_upload_status(self, run_upload_status):
        """Sets the run_upload_status of this SequencingRunCompact.

        Status of data upload from instrument  # noqa: E501

        :param run_upload_status: The run_upload_status of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_upload_status = run_upload_status

    @property
    def run_upload_status_summary(self):
        """Gets the run_upload_status_summary of this SequencingRunCompact.  # noqa: E501

        Detailed summary of run upload status/progress  # noqa: E501

        :return: The run_upload_status_summary of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_upload_status_summary

    @run_upload_status_summary.setter
    def run_upload_status_summary(self, run_upload_status_summary):
        """Sets the run_upload_status_summary of this SequencingRunCompact.

        Detailed summary of run upload status/progress  # noqa: E501

        :param run_upload_status_summary: The run_upload_status_summary of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_upload_status_summary = run_upload_status_summary

    @property
    def run_upload_completed(self):
        """Gets the run_upload_completed of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' when the run upload sub-stage completes  # noqa: E501

        :return: The run_upload_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._run_upload_completed

    @run_upload_completed.setter
    def run_upload_completed(self, run_upload_completed):
        """Sets the run_upload_completed of this SequencingRunCompact.

        Indicates with value 'true' when the run upload sub-stage completes  # noqa: E501

        :param run_upload_completed: The run_upload_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._run_upload_completed = run_upload_completed

    @property
    def run_upload_time_started(self):
        """Gets the run_upload_time_started of this SequencingRunCompact.  # noqa: E501

        Time when the data upload starts (marks the start of upload sub-stage)  # noqa: E501

        :return: The run_upload_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._run_upload_time_started

    @run_upload_time_started.setter
    def run_upload_time_started(self, run_upload_time_started):
        """Sets the run_upload_time_started of this SequencingRunCompact.

        Time when the data upload starts (marks the start of upload sub-stage)  # noqa: E501

        :param run_upload_time_started: The run_upload_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._run_upload_time_started = run_upload_time_started

    @property
    def run_upload_time_completed(self):
        """Gets the run_upload_time_completed of this SequencingRunCompact.  # noqa: E501

        Time when the run upload sub-stage completed  # noqa: E501

        :return: The run_upload_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._run_upload_time_completed

    @run_upload_time_completed.setter
    def run_upload_time_completed(self, run_upload_time_completed):
        """Sets the run_upload_time_completed of this SequencingRunCompact.

        Time when the run upload sub-stage completed  # noqa: E501

        :param run_upload_time_completed: The run_upload_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._run_upload_time_completed = run_upload_time_completed

    @property
    def is_completed(self):
        """Gets the is_completed of this SequencingRunCompact.  # noqa: E501

        Indicates whether the run is in terminal state  # noqa: E501

        :return: The is_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this SequencingRunCompact.

        Indicates whether the run is in terminal state  # noqa: E501

        :param is_completed: The is_completed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_completed = is_completed

    @property
    def is_failed(self):
        """Gets the is_failed of this SequencingRunCompact.  # noqa: E501

        Indicates whether the run failed  # noqa: E501

        :return: The is_failed of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_failed

    @is_failed.setter
    def is_failed(self, is_failed):
        """Sets the is_failed of this SequencingRunCompact.

        Indicates whether the run failed  # noqa: E501

        :param is_failed: The is_failed of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_failed = is_failed

    @property
    def run_failure_type(self):
        """Gets the run_failure_type of this SequencingRunCompact.  # noqa: E501

        Indicates the FailureType of the run (e.g None, InstrumentFailure, InstrumentSequencingFailure etc.)  # noqa: E501

        :return: The run_failure_type of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_failure_type

    @run_failure_type.setter
    def run_failure_type(self, run_failure_type):
        """Sets the run_failure_type of this SequencingRunCompact.

        Indicates the FailureType of the run (e.g None, InstrumentFailure, InstrumentSequencingFailure etc.)  # noqa: E501

        :param run_failure_type: The run_failure_type of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_failure_type = run_failure_type

    @property
    def run_failure_reason(self):
        """Gets the run_failure_reason of this SequencingRunCompact.  # noqa: E501

        Specifies the reason why the run failure occurred  # noqa: E501

        :return: The run_failure_reason of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_failure_reason

    @run_failure_reason.setter
    def run_failure_reason(self, run_failure_reason):
        """Sets the run_failure_reason of this SequencingRunCompact.

        Specifies the reason why the run failure occurred  # noqa: E501

        :param run_failure_reason: The run_failure_reason of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_failure_reason = run_failure_reason

    @property
    def needs_attention(self):
        """Gets the needs_attention of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' if the run needs attention  # noqa: E501

        :return: The needs_attention of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this SequencingRunCompact.

        Indicates with value 'true' if the run needs attention  # noqa: E501

        :param needs_attention: The needs_attention of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def needs_attention_reason(self):
        """Gets the needs_attention_reason of this SequencingRunCompact.  # noqa: E501

        Reason why the run needs attention  # noqa: E501

        :return: The needs_attention_reason of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._needs_attention_reason

    @needs_attention_reason.setter
    def needs_attention_reason(self, needs_attention_reason):
        """Sets the needs_attention_reason of this SequencingRunCompact.

        Reason why the run needs attention  # noqa: E501

        :param needs_attention_reason: The needs_attention_reason of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._needs_attention_reason = needs_attention_reason

    @property
    def is_aborted(self):
        """Gets the is_aborted of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' that the run was stopped, canceled, or aborted  # noqa: E501

        :return: The is_aborted of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_aborted

    @is_aborted.setter
    def is_aborted(self, is_aborted):
        """Sets the is_aborted of this SequencingRunCompact.

        Indicates with value 'true' that the run was stopped, canceled, or aborted  # noqa: E501

        :param is_aborted: The is_aborted of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_aborted = is_aborted

    @property
    def is_timed_out(self):
        """Gets the is_timed_out of this SequencingRunCompact.  # noqa: E501

        Indicates with value 'true' if the run timed out  # noqa: E501

        :return: The is_timed_out of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_timed_out

    @is_timed_out.setter
    def is_timed_out(self, is_timed_out):
        """Sets the is_timed_out of this SequencingRunCompact.

        Indicates with value 'true' if the run timed out  # noqa: E501

        :param is_timed_out: The is_timed_out of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_timed_out = is_timed_out

    @property
    def prep_kit_info(self):
        """Gets the prep_kit_info of this SequencingRunCompact.  # noqa: E501


        :return: The prep_kit_info of this SequencingRunCompact.  # noqa: E501
        :rtype: SequencingRunPrepKitInfo
        """
        return self._prep_kit_info

    @prep_kit_info.setter
    def prep_kit_info(self, prep_kit_info):
        """Sets the prep_kit_info of this SequencingRunCompact.


        :param prep_kit_info: The prep_kit_info of this SequencingRunCompact.  # noqa: E501
        :type: SequencingRunPrepKitInfo
        """

        self._prep_kit_info = prep_kit_info

    @property
    def genome_info(self):
        """Gets the genome_info of this SequencingRunCompact.  # noqa: E501


        :return: The genome_info of this SequencingRunCompact.  # noqa: E501
        :rtype: SequencingRunGenomeInfo
        """
        return self._genome_info

    @genome_info.setter
    def genome_info(self, genome_info):
        """Sets the genome_info of this SequencingRunCompact.


        :param genome_info: The genome_info of this SequencingRunCompact.  # noqa: E501
        :type: SequencingRunGenomeInfo
        """

        self._genome_info = genome_info

    @property
    def flow_cell_barcode(self):
        """Gets the flow_cell_barcode of this SequencingRunCompact.  # noqa: E501

        Barcode of the flow cell used in the sequencing run  # noqa: E501

        :return: The flow_cell_barcode of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._flow_cell_barcode

    @flow_cell_barcode.setter
    def flow_cell_barcode(self, flow_cell_barcode):
        """Sets the flow_cell_barcode of this SequencingRunCompact.

        Barcode of the flow cell used in the sequencing run  # noqa: E501

        :param flow_cell_barcode: The flow_cell_barcode of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._flow_cell_barcode = flow_cell_barcode

    @property
    def input_container_identifier(self):
        """Gets the input_container_identifier of this SequencingRunCompact.  # noqa: E501

        Input container identifier used in the sequencing run  # noqa: E501

        :return: The input_container_identifier of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._input_container_identifier

    @input_container_identifier.setter
    def input_container_identifier(self, input_container_identifier):
        """Sets the input_container_identifier of this SequencingRunCompact.

        Input container identifier used in the sequencing run  # noqa: E501

        :param input_container_identifier: The input_container_identifier of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._input_container_identifier = input_container_identifier

    @property
    def consumables(self):
        """Gets the consumables of this SequencingRunCompact.  # noqa: E501

        Information (such as barcodes) about consumables (such as reagents, buffers, etc.) used in the sequencing run  # noqa: E501

        :return: The consumables of this SequencingRunCompact.  # noqa: E501
        :rtype: object
        """
        return self._consumables

    @consumables.setter
    def consumables(self, consumables):
        """Sets the consumables of this SequencingRunCompact.

        Information (such as barcodes) about consumables (such as reagents, buffers, etc.) used in the sequencing run  # noqa: E501

        :param consumables: The consumables of this SequencingRunCompact.  # noqa: E501
        :type: object
        """

        self._consumables = consumables

    @property
    def run_mode(self):
        """Gets the run_mode of this SequencingRunCompact.  # noqa: E501

        Describes the analysis and proactive data that is uploaded and processed in the cloud  # noqa: E501

        :return: The run_mode of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._run_mode

    @run_mode.setter
    def run_mode(self, run_mode):
        """Sets the run_mode of this SequencingRunCompact.

        Describes the analysis and proactive data that is uploaded and processed in the cloud  # noqa: E501

        :param run_mode: The run_mode of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._run_mode = run_mode

    @property
    def instrument_run_number(self):
        """Gets the instrument_run_number of this SequencingRunCompact.  # noqa: E501

        Records the number of runs performed on a specific instrument  # noqa: E501

        :return: The instrument_run_number of this SequencingRunCompact.  # noqa: E501
        :rtype: int
        """
        return self._instrument_run_number

    @instrument_run_number.setter
    def instrument_run_number(self, instrument_run_number):
        """Sets the instrument_run_number of this SequencingRunCompact.

        Records the number of runs performed on a specific instrument  # noqa: E501

        :param instrument_run_number: The instrument_run_number of this SequencingRunCompact.  # noqa: E501
        :type: int
        """

        self._instrument_run_number = instrument_run_number

    @property
    def sample_sheet_name(self):
        """Gets the sample_sheet_name of this SequencingRunCompact.  # noqa: E501

        Name of the sample sheet file  # noqa: E501

        :return: The sample_sheet_name of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._sample_sheet_name

    @sample_sheet_name.setter
    def sample_sheet_name(self, sample_sheet_name):
        """Sets the sample_sheet_name of this SequencingRunCompact.

        Name of the sample sheet file  # noqa: E501

        :param sample_sheet_name: The sample_sheet_name of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._sample_sheet_name = sample_sheet_name

    @property
    def data_volume_urn(self):
        """Gets the data_volume_urn of this SequencingRunCompact.  # noqa: E501

        URN of the data volume where run data is stored  # noqa: E501

        :return: The data_volume_urn of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._data_volume_urn

    @data_volume_urn.setter
    def data_volume_urn(self, data_volume_urn):
        """Sets the data_volume_urn of this SequencingRunCompact.

        URN of the data volume where run data is stored  # noqa: E501

        :param data_volume_urn: The data_volume_urn of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._data_volume_urn = data_volume_urn

    @property
    def data_folder_urn(self):
        """Gets the data_folder_urn of this SequencingRunCompact.  # noqa: E501

        URN of the data folder where run data is stored  # noqa: E501

        :return: The data_folder_urn of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._data_folder_urn

    @data_folder_urn.setter
    def data_folder_urn(self, data_folder_urn):
        """Sets the data_folder_urn of this SequencingRunCompact.

        URN of the data folder where run data is stored  # noqa: E501

        :param data_folder_urn: The data_folder_urn of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._data_folder_urn = data_folder_urn

    @property
    def data_folder_volume_path(self):
        """Gets the data_folder_volume_path of this SequencingRunCompact.  # noqa: E501

        Path with volume of the data folder where run data is stored  # noqa: E501

        :return: The data_folder_volume_path of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._data_folder_volume_path

    @data_folder_volume_path.setter
    def data_folder_volume_path(self, data_folder_volume_path):
        """Sets the data_folder_volume_path of this SequencingRunCompact.

        Path with volume of the data folder where run data is stored  # noqa: E501

        :param data_folder_volume_path: The data_folder_volume_path of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._data_folder_volume_path = data_folder_volume_path

    @property
    def total_size(self):
        """Gets the total_size of this SequencingRunCompact.  # noqa: E501

        Total size of the run data files in bytes when the run data was first uploaded  # noqa: E501

        :return: The total_size of this SequencingRunCompact.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this SequencingRunCompact.

        Total size of the run data files in bytes when the run data was first uploaded  # noqa: E501

        :param total_size: The total_size of this SequencingRunCompact.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def locked_by(self):
        """Gets the locked_by of this SequencingRunCompact.  # noqa: E501

        User that locked the sequencing run  # noqa: E501

        :return: The locked_by of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._locked_by

    @locked_by.setter
    def locked_by(self, locked_by):
        """Sets the locked_by of this SequencingRunCompact.

        User that locked the sequencing run  # noqa: E501

        :param locked_by: The locked_by of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._locked_by = locked_by

    @property
    def started_by(self):
        """Gets the started_by of this SequencingRunCompact.  # noqa: E501

        User that started the sequencing run  # noqa: E501

        :return: The started_by of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this SequencingRunCompact.

        User that started the sequencing run  # noqa: E501

        :param started_by: The started_by of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._started_by = started_by

    @property
    def time_locked(self):
        """Gets the time_locked of this SequencingRunCompact.  # noqa: E501

        Time (in UTC) the sequencing run was locked  # noqa: E501

        :return: The time_locked of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._time_locked

    @time_locked.setter
    def time_locked(self, time_locked):
        """Sets the time_locked of this SequencingRunCompact.

        Time (in UTC) the sequencing run was locked  # noqa: E501

        :param time_locked: The time_locked of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._time_locked = time_locked

    @property
    def is_locked(self):
        """Gets the is_locked of this SequencingRunCompact.  # noqa: E501

        Specifies whether or not the sequencing run has been locked  # noqa: E501

        :return: The is_locked of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this SequencingRunCompact.

        Specifies whether or not the sequencing run has been locked  # noqa: E501

        :param is_locked: The is_locked of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def config(self):
        """Gets the config of this SequencingRunCompact.  # noqa: E501


        :return: The config of this SequencingRunCompact.  # noqa: E501
        :rtype: SequencingRunConfiguration
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this SequencingRunCompact.


        :param config: The config of this SequencingRunCompact.  # noqa: E501
        :type: SequencingRunConfiguration
        """

        self._config = config

    @property
    def instrument(self):
        """Gets the instrument of this SequencingRunCompact.  # noqa: E501


        :return: The instrument of this SequencingRunCompact.  # noqa: E501
        :rtype: Instrument
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this SequencingRunCompact.


        :param instrument: The instrument of this SequencingRunCompact.  # noqa: E501
        :type: Instrument
        """

        self._instrument = instrument

    @property
    def instrument_type_snapshot(self):
        """Gets the instrument_type_snapshot of this SequencingRunCompact.  # noqa: E501

        Instrument type snapshot when the run is locked or started  # noqa: E501

        :return: The instrument_type_snapshot of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type_snapshot

    @instrument_type_snapshot.setter
    def instrument_type_snapshot(self, instrument_type_snapshot):
        """Sets the instrument_type_snapshot of this SequencingRunCompact.

        Instrument type snapshot when the run is locked or started  # noqa: E501

        :param instrument_type_snapshot: The instrument_type_snapshot of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_type_snapshot = instrument_type_snapshot

    @property
    def instrument_software_version(self):
        """Gets the instrument_software_version of this SequencingRunCompact.  # noqa: E501

        Version of instrument control software provided by the instrument when the run starts  # noqa: E501

        :return: The instrument_software_version of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._instrument_software_version

    @instrument_software_version.setter
    def instrument_software_version(self, instrument_software_version):
        """Sets the instrument_software_version of this SequencingRunCompact.

        Version of instrument control software provided by the instrument when the run starts  # noqa: E501

        :param instrument_software_version: The instrument_software_version of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._instrument_software_version = instrument_software_version

    @property
    def analysis_location(self):
        """Gets the analysis_location of this SequencingRunCompact.  # noqa: E501

        Indicate the sequencing run will be performing local analysis or cloud analysis  # noqa: E501

        :return: The analysis_location of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._analysis_location

    @analysis_location.setter
    def analysis_location(self, analysis_location):
        """Sets the analysis_location of this SequencingRunCompact.

        Indicate the sequencing run will be performing local analysis or cloud analysis  # noqa: E501

        :param analysis_location: The analysis_location of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._analysis_location = analysis_location

    @property
    def analysis_summaries(self):
        """Gets the analysis_summaries of this SequencingRunCompact.  # noqa: E501

        Configured analysis summary information  # noqa: E501

        :return: The analysis_summaries of this SequencingRunCompact.  # noqa: E501
        :rtype: list[SequencingRunAnalysisSummary]
        """
        return self._analysis_summaries

    @analysis_summaries.setter
    def analysis_summaries(self, analysis_summaries):
        """Sets the analysis_summaries of this SequencingRunCompact.

        Configured analysis summary information  # noqa: E501

        :param analysis_summaries: The analysis_summaries of this SequencingRunCompact.  # noqa: E501
        :type: list[SequencingRunAnalysisSummary]
        """

        self._analysis_summaries = analysis_summaries

    @property
    def run_analysis_settings(self):
        """Gets the run_analysis_settings of this SequencingRunCompact.  # noqa: E501

        Run analysis settings  # noqa: E501

        :return: The run_analysis_settings of this SequencingRunCompact.  # noqa: E501
        :rtype: object
        """
        return self._run_analysis_settings

    @run_analysis_settings.setter
    def run_analysis_settings(self, run_analysis_settings):
        """Sets the run_analysis_settings of this SequencingRunCompact.

        Run analysis settings  # noqa: E501

        :param run_analysis_settings: The run_analysis_settings of this SequencingRunCompact.  # noqa: E501
        :type: object
        """

        self._run_analysis_settings = run_analysis_settings

    @property
    def is_favorite(self):
        """Gets the is_favorite of this SequencingRunCompact.  # noqa: E501

        Indicate whether the sequencing run is set as favorite run for the user  # noqa: E501

        :return: The is_favorite of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this SequencingRunCompact.

        Indicate whether the sequencing run is set as favorite run for the user  # noqa: E501

        :param is_favorite: The is_favorite of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    @property
    def external_location(self):
        """Gets the external_location of this SequencingRunCompact.  # noqa: E501

        Stores the external location of the sequencing run  # noqa: E501

        :return: The external_location of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._external_location

    @external_location.setter
    def external_location(self, external_location):
        """Sets the external_location of this SequencingRunCompact.

        Stores the external location of the sequencing run  # noqa: E501

        :param external_location: The external_location of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._external_location = external_location

    @property
    def checksum_of_manifest(self):
        """Gets the checksum_of_manifest of this SequencingRunCompact.  # noqa: E501

        Stores the checksum of manifest  Used to verify run contents copied from external location  # noqa: E501

        :return: The checksum_of_manifest of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._checksum_of_manifest

    @checksum_of_manifest.setter
    def checksum_of_manifest(self, checksum_of_manifest):
        """Sets the checksum_of_manifest of this SequencingRunCompact.

        Stores the checksum of manifest  Used to verify run contents copied from external location  # noqa: E501

        :param checksum_of_manifest: The checksum_of_manifest of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._checksum_of_manifest = checksum_of_manifest

    @property
    def requeued_from_run(self):
        """Gets the requeued_from_run of this SequencingRunCompact.  # noqa: E501


        :return: The requeued_from_run of this SequencingRunCompact.  # noqa: E501
        :rtype: SequencingRunCompact
        """
        return self._requeued_from_run

    @requeued_from_run.setter
    def requeued_from_run(self, requeued_from_run):
        """Sets the requeued_from_run of this SequencingRunCompact.


        :param requeued_from_run: The requeued_from_run of this SequencingRunCompact.  # noqa: E501
        :type: SequencingRunCompact
        """

        self._requeued_from_run = requeued_from_run

    @property
    def requeue_reason(self):
        """Gets the requeue_reason of this SequencingRunCompact.  # noqa: E501

        Reason for Requeue Analysis of a sequencing run  # noqa: E501

        :return: The requeue_reason of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._requeue_reason

    @requeue_reason.setter
    def requeue_reason(self, requeue_reason):
        """Sets the requeue_reason of this SequencingRunCompact.

        Reason for Requeue Analysis of a sequencing run  # noqa: E501

        :param requeue_reason: The requeue_reason of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._requeue_reason = requeue_reason

    @property
    def verification_results(self):
        """Gets the verification_results of this SequencingRunCompact.  # noqa: E501


        :return: The verification_results of this SequencingRunCompact.  # noqa: E501
        :rtype: RunVerificationResult
        """
        return self._verification_results

    @verification_results.setter
    def verification_results(self, verification_results):
        """Sets the verification_results of this SequencingRunCompact.


        :param verification_results: The verification_results of this SequencingRunCompact.  # noqa: E501
        :type: RunVerificationResult
        """

        self._verification_results = verification_results

    @property
    def can_edit_run(self):
        """Gets the can_edit_run of this SequencingRunCompact.  # noqa: E501

        Indicates whether the sequencing run can be edited or not  # noqa: E501

        :return: The can_edit_run of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_run

    @can_edit_run.setter
    def can_edit_run(self, can_edit_run):
        """Sets the can_edit_run of this SequencingRunCompact.

        Indicates whether the sequencing run can be edited or not  # noqa: E501

        :param can_edit_run: The can_edit_run of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._can_edit_run = can_edit_run

    @property
    def can_requeue_run(self):
        """Gets the can_requeue_run of this SequencingRunCompact.  # noqa: E501

        Indicates whether the sequencing run can be requeued or not  # noqa: E501

        :return: The can_requeue_run of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._can_requeue_run

    @can_requeue_run.setter
    def can_requeue_run(self, can_requeue_run):
        """Sets the can_requeue_run of this SequencingRunCompact.

        Indicates whether the sequencing run can be requeued or not  # noqa: E501

        :param can_requeue_run: The can_requeue_run of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._can_requeue_run = can_requeue_run

    @property
    def can_delete(self):
        """Gets the can_delete of this SequencingRunCompact.  # noqa: E501

        Indicates whether the sequencing run can be deleted or not  # noqa: E501

        :return: The can_delete of this SequencingRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this SequencingRunCompact.

        Indicates whether the sequencing run can be deleted or not  # noqa: E501

        :param can_delete: The can_delete of this SequencingRunCompact.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def analysis_time_started(self):
        """Gets the analysis_time_started of this SequencingRunCompact.  # noqa: E501

        Indicates the DateTime when the analysis is started (typically for off-instrument analysis)  # noqa: E501

        :return: The analysis_time_started of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._analysis_time_started

    @analysis_time_started.setter
    def analysis_time_started(self, analysis_time_started):
        """Sets the analysis_time_started of this SequencingRunCompact.

        Indicates the DateTime when the analysis is started (typically for off-instrument analysis)  # noqa: E501

        :param analysis_time_started: The analysis_time_started of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._analysis_time_started = analysis_time_started

    @property
    def analysis_time_completed(self):
        """Gets the analysis_time_completed of this SequencingRunCompact.  # noqa: E501

        Indicates the DateTime when the analysis is completed (typically for off-instrument analysis)  # noqa: E501

        :return: The analysis_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._analysis_time_completed

    @analysis_time_completed.setter
    def analysis_time_completed(self, analysis_time_completed):
        """Sets the analysis_time_completed of this SequencingRunCompact.

        Indicates the DateTime when the analysis is completed (typically for off-instrument analysis)  # noqa: E501

        :param analysis_time_completed: The analysis_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._analysis_time_completed = analysis_time_completed

    @property
    def run_time_completed(self):
        """Gets the run_time_completed of this SequencingRunCompact.  # noqa: E501

        Indicates the DateTime of the overall run which have been fully completed (including post-upload cloud processing)  # noqa: E501

        :return: The run_time_completed of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._run_time_completed

    @run_time_completed.setter
    def run_time_completed(self, run_time_completed):
        """Sets the run_time_completed of this SequencingRunCompact.

        Indicates the DateTime of the overall run which have been fully completed (including post-upload cloud processing)  # noqa: E501

        :param run_time_completed: The run_time_completed of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._run_time_completed = run_time_completed

    @property
    def run_sequencing_stats(self):
        """Gets the run_sequencing_stats of this SequencingRunCompact.  # noqa: E501


        :return: The run_sequencing_stats of this SequencingRunCompact.  # noqa: E501
        :rtype: RunSequencingStatsResponse
        """
        return self._run_sequencing_stats

    @run_sequencing_stats.setter
    def run_sequencing_stats(self, run_sequencing_stats):
        """Sets the run_sequencing_stats of this SequencingRunCompact.


        :param run_sequencing_stats: The run_sequencing_stats of this SequencingRunCompact.  # noqa: E501
        :type: RunSequencingStatsResponse
        """

        self._run_sequencing_stats = run_sequencing_stats

    @property
    def analysis_runs(self):
        """Gets the analysis_runs of this SequencingRunCompact.  # noqa: E501

        Consists of the sequencing analysis runs related to the sequencing run  # noqa: E501

        :return: The analysis_runs of this SequencingRunCompact.  # noqa: E501
        :rtype: list[SequencingAnalysisRunCompact]
        """
        return self._analysis_runs

    @analysis_runs.setter
    def analysis_runs(self, analysis_runs):
        """Sets the analysis_runs of this SequencingRunCompact.

        Consists of the sequencing analysis runs related to the sequencing run  # noqa: E501

        :param analysis_runs: The analysis_runs of this SequencingRunCompact.  # noqa: E501
        :type: list[SequencingAnalysisRunCompact]
        """

        self._analysis_runs = analysis_runs

    @property
    def sub_tenant_id(self):
        """Gets the sub_tenant_id of this SequencingRunCompact.  # noqa: E501

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :return: The sub_tenant_id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._sub_tenant_id

    @sub_tenant_id.setter
    def sub_tenant_id(self, sub_tenant_id):
        """Sets the sub_tenant_id of this SequencingRunCompact.

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :param sub_tenant_id: The sub_tenant_id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._sub_tenant_id = sub_tenant_id

    @property
    def acl(self):
        """Gets the acl of this SequencingRunCompact.  # noqa: E501

        Access control list of the object  # noqa: E501

        :return: The acl of this SequencingRunCompact.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this SequencingRunCompact.

        Access control list of the object  # noqa: E501

        :param acl: The acl of this SequencingRunCompact.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SequencingRunCompact.  # noqa: E501

        Unique identifier for the resource tenant  # noqa: E501

        :return: The tenant_id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SequencingRunCompact.

        Unique identifier for the resource tenant  # noqa: E501

        :param tenant_id: The tenant_id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this SequencingRunCompact.  # noqa: E501

        Unique tenant name for the resource tenant  # noqa: E501

        :return: The tenant_name of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this SequencingRunCompact.

        Unique tenant name for the resource tenant  # noqa: E501

        :param tenant_name: The tenant_name of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def created_by_client_id(self):
        """Gets the created_by_client_id of this SequencingRunCompact.  # noqa: E501

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :return: The created_by_client_id of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._created_by_client_id

    @created_by_client_id.setter
    def created_by_client_id(self, created_by_client_id):
        """Sets the created_by_client_id of this SequencingRunCompact.

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :param created_by_client_id: The created_by_client_id of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._created_by_client_id = created_by_client_id

    @property
    def created_by(self):
        """Gets the created_by of this SequencingRunCompact.  # noqa: E501

        User that created the resource  # noqa: E501

        :return: The created_by of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SequencingRunCompact.

        User that created the resource  # noqa: E501

        :param created_by: The created_by of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this SequencingRunCompact.  # noqa: E501

        User that last modified the resource  # noqa: E501

        :return: The modified_by of this SequencingRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SequencingRunCompact.

        User that last modified the resource  # noqa: E501

        :param modified_by: The modified_by of this SequencingRunCompact.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def time_created(self):
        """Gets the time_created of this SequencingRunCompact.  # noqa: E501

        Time (in UTC) the resource was created  # noqa: E501

        :return: The time_created of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this SequencingRunCompact.

        Time (in UTC) the resource was created  # noqa: E501

        :param time_created: The time_created of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def time_modified(self):
        """Gets the time_modified of this SequencingRunCompact.  # noqa: E501

        Time (in UTC) the resource was modified  # noqa: E501

        :return: The time_modified of this SequencingRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this SequencingRunCompact.

        Time (in UTC) the resource was modified  # noqa: E501

        :param time_modified: The time_modified of this SequencingRunCompact.  # noqa: E501
        :type: datetime
        """

        self._time_modified = time_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequencingRunCompact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequencingRunCompact):
            return True

        return self.to_dict() != other.to_dict()
