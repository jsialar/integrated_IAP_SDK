# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class CreateGenomeRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acl': 'list[str]',
        'name': 'str',
        'display_name': 'str',
        'order': 'int',
        'is_application_specific': 'bool',
        'build': 'str',
        'organization': 'str',
        'description': 'str',
        'status': 'str',
        'species': 'str',
        'source': 'str',
        'dragen_version': 'str',
        'data_location_urn': 'str',
        'genome_format': 'str',
        'settings': 'object',
        'source_file_metadata': 'object',
        'fasta_file_urn': 'str',
        'checksum': 'str'
    }

    attribute_map = {
        'acl': 'acl',
        'name': 'name',
        'display_name': 'displayName',
        'order': 'order',
        'is_application_specific': 'isApplicationSpecific',
        'build': 'build',
        'organization': 'organization',
        'description': 'description',
        'status': 'status',
        'species': 'species',
        'source': 'source',
        'dragen_version': 'dragenVersion',
        'data_location_urn': 'dataLocationUrn',
        'genome_format': 'genomeFormat',
        'settings': 'settings',
        'source_file_metadata': 'sourceFileMetadata',
        'fasta_file_urn': 'fastaFileUrn',
        'checksum': 'checksum'
    }

    def __init__(self, acl=None, name=None, display_name=None, order=None, is_application_specific=None, build=None, organization=None, description=None, status=None, species=None, source=None, dragen_version=None, data_location_urn=None, genome_format=None, settings=None, source_file_metadata=None, fasta_file_urn=None, checksum=None, local_vars_configuration=None):  # noqa: E501
        """CreateGenomeRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acl = None
        self._name = None
        self._display_name = None
        self._order = None
        self._is_application_specific = None
        self._build = None
        self._organization = None
        self._description = None
        self._status = None
        self._species = None
        self._source = None
        self._dragen_version = None
        self._data_location_urn = None
        self._genome_format = None
        self._settings = None
        self._source_file_metadata = None
        self._fasta_file_urn = None
        self._checksum = None
        self.discriminator = None

        if acl is not None:
            self.acl = acl
        self.name = name
        if display_name is not None:
            self.display_name = display_name
        if order is not None:
            self.order = order
        if is_application_specific is not None:
            self.is_application_specific = is_application_specific
        if build is not None:
            self.build = build
        if organization is not None:
            self.organization = organization
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if species is not None:
            self.species = species
        if source is not None:
            self.source = source
        if dragen_version is not None:
            self.dragen_version = dragen_version
        if data_location_urn is not None:
            self.data_location_urn = data_location_urn
        self.genome_format = genome_format
        if settings is not None:
            self.settings = settings
        if source_file_metadata is not None:
            self.source_file_metadata = source_file_metadata
        if fasta_file_urn is not None:
            self.fasta_file_urn = fasta_file_urn
        if checksum is not None:
            self.checksum = checksum

    @property
    def acl(self):
        """Gets the acl of this CreateGenomeRequest.  # noqa: E501


        :return: The acl of this CreateGenomeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CreateGenomeRequest.


        :param acl: The acl of this CreateGenomeRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def name(self):
        """Gets the name of this CreateGenomeRequest.  # noqa: E501

        Name of the genome  # noqa: E501

        :return: The name of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGenomeRequest.

        Name of the genome  # noqa: E501

        :param name: The name of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this CreateGenomeRequest.  # noqa: E501

        DisplayName of the genome  # noqa: E501

        :return: The display_name of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateGenomeRequest.

        DisplayName of the genome  # noqa: E501

        :param display_name: The display_name of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 255):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def order(self):
        """Gets the order of this CreateGenomeRequest.  # noqa: E501

        Order of the genome, default is 0  # noqa: E501

        :return: The order of this CreateGenomeRequest.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CreateGenomeRequest.

        Order of the genome, default is 0  # noqa: E501

        :param order: The order of this CreateGenomeRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._order = order

    @property
    def is_application_specific(self):
        """Gets the is_application_specific of this CreateGenomeRequest.  # noqa: E501

        Whether the genome is application specific  # noqa: E501

        :return: The is_application_specific of this CreateGenomeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_application_specific

    @is_application_specific.setter
    def is_application_specific(self, is_application_specific):
        """Sets the is_application_specific of this CreateGenomeRequest.

        Whether the genome is application specific  # noqa: E501

        :param is_application_specific: The is_application_specific of this CreateGenomeRequest.  # noqa: E501
        :type: bool
        """

        self._is_application_specific = is_application_specific

    @property
    def build(self):
        """Gets the build of this CreateGenomeRequest.  # noqa: E501

        Build of the genome  # noqa: E501

        :return: The build of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this CreateGenomeRequest.

        Build of the genome  # noqa: E501

        :param build: The build of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                build is not None and len(build) > 50):
            raise ValueError("Invalid value for `build`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                build is not None and len(build) < 0):
            raise ValueError("Invalid value for `build`, length must be greater than or equal to `0`")  # noqa: E501

        self._build = build

    @property
    def organization(self):
        """Gets the organization of this CreateGenomeRequest.  # noqa: E501

        Organization of the genome  # noqa: E501

        :return: The organization of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CreateGenomeRequest.

        Organization of the genome  # noqa: E501

        :param organization: The organization of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) > 255):
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) < 0):
            raise ValueError("Invalid value for `organization`, length must be greater than or equal to `0`")  # noqa: E501

        self._organization = organization

    @property
    def description(self):
        """Gets the description of this CreateGenomeRequest.  # noqa: E501

        Description of the genome  # noqa: E501

        :return: The description of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGenomeRequest.

        Description of the genome  # noqa: E501

        :param description: The description of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def status(self):
        """Gets the status of this CreateGenomeRequest.  # noqa: E501

        Status of the genome  # noqa: E501

        :return: The status of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateGenomeRequest.

        Status of the genome  # noqa: E501

        :param status: The status of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def species(self):
        """Gets the species of this CreateGenomeRequest.  # noqa: E501

        Species of the genome  # noqa: E501

        :return: The species of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this CreateGenomeRequest.

        Species of the genome  # noqa: E501

        :param species: The species of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                species is not None and len(species) > 255):
            raise ValueError("Invalid value for `species`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                species is not None and len(species) < 0):
            raise ValueError("Invalid value for `species`, length must be greater than or equal to `0`")  # noqa: E501

        self._species = species

    @property
    def source(self):
        """Gets the source of this CreateGenomeRequest.  # noqa: E501

        Source of the genome  # noqa: E501

        :return: The source of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateGenomeRequest.

        Source of the genome  # noqa: E501

        :param source: The source of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) > 255):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) < 0):
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `0`")  # noqa: E501

        self._source = source

    @property
    def dragen_version(self):
        """Gets the dragen_version of this CreateGenomeRequest.  # noqa: E501

        Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.GenomeFormat is Dragen  # noqa: E501

        :return: The dragen_version of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._dragen_version

    @dragen_version.setter
    def dragen_version(self, dragen_version):
        """Sets the dragen_version of this CreateGenomeRequest.

        Dragen version for the genome, it is required when Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.GenomeFormat is Dragen  # noqa: E501

        :param dragen_version: The dragen_version of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                dragen_version is not None and len(dragen_version) > 50):
            raise ValueError("Invalid value for `dragen_version`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dragen_version is not None and len(dragen_version) < 0):
            raise ValueError("Invalid value for `dragen_version`, length must be greater than or equal to `0`")  # noqa: E501

        self._dragen_version = dragen_version

    @property
    def data_location_urn(self):
        """Gets the data_location_urn of this CreateGenomeRequest.  # noqa: E501

        Urn of the file in GDS containing the genome data file  # noqa: E501

        :return: The data_location_urn of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_location_urn

    @data_location_urn.setter
    def data_location_urn(self, data_location_urn):
        """Sets the data_location_urn of this CreateGenomeRequest.

        Urn of the file in GDS containing the genome data file  # noqa: E501

        :param data_location_urn: The data_location_urn of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                data_location_urn is not None and len(data_location_urn) > 1152):
            raise ValueError("Invalid value for `data_location_urn`, length must be less than or equal to `1152`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                data_location_urn is not None and len(data_location_urn) < 0):
            raise ValueError("Invalid value for `data_location_urn`, length must be greater than or equal to `0`")  # noqa: E501

        self._data_location_urn = data_location_urn

    @property
    def genome_format(self):
        """Gets the genome_format of this CreateGenomeRequest.  # noqa: E501

        Format for the genome file, Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.DragenVersion is required when it is Dragen  # noqa: E501

        :return: The genome_format of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._genome_format

    @genome_format.setter
    def genome_format(self, genome_format):
        """Sets the genome_format of this CreateGenomeRequest.

        Format for the genome file, Illumina.GenomicSequencingService.Models.Domain.CreateGenomeParameters.DragenVersion is required when it is Dragen  # noqa: E501

        :param genome_format: The genome_format of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and genome_format is None:  # noqa: E501
            raise ValueError("Invalid value for `genome_format`, must not be `None`")  # noqa: E501
        allowed_values = ["Dragen", "Fasta"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and genome_format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `genome_format` ({0}), must be one of {1}"  # noqa: E501
                .format(genome_format, allowed_values)
            )

        self._genome_format = genome_format

    @property
    def settings(self):
        """Gets the settings of this CreateGenomeRequest.  # noqa: E501

        Custom settings for the genome  # noqa: E501

        :return: The settings of this CreateGenomeRequest.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateGenomeRequest.

        Custom settings for the genome  # noqa: E501

        :param settings: The settings of this CreateGenomeRequest.  # noqa: E501
        :type: object
        """

        self._settings = settings

    @property
    def source_file_metadata(self):
        """Gets the source_file_metadata of this CreateGenomeRequest.  # noqa: E501

        Key-value pairs that indicate the source files for the specific genome  # noqa: E501

        :return: The source_file_metadata of this CreateGenomeRequest.  # noqa: E501
        :rtype: object
        """
        return self._source_file_metadata

    @source_file_metadata.setter
    def source_file_metadata(self, source_file_metadata):
        """Sets the source_file_metadata of this CreateGenomeRequest.

        Key-value pairs that indicate the source files for the specific genome  # noqa: E501

        :param source_file_metadata: The source_file_metadata of this CreateGenomeRequest.  # noqa: E501
        :type: object
        """

        self._source_file_metadata = source_file_metadata

    @property
    def fasta_file_urn(self):
        """Gets the fasta_file_urn of this CreateGenomeRequest.  # noqa: E501

        Urn of the Fasta file being used by the genome  # noqa: E501

        :return: The fasta_file_urn of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._fasta_file_urn

    @fasta_file_urn.setter
    def fasta_file_urn(self, fasta_file_urn):
        """Sets the fasta_file_urn of this CreateGenomeRequest.

        Urn of the Fasta file being used by the genome  # noqa: E501

        :param fasta_file_urn: The fasta_file_urn of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fasta_file_urn is not None and len(fasta_file_urn) > 1152):
            raise ValueError("Invalid value for `fasta_file_urn`, length must be less than or equal to `1152`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fasta_file_urn is not None and len(fasta_file_urn) < 0):
            raise ValueError("Invalid value for `fasta_file_urn`, length must be greater than or equal to `0`")  # noqa: E501

        self._fasta_file_urn = fasta_file_urn

    @property
    def checksum(self):
        """Gets the checksum of this CreateGenomeRequest.  # noqa: E501

        Checksum of Genome  # noqa: E501

        :return: The checksum of this CreateGenomeRequest.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this CreateGenomeRequest.

        Checksum of Genome  # noqa: E501

        :param checksum: The checksum of this CreateGenomeRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 0):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `0`")  # noqa: E501

        self._checksum = checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGenomeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateGenomeRequest):
            return True

        return self.to_dict() != other.to_dict()
