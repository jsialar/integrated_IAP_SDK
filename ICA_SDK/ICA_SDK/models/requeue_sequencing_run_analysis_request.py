# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RequeueSequencingRunAnalysisRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_name': 'str',
        'run_contents': 'UpdateSequencingRunContentsRequest',
        'run_analysis_configurations': 'list[CreateSequencingRunAnalysisConfigurationRequest]',
        'requeue_reason': 'str',
        'replace_existing_run_requeue': 'bool'
    }

    attribute_map = {
        'run_name': 'runName',
        'run_contents': 'runContents',
        'run_analysis_configurations': 'runAnalysisConfigurations',
        'requeue_reason': 'requeueReason',
        'replace_existing_run_requeue': 'replaceExistingRunRequeue'
    }

    def __init__(self, run_name=None, run_contents=None, run_analysis_configurations=None, requeue_reason=None, replace_existing_run_requeue=None, local_vars_configuration=None):  # noqa: E501
        """RequeueSequencingRunAnalysisRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_name = None
        self._run_contents = None
        self._run_analysis_configurations = None
        self._requeue_reason = None
        self._replace_existing_run_requeue = None
        self.discriminator = None

        self.run_name = run_name
        if run_contents is not None:
            self.run_contents = run_contents
        if run_analysis_configurations is not None:
            self.run_analysis_configurations = run_analysis_configurations
        if requeue_reason is not None:
            self.requeue_reason = requeue_reason
        if replace_existing_run_requeue is not None:
            self.replace_existing_run_requeue = replace_existing_run_requeue

    @property
    def run_name(self):
        """Gets the run_name of this RequeueSequencingRunAnalysisRequest.  # noqa: E501

        Name of the run provided by the user  # noqa: E501

        :return: The run_name of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this RequeueSequencingRunAnalysisRequest.

        Name of the run provided by the user  # noqa: E501

        :param run_name: The run_name of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and run_name is None:  # noqa: E501
            raise ValueError("Invalid value for `run_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                run_name is not None and len(run_name) > 255):
            raise ValueError("Invalid value for `run_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                run_name is not None and len(run_name) < 0):
            raise ValueError("Invalid value for `run_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._run_name = run_name

    @property
    def run_contents(self):
        """Gets the run_contents of this RequeueSequencingRunAnalysisRequest.  # noqa: E501


        :return: The run_contents of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :rtype: UpdateSequencingRunContentsRequest
        """
        return self._run_contents

    @run_contents.setter
    def run_contents(self, run_contents):
        """Sets the run_contents of this RequeueSequencingRunAnalysisRequest.


        :param run_contents: The run_contents of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :type: UpdateSequencingRunContentsRequest
        """

        self._run_contents = run_contents

    @property
    def run_analysis_configurations(self):
        """Gets the run_analysis_configurations of this RequeueSequencingRunAnalysisRequest.  # noqa: E501

        Requeue run analysis configurations  # noqa: E501

        :return: The run_analysis_configurations of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :rtype: list[CreateSequencingRunAnalysisConfigurationRequest]
        """
        return self._run_analysis_configurations

    @run_analysis_configurations.setter
    def run_analysis_configurations(self, run_analysis_configurations):
        """Sets the run_analysis_configurations of this RequeueSequencingRunAnalysisRequest.

        Requeue run analysis configurations  # noqa: E501

        :param run_analysis_configurations: The run_analysis_configurations of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :type: list[CreateSequencingRunAnalysisConfigurationRequest]
        """

        self._run_analysis_configurations = run_analysis_configurations

    @property
    def requeue_reason(self):
        """Gets the requeue_reason of this RequeueSequencingRunAnalysisRequest.  # noqa: E501

        Reason for requeue of a sequencing run  # noqa: E501

        :return: The requeue_reason of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._requeue_reason

    @requeue_reason.setter
    def requeue_reason(self, requeue_reason):
        """Sets the requeue_reason of this RequeueSequencingRunAnalysisRequest.

        Reason for requeue of a sequencing run  # noqa: E501

        :param requeue_reason: The requeue_reason of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                requeue_reason is not None and len(requeue_reason) > 255):
            raise ValueError("Invalid value for `requeue_reason`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                requeue_reason is not None and len(requeue_reason) < 0):
            raise ValueError("Invalid value for `requeue_reason`, length must be greater than or equal to `0`")  # noqa: E501

        self._requeue_reason = requeue_reason

    @property
    def replace_existing_run_requeue(self):
        """Gets the replace_existing_run_requeue of this RequeueSequencingRunAnalysisRequest.  # noqa: E501

        Indicates replacement of existing run requeue  # noqa: E501

        :return: The replace_existing_run_requeue of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing_run_requeue

    @replace_existing_run_requeue.setter
    def replace_existing_run_requeue(self, replace_existing_run_requeue):
        """Sets the replace_existing_run_requeue of this RequeueSequencingRunAnalysisRequest.

        Indicates replacement of existing run requeue  # noqa: E501

        :param replace_existing_run_requeue: The replace_existing_run_requeue of this RequeueSequencingRunAnalysisRequest.  # noqa: E501
        :type: bool
        """

        self._replace_existing_run_requeue = replace_existing_run_requeue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequeueSequencingRunAnalysisRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequeueSequencingRunAnalysisRequest):
            return True

        return self.to_dict() != other.to_dict()
