# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class LaneSequencingStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lane_number': 'int',
        'density': 'float',
        'percent_pf': 'float',
        'phasing': 'float',
        'pre_phasing': 'float',
        'reads': 'int',
        'reads_pf': 'int',
        'percent_gt_q30': 'float',
        'percent_gt_q30_last10_cycles': 'float',
        '_yield': 'float',
        'max_cycle_called': 'int',
        'percent_aligned': 'float',
        'error_rate': 'float',
        'error_rate35': 'float',
        'error_rate50': 'float',
        'error_rate75': 'float',
        'error_rate100': 'float',
        'intensity_cycle1': 'float',
        'projected_yield_in_gbp': 'float',
        'max_projected_yield_in_gbp': 'float',
        'phasing_slope': 'float',
        'phasing_offset': 'float',
        'pre_phasing_slope': 'float',
        'pre_phasing_offset': 'float'
    }

    attribute_map = {
        'lane_number': 'laneNumber',
        'density': 'density',
        'percent_pf': 'percentPf',
        'phasing': 'phasing',
        'pre_phasing': 'prePhasing',
        'reads': 'reads',
        'reads_pf': 'readsPf',
        'percent_gt_q30': 'percentGtQ30',
        'percent_gt_q30_last10_cycles': 'percentGtQ30Last10Cycles',
        '_yield': 'yield',
        'max_cycle_called': 'maxCycleCalled',
        'percent_aligned': 'percentAligned',
        'error_rate': 'errorRate',
        'error_rate35': 'errorRate35',
        'error_rate50': 'errorRate50',
        'error_rate75': 'errorRate75',
        'error_rate100': 'errorRate100',
        'intensity_cycle1': 'intensityCycle1',
        'projected_yield_in_gbp': 'projectedYieldInGbp',
        'max_projected_yield_in_gbp': 'maxProjectedYieldInGbp',
        'phasing_slope': 'phasingSlope',
        'phasing_offset': 'phasingOffset',
        'pre_phasing_slope': 'prePhasingSlope',
        'pre_phasing_offset': 'prePhasingOffset'
    }

    def __init__(self, lane_number=None, density=None, percent_pf=None, phasing=None, pre_phasing=None, reads=None, reads_pf=None, percent_gt_q30=None, percent_gt_q30_last10_cycles=None, _yield=None, max_cycle_called=None, percent_aligned=None, error_rate=None, error_rate35=None, error_rate50=None, error_rate75=None, error_rate100=None, intensity_cycle1=None, projected_yield_in_gbp=None, max_projected_yield_in_gbp=None, phasing_slope=None, phasing_offset=None, pre_phasing_slope=None, pre_phasing_offset=None, local_vars_configuration=None):  # noqa: E501
        """LaneSequencingStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lane_number = None
        self._density = None
        self._percent_pf = None
        self._phasing = None
        self._pre_phasing = None
        self._reads = None
        self._reads_pf = None
        self._percent_gt_q30 = None
        self._percent_gt_q30_last10_cycles = None
        self.__yield = None
        self._max_cycle_called = None
        self._percent_aligned = None
        self._error_rate = None
        self._error_rate35 = None
        self._error_rate50 = None
        self._error_rate75 = None
        self._error_rate100 = None
        self._intensity_cycle1 = None
        self._projected_yield_in_gbp = None
        self._max_projected_yield_in_gbp = None
        self._phasing_slope = None
        self._phasing_offset = None
        self._pre_phasing_slope = None
        self._pre_phasing_offset = None
        self.discriminator = None

        self.lane_number = lane_number
        if density is not None:
            self.density = density
        if percent_pf is not None:
            self.percent_pf = percent_pf
        if phasing is not None:
            self.phasing = phasing
        if pre_phasing is not None:
            self.pre_phasing = pre_phasing
        if reads is not None:
            self.reads = reads
        if reads_pf is not None:
            self.reads_pf = reads_pf
        if percent_gt_q30 is not None:
            self.percent_gt_q30 = percent_gt_q30
        if percent_gt_q30_last10_cycles is not None:
            self.percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles
        if _yield is not None:
            self._yield = _yield
        if max_cycle_called is not None:
            self.max_cycle_called = max_cycle_called
        if percent_aligned is not None:
            self.percent_aligned = percent_aligned
        if error_rate is not None:
            self.error_rate = error_rate
        if error_rate35 is not None:
            self.error_rate35 = error_rate35
        if error_rate50 is not None:
            self.error_rate50 = error_rate50
        if error_rate75 is not None:
            self.error_rate75 = error_rate75
        if error_rate100 is not None:
            self.error_rate100 = error_rate100
        if intensity_cycle1 is not None:
            self.intensity_cycle1 = intensity_cycle1
        if projected_yield_in_gbp is not None:
            self.projected_yield_in_gbp = projected_yield_in_gbp
        if max_projected_yield_in_gbp is not None:
            self.max_projected_yield_in_gbp = max_projected_yield_in_gbp
        if phasing_slope is not None:
            self.phasing_slope = phasing_slope
        if phasing_offset is not None:
            self.phasing_offset = phasing_offset
        if pre_phasing_slope is not None:
            self.pre_phasing_slope = pre_phasing_slope
        if pre_phasing_offset is not None:
            self.pre_phasing_offset = pre_phasing_offset

    @property
    def lane_number(self):
        """Gets the lane_number of this LaneSequencingStats.  # noqa: E501

        LaneNumber of the LaneSequencingStats  # noqa: E501

        :return: The lane_number of this LaneSequencingStats.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this LaneSequencingStats.

        LaneNumber of the LaneSequencingStats  # noqa: E501

        :param lane_number: The lane_number of this LaneSequencingStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and lane_number is None:  # noqa: E501
            raise ValueError("Invalid value for `lane_number`, must not be `None`")  # noqa: E501

        self._lane_number = lane_number

    @property
    def density(self):
        """Gets the density of this LaneSequencingStats.  # noqa: E501

        Density of the LaneSequencingStats  # noqa: E501

        :return: The density of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this LaneSequencingStats.

        Density of the LaneSequencingStats  # noqa: E501

        :param density: The density of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def percent_pf(self):
        """Gets the percent_pf of this LaneSequencingStats.  # noqa: E501

        PercentPf of the LaneSequencingStats  # noqa: E501

        :return: The percent_pf of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._percent_pf

    @percent_pf.setter
    def percent_pf(self, percent_pf):
        """Sets the percent_pf of this LaneSequencingStats.

        PercentPf of the LaneSequencingStats  # noqa: E501

        :param percent_pf: The percent_pf of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._percent_pf = percent_pf

    @property
    def phasing(self):
        """Gets the phasing of this LaneSequencingStats.  # noqa: E501

        Phasing of the LaneSequencingStats  # noqa: E501

        :return: The phasing of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._phasing

    @phasing.setter
    def phasing(self, phasing):
        """Sets the phasing of this LaneSequencingStats.

        Phasing of the LaneSequencingStats  # noqa: E501

        :param phasing: The phasing of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._phasing = phasing

    @property
    def pre_phasing(self):
        """Gets the pre_phasing of this LaneSequencingStats.  # noqa: E501

        PrePhasing of the LaneSequencingStats  # noqa: E501

        :return: The pre_phasing of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing

    @pre_phasing.setter
    def pre_phasing(self, pre_phasing):
        """Sets the pre_phasing of this LaneSequencingStats.

        PrePhasing of the LaneSequencingStats  # noqa: E501

        :param pre_phasing: The pre_phasing of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._pre_phasing = pre_phasing

    @property
    def reads(self):
        """Gets the reads of this LaneSequencingStats.  # noqa: E501

        Reads of the LaneSequencingStats  # noqa: E501

        :return: The reads of this LaneSequencingStats.  # noqa: E501
        :rtype: int
        """
        return self._reads

    @reads.setter
    def reads(self, reads):
        """Sets the reads of this LaneSequencingStats.

        Reads of the LaneSequencingStats  # noqa: E501

        :param reads: The reads of this LaneSequencingStats.  # noqa: E501
        :type: int
        """

        self._reads = reads

    @property
    def reads_pf(self):
        """Gets the reads_pf of this LaneSequencingStats.  # noqa: E501

        ReadsPf of the LaneSequencingStats  # noqa: E501

        :return: The reads_pf of this LaneSequencingStats.  # noqa: E501
        :rtype: int
        """
        return self._reads_pf

    @reads_pf.setter
    def reads_pf(self, reads_pf):
        """Sets the reads_pf of this LaneSequencingStats.

        ReadsPf of the LaneSequencingStats  # noqa: E501

        :param reads_pf: The reads_pf of this LaneSequencingStats.  # noqa: E501
        :type: int
        """

        self._reads_pf = reads_pf

    @property
    def percent_gt_q30(self):
        """Gets the percent_gt_q30 of this LaneSequencingStats.  # noqa: E501

        PercentGtQ30 of the LaneSequencingStats  # noqa: E501

        :return: The percent_gt_q30 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30

    @percent_gt_q30.setter
    def percent_gt_q30(self, percent_gt_q30):
        """Sets the percent_gt_q30 of this LaneSequencingStats.

        PercentGtQ30 of the LaneSequencingStats  # noqa: E501

        :param percent_gt_q30: The percent_gt_q30 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30 = percent_gt_q30

    @property
    def percent_gt_q30_last10_cycles(self):
        """Gets the percent_gt_q30_last10_cycles of this LaneSequencingStats.  # noqa: E501

        PercentGtQ30Last10Cycles of the LaneSequencingStats  # noqa: E501

        :return: The percent_gt_q30_last10_cycles of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_last10_cycles

    @percent_gt_q30_last10_cycles.setter
    def percent_gt_q30_last10_cycles(self, percent_gt_q30_last10_cycles):
        """Sets the percent_gt_q30_last10_cycles of this LaneSequencingStats.

        PercentGtQ30Last10Cycles of the LaneSequencingStats  # noqa: E501

        :param percent_gt_q30_last10_cycles: The percent_gt_q30_last10_cycles of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles

    @property
    def _yield(self):
        """Gets the _yield of this LaneSequencingStats.  # noqa: E501

        Yield of the LaneSequencingStats  # noqa: E501

        :return: The _yield of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this LaneSequencingStats.

        Yield of the LaneSequencingStats  # noqa: E501

        :param _yield: The _yield of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def max_cycle_called(self):
        """Gets the max_cycle_called of this LaneSequencingStats.  # noqa: E501

        MaxCycleCalled of the LaneSequencingStats  # noqa: E501

        :return: The max_cycle_called of this LaneSequencingStats.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_called

    @max_cycle_called.setter
    def max_cycle_called(self, max_cycle_called):
        """Sets the max_cycle_called of this LaneSequencingStats.

        MaxCycleCalled of the LaneSequencingStats  # noqa: E501

        :param max_cycle_called: The max_cycle_called of this LaneSequencingStats.  # noqa: E501
        :type: int
        """

        self._max_cycle_called = max_cycle_called

    @property
    def percent_aligned(self):
        """Gets the percent_aligned of this LaneSequencingStats.  # noqa: E501

        PercentAligned of the LaneSequencingStats  # noqa: E501

        :return: The percent_aligned of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._percent_aligned

    @percent_aligned.setter
    def percent_aligned(self, percent_aligned):
        """Sets the percent_aligned of this LaneSequencingStats.

        PercentAligned of the LaneSequencingStats  # noqa: E501

        :param percent_aligned: The percent_aligned of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._percent_aligned = percent_aligned

    @property
    def error_rate(self):
        """Gets the error_rate of this LaneSequencingStats.  # noqa: E501

        ErrorRate of the LaneSequencingStats  # noqa: E501

        :return: The error_rate of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this LaneSequencingStats.

        ErrorRate of the LaneSequencingStats  # noqa: E501

        :param error_rate: The error_rate of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def error_rate35(self):
        """Gets the error_rate35 of this LaneSequencingStats.  # noqa: E501

        ErrorRate35 of the LaneSequencingStats  # noqa: E501

        :return: The error_rate35 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._error_rate35

    @error_rate35.setter
    def error_rate35(self, error_rate35):
        """Sets the error_rate35 of this LaneSequencingStats.

        ErrorRate35 of the LaneSequencingStats  # noqa: E501

        :param error_rate35: The error_rate35 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._error_rate35 = error_rate35

    @property
    def error_rate50(self):
        """Gets the error_rate50 of this LaneSequencingStats.  # noqa: E501

        ErrorRate50 of the LaneSequencingStats  # noqa: E501

        :return: The error_rate50 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._error_rate50

    @error_rate50.setter
    def error_rate50(self, error_rate50):
        """Sets the error_rate50 of this LaneSequencingStats.

        ErrorRate50 of the LaneSequencingStats  # noqa: E501

        :param error_rate50: The error_rate50 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._error_rate50 = error_rate50

    @property
    def error_rate75(self):
        """Gets the error_rate75 of this LaneSequencingStats.  # noqa: E501

        ErrorRate75 of the LaneSequencingStats  # noqa: E501

        :return: The error_rate75 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._error_rate75

    @error_rate75.setter
    def error_rate75(self, error_rate75):
        """Sets the error_rate75 of this LaneSequencingStats.

        ErrorRate75 of the LaneSequencingStats  # noqa: E501

        :param error_rate75: The error_rate75 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._error_rate75 = error_rate75

    @property
    def error_rate100(self):
        """Gets the error_rate100 of this LaneSequencingStats.  # noqa: E501

        ErrorRate100 of the LaneSequencingStats  # noqa: E501

        :return: The error_rate100 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._error_rate100

    @error_rate100.setter
    def error_rate100(self, error_rate100):
        """Sets the error_rate100 of this LaneSequencingStats.

        ErrorRate100 of the LaneSequencingStats  # noqa: E501

        :param error_rate100: The error_rate100 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._error_rate100 = error_rate100

    @property
    def intensity_cycle1(self):
        """Gets the intensity_cycle1 of this LaneSequencingStats.  # noqa: E501

        IntensityCycle1 of the LaneSequencingStats  # noqa: E501

        :return: The intensity_cycle1 of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._intensity_cycle1

    @intensity_cycle1.setter
    def intensity_cycle1(self, intensity_cycle1):
        """Sets the intensity_cycle1 of this LaneSequencingStats.

        IntensityCycle1 of the LaneSequencingStats  # noqa: E501

        :param intensity_cycle1: The intensity_cycle1 of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._intensity_cycle1 = intensity_cycle1

    @property
    def projected_yield_in_gbp(self):
        """Gets the projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501

        ProjectedYieldInGbp of the LaneSequencingStats  # noqa: E501

        :return: The projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._projected_yield_in_gbp

    @projected_yield_in_gbp.setter
    def projected_yield_in_gbp(self, projected_yield_in_gbp):
        """Sets the projected_yield_in_gbp of this LaneSequencingStats.

        ProjectedYieldInGbp of the LaneSequencingStats  # noqa: E501

        :param projected_yield_in_gbp: The projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._projected_yield_in_gbp = projected_yield_in_gbp

    @property
    def max_projected_yield_in_gbp(self):
        """Gets the max_projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501

        MaxProjectedYieldInGbp of the LaneSequencingStats  # noqa: E501

        :return: The max_projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._max_projected_yield_in_gbp

    @max_projected_yield_in_gbp.setter
    def max_projected_yield_in_gbp(self, max_projected_yield_in_gbp):
        """Sets the max_projected_yield_in_gbp of this LaneSequencingStats.

        MaxProjectedYieldInGbp of the LaneSequencingStats  # noqa: E501

        :param max_projected_yield_in_gbp: The max_projected_yield_in_gbp of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._max_projected_yield_in_gbp = max_projected_yield_in_gbp

    @property
    def phasing_slope(self):
        """Gets the phasing_slope of this LaneSequencingStats.  # noqa: E501

        PhasingSlope of the LaneSequencingStats  # noqa: E501

        :return: The phasing_slope of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._phasing_slope

    @phasing_slope.setter
    def phasing_slope(self, phasing_slope):
        """Sets the phasing_slope of this LaneSequencingStats.

        PhasingSlope of the LaneSequencingStats  # noqa: E501

        :param phasing_slope: The phasing_slope of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._phasing_slope = phasing_slope

    @property
    def phasing_offset(self):
        """Gets the phasing_offset of this LaneSequencingStats.  # noqa: E501

        PhasingOffset of the LaneSequencingStats  # noqa: E501

        :return: The phasing_offset of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._phasing_offset

    @phasing_offset.setter
    def phasing_offset(self, phasing_offset):
        """Sets the phasing_offset of this LaneSequencingStats.

        PhasingOffset of the LaneSequencingStats  # noqa: E501

        :param phasing_offset: The phasing_offset of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._phasing_offset = phasing_offset

    @property
    def pre_phasing_slope(self):
        """Gets the pre_phasing_slope of this LaneSequencingStats.  # noqa: E501

        PrePhasingSlope of the LaneSequencingStats  # noqa: E501

        :return: The pre_phasing_slope of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_slope

    @pre_phasing_slope.setter
    def pre_phasing_slope(self, pre_phasing_slope):
        """Sets the pre_phasing_slope of this LaneSequencingStats.

        PrePhasingSlope of the LaneSequencingStats  # noqa: E501

        :param pre_phasing_slope: The pre_phasing_slope of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._pre_phasing_slope = pre_phasing_slope

    @property
    def pre_phasing_offset(self):
        """Gets the pre_phasing_offset of this LaneSequencingStats.  # noqa: E501

        PrePhasingOffset of the LaneSequencingStats  # noqa: E501

        :return: The pre_phasing_offset of this LaneSequencingStats.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_offset

    @pre_phasing_offset.setter
    def pre_phasing_offset(self, pre_phasing_offset):
        """Sets the pre_phasing_offset of this LaneSequencingStats.

        PrePhasingOffset of the LaneSequencingStats  # noqa: E501

        :param pre_phasing_offset: The pre_phasing_offset of this LaneSequencingStats.  # noqa: E501
        :type: float
        """

        self._pre_phasing_offset = pre_phasing_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaneSequencingStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaneSequencingStats):
            return True

        return self.to_dict() != other.to_dict()
