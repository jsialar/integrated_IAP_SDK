# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class ReplaceSequencingStatsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cycle_number': 'int',
        'run_sequencing_stats': 'RunSequencingStats',
        'lane_sequencing_stats': 'list[LaneSequencingStats]',
        'read_sequencing_stats': 'list[ReadSequencingStats]',
        'lane_by_read_sequencing_stats': 'list[LaneByReadSequencingStats]'
    }

    attribute_map = {
        'cycle_number': 'cycleNumber',
        'run_sequencing_stats': 'runSequencingStats',
        'lane_sequencing_stats': 'laneSequencingStats',
        'read_sequencing_stats': 'readSequencingStats',
        'lane_by_read_sequencing_stats': 'laneByReadSequencingStats'
    }

    def __init__(self, cycle_number=None, run_sequencing_stats=None, lane_sequencing_stats=None, read_sequencing_stats=None, lane_by_read_sequencing_stats=None, local_vars_configuration=None):  # noqa: E501
        """ReplaceSequencingStatsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cycle_number = None
        self._run_sequencing_stats = None
        self._lane_sequencing_stats = None
        self._read_sequencing_stats = None
        self._lane_by_read_sequencing_stats = None
        self.discriminator = None

        self.cycle_number = cycle_number
        if run_sequencing_stats is not None:
            self.run_sequencing_stats = run_sequencing_stats
        if lane_sequencing_stats is not None:
            self.lane_sequencing_stats = lane_sequencing_stats
        if read_sequencing_stats is not None:
            self.read_sequencing_stats = read_sequencing_stats
        if lane_by_read_sequencing_stats is not None:
            self.lane_by_read_sequencing_stats = lane_by_read_sequencing_stats

    @property
    def cycle_number(self):
        """Gets the cycle_number of this ReplaceSequencingStatsRequest.  # noqa: E501


        :return: The cycle_number of this ReplaceSequencingStatsRequest.  # noqa: E501
        :rtype: int
        """
        return self._cycle_number

    @cycle_number.setter
    def cycle_number(self, cycle_number):
        """Sets the cycle_number of this ReplaceSequencingStatsRequest.


        :param cycle_number: The cycle_number of this ReplaceSequencingStatsRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and cycle_number is None:  # noqa: E501
            raise ValueError("Invalid value for `cycle_number`, must not be `None`")  # noqa: E501

        self._cycle_number = cycle_number

    @property
    def run_sequencing_stats(self):
        """Gets the run_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501


        :return: The run_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :rtype: RunSequencingStats
        """
        return self._run_sequencing_stats

    @run_sequencing_stats.setter
    def run_sequencing_stats(self, run_sequencing_stats):
        """Sets the run_sequencing_stats of this ReplaceSequencingStatsRequest.


        :param run_sequencing_stats: The run_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :type: RunSequencingStats
        """

        self._run_sequencing_stats = run_sequencing_stats

    @property
    def lane_sequencing_stats(self):
        """Gets the lane_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501

        List of LaneSequencingStats of the run  # noqa: E501

        :return: The lane_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :rtype: list[LaneSequencingStats]
        """
        return self._lane_sequencing_stats

    @lane_sequencing_stats.setter
    def lane_sequencing_stats(self, lane_sequencing_stats):
        """Sets the lane_sequencing_stats of this ReplaceSequencingStatsRequest.

        List of LaneSequencingStats of the run  # noqa: E501

        :param lane_sequencing_stats: The lane_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :type: list[LaneSequencingStats]
        """

        self._lane_sequencing_stats = lane_sequencing_stats

    @property
    def read_sequencing_stats(self):
        """Gets the read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501

        List of ReadSequencingStats of the run  # noqa: E501

        :return: The read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :rtype: list[ReadSequencingStats]
        """
        return self._read_sequencing_stats

    @read_sequencing_stats.setter
    def read_sequencing_stats(self, read_sequencing_stats):
        """Sets the read_sequencing_stats of this ReplaceSequencingStatsRequest.

        List of ReadSequencingStats of the run  # noqa: E501

        :param read_sequencing_stats: The read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :type: list[ReadSequencingStats]
        """

        self._read_sequencing_stats = read_sequencing_stats

    @property
    def lane_by_read_sequencing_stats(self):
        """Gets the lane_by_read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501

        List of LaneByReadSequencingStats of the run  # noqa: E501

        :return: The lane_by_read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :rtype: list[LaneByReadSequencingStats]
        """
        return self._lane_by_read_sequencing_stats

    @lane_by_read_sequencing_stats.setter
    def lane_by_read_sequencing_stats(self, lane_by_read_sequencing_stats):
        """Sets the lane_by_read_sequencing_stats of this ReplaceSequencingStatsRequest.

        List of LaneByReadSequencingStats of the run  # noqa: E501

        :param lane_by_read_sequencing_stats: The lane_by_read_sequencing_stats of this ReplaceSequencingStatsRequest.  # noqa: E501
        :type: list[LaneByReadSequencingStats]
        """

        self._lane_by_read_sequencing_stats = lane_by_read_sequencing_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplaceSequencingStatsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplaceSequencingStatsRequest):
            return True

        return self.to_dict() != other.to_dict()
