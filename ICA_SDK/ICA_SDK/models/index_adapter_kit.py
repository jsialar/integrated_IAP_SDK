# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class IndexAdapterKit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'urn': 'str',
        'href': 'str',
        'can_update': 'bool',
        'name': 'str',
        'display_name': 'str',
        'organization': 'str',
        'is_illumina': 'bool',
        'description': 'str',
        'allowed_index_strategies': 'list[str]',
        'adapter_sequence_read1': 'str',
        'adapter_sequence_read2': 'str',
        'settings': 'IndexAdapterKitSettingsResponse',
        'checksum': 'str',
        'sub_tenant_id': 'str',
        'acl': 'list[str]',
        'index_sequences': 'list[IndexSequence]',
        'compatible_library_prep_kits': 'list[LibraryPrepKitCompact]',
        'num_cycles_index1': 'int',
        'num_cycles_index2': 'int',
        'tenant_id': 'str',
        'tenant_name': 'str',
        'created_by_client_id': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'time_created': 'datetime',
        'time_modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'urn': 'urn',
        'href': 'href',
        'can_update': 'canUpdate',
        'name': 'name',
        'display_name': 'displayName',
        'organization': 'organization',
        'is_illumina': 'isIllumina',
        'description': 'description',
        'allowed_index_strategies': 'allowedIndexStrategies',
        'adapter_sequence_read1': 'adapterSequenceRead1',
        'adapter_sequence_read2': 'adapterSequenceRead2',
        'settings': 'settings',
        'checksum': 'checksum',
        'sub_tenant_id': 'subTenantId',
        'acl': 'acl',
        'index_sequences': 'indexSequences',
        'compatible_library_prep_kits': 'compatibleLibraryPrepKits',
        'num_cycles_index1': 'numCyclesIndex1',
        'num_cycles_index2': 'numCyclesIndex2',
        'tenant_id': 'tenantId',
        'tenant_name': 'tenantName',
        'created_by_client_id': 'createdByClientId',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'time_created': 'timeCreated',
        'time_modified': 'timeModified'
    }

    def __init__(self, id=None, urn=None, href=None, can_update=None, name=None, display_name=None, organization=None, is_illumina=None, description=None, allowed_index_strategies=None, adapter_sequence_read1=None, adapter_sequence_read2=None, settings=None, checksum=None, sub_tenant_id=None, acl=None, index_sequences=None, compatible_library_prep_kits=None, num_cycles_index1=None, num_cycles_index2=None, tenant_id=None, tenant_name=None, created_by_client_id=None, created_by=None, modified_by=None, time_created=None, time_modified=None, local_vars_configuration=None):  # noqa: E501
        """IndexAdapterKit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urn = None
        self._href = None
        self._can_update = None
        self._name = None
        self._display_name = None
        self._organization = None
        self._is_illumina = None
        self._description = None
        self._allowed_index_strategies = None
        self._adapter_sequence_read1 = None
        self._adapter_sequence_read2 = None
        self._settings = None
        self._checksum = None
        self._sub_tenant_id = None
        self._acl = None
        self._index_sequences = None
        self._compatible_library_prep_kits = None
        self._num_cycles_index1 = None
        self._num_cycles_index2 = None
        self._tenant_id = None
        self._tenant_name = None
        self._created_by_client_id = None
        self._created_by = None
        self._modified_by = None
        self._time_created = None
        self._time_modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urn is not None:
            self.urn = urn
        if href is not None:
            self.href = href
        if can_update is not None:
            self.can_update = can_update
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if organization is not None:
            self.organization = organization
        if is_illumina is not None:
            self.is_illumina = is_illumina
        if description is not None:
            self.description = description
        if allowed_index_strategies is not None:
            self.allowed_index_strategies = allowed_index_strategies
        if adapter_sequence_read1 is not None:
            self.adapter_sequence_read1 = adapter_sequence_read1
        if adapter_sequence_read2 is not None:
            self.adapter_sequence_read2 = adapter_sequence_read2
        if settings is not None:
            self.settings = settings
        if checksum is not None:
            self.checksum = checksum
        if sub_tenant_id is not None:
            self.sub_tenant_id = sub_tenant_id
        if acl is not None:
            self.acl = acl
        if index_sequences is not None:
            self.index_sequences = index_sequences
        if compatible_library_prep_kits is not None:
            self.compatible_library_prep_kits = compatible_library_prep_kits
        if num_cycles_index1 is not None:
            self.num_cycles_index1 = num_cycles_index1
        if num_cycles_index2 is not None:
            self.num_cycles_index2 = num_cycles_index2
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if created_by_client_id is not None:
            self.created_by_client_id = created_by_client_id
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if time_created is not None:
            self.time_created = time_created
        if time_modified is not None:
            self.time_modified = time_modified

    @property
    def id(self):
        """Gets the id of this IndexAdapterKit.  # noqa: E501

        Unique object ID  # noqa: E501

        :return: The id of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndexAdapterKit.

        Unique object ID  # noqa: E501

        :param id: The id of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def urn(self):
        """Gets the urn of this IndexAdapterKit.  # noqa: E501

        URN of the object  # noqa: E501

        :return: The urn of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this IndexAdapterKit.

        URN of the object  # noqa: E501

        :param urn: The urn of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def href(self):
        """Gets the href of this IndexAdapterKit.  # noqa: E501

        HREF to the object  # noqa: E501

        :return: The href of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IndexAdapterKit.

        HREF to the object  # noqa: E501

        :param href: The href of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def can_update(self):
        """Gets the can_update of this IndexAdapterKit.  # noqa: E501

        Indicate whether the IndexAdapterKit can be updated currently.  # noqa: E501

        :return: The can_update of this IndexAdapterKit.  # noqa: E501
        :rtype: bool
        """
        return self._can_update

    @can_update.setter
    def can_update(self, can_update):
        """Sets the can_update of this IndexAdapterKit.

        Indicate whether the IndexAdapterKit can be updated currently.  # noqa: E501

        :param can_update: The can_update of this IndexAdapterKit.  # noqa: E501
        :type: bool
        """

        self._can_update = can_update

    @property
    def name(self):
        """Gets the name of this IndexAdapterKit.  # noqa: E501

        Name of the kit  # noqa: E501

        :return: The name of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexAdapterKit.

        Name of the kit  # noqa: E501

        :param name: The name of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this IndexAdapterKit.  # noqa: E501

        User-friendly name of the kit  # noqa: E501

        :return: The display_name of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IndexAdapterKit.

        User-friendly name of the kit  # noqa: E501

        :param display_name: The display_name of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def organization(self):
        """Gets the organization of this IndexAdapterKit.  # noqa: E501

        Name of organization owning the kit  # noqa: E501

        :return: The organization of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this IndexAdapterKit.

        Name of organization owning the kit  # noqa: E501

        :param organization: The organization of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def is_illumina(self):
        """Gets the is_illumina of this IndexAdapterKit.  # noqa: E501

        Indicates whether or not the current index adapter kit is from Illumina  # noqa: E501

        :return: The is_illumina of this IndexAdapterKit.  # noqa: E501
        :rtype: bool
        """
        return self._is_illumina

    @is_illumina.setter
    def is_illumina(self, is_illumina):
        """Sets the is_illumina of this IndexAdapterKit.

        Indicates whether or not the current index adapter kit is from Illumina  # noqa: E501

        :param is_illumina: The is_illumina of this IndexAdapterKit.  # noqa: E501
        :type: bool
        """

        self._is_illumina = is_illumina

    @property
    def description(self):
        """Gets the description of this IndexAdapterKit.  # noqa: E501

        Description of the kit  # noqa: E501

        :return: The description of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IndexAdapterKit.

        Description of the kit  # noqa: E501

        :param description: The description of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def allowed_index_strategies(self):
        """Gets the allowed_index_strategies of this IndexAdapterKit.  # noqa: E501

        List of allowed index strategies  # noqa: E501

        :return: The allowed_index_strategies of this IndexAdapterKit.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_index_strategies

    @allowed_index_strategies.setter
    def allowed_index_strategies(self, allowed_index_strategies):
        """Sets the allowed_index_strategies of this IndexAdapterKit.

        List of allowed index strategies  # noqa: E501

        :param allowed_index_strategies: The allowed_index_strategies of this IndexAdapterKit.  # noqa: E501
        :type: list[str]
        """

        self._allowed_index_strategies = allowed_index_strategies

    @property
    def adapter_sequence_read1(self):
        """Gets the adapter_sequence_read1 of this IndexAdapterKit.  # noqa: E501

        Read 1 adapter sequence  # noqa: E501

        :return: The adapter_sequence_read1 of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read1

    @adapter_sequence_read1.setter
    def adapter_sequence_read1(self, adapter_sequence_read1):
        """Sets the adapter_sequence_read1 of this IndexAdapterKit.

        Read 1 adapter sequence  # noqa: E501

        :param adapter_sequence_read1: The adapter_sequence_read1 of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._adapter_sequence_read1 = adapter_sequence_read1

    @property
    def adapter_sequence_read2(self):
        """Gets the adapter_sequence_read2 of this IndexAdapterKit.  # noqa: E501

        Read 2 adapter sequence  # noqa: E501

        :return: The adapter_sequence_read2 of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read2

    @adapter_sequence_read2.setter
    def adapter_sequence_read2(self, adapter_sequence_read2):
        """Sets the adapter_sequence_read2 of this IndexAdapterKit.

        Read 2 adapter sequence  # noqa: E501

        :param adapter_sequence_read2: The adapter_sequence_read2 of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._adapter_sequence_read2 = adapter_sequence_read2

    @property
    def settings(self):
        """Gets the settings of this IndexAdapterKit.  # noqa: E501


        :return: The settings of this IndexAdapterKit.  # noqa: E501
        :rtype: IndexAdapterKitSettingsResponse
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this IndexAdapterKit.


        :param settings: The settings of this IndexAdapterKit.  # noqa: E501
        :type: IndexAdapterKitSettingsResponse
        """

        self._settings = settings

    @property
    def checksum(self):
        """Gets the checksum of this IndexAdapterKit.  # noqa: E501

        Stores the checksum of IndexAdapterKit  # noqa: E501

        :return: The checksum of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this IndexAdapterKit.

        Stores the checksum of IndexAdapterKit  # noqa: E501

        :param checksum: The checksum of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def sub_tenant_id(self):
        """Gets the sub_tenant_id of this IndexAdapterKit.  # noqa: E501

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :return: The sub_tenant_id of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._sub_tenant_id

    @sub_tenant_id.setter
    def sub_tenant_id(self, sub_tenant_id):
        """Sets the sub_tenant_id of this IndexAdapterKit.

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :param sub_tenant_id: The sub_tenant_id of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._sub_tenant_id = sub_tenant_id

    @property
    def acl(self):
        """Gets the acl of this IndexAdapterKit.  # noqa: E501

        Access control list of the object  # noqa: E501

        :return: The acl of this IndexAdapterKit.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this IndexAdapterKit.

        Access control list of the object  # noqa: E501

        :param acl: The acl of this IndexAdapterKit.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def index_sequences(self):
        """Gets the index_sequences of this IndexAdapterKit.  # noqa: E501

        Index sequences of the kit  # noqa: E501

        :return: The index_sequences of this IndexAdapterKit.  # noqa: E501
        :rtype: list[IndexSequence]
        """
        return self._index_sequences

    @index_sequences.setter
    def index_sequences(self, index_sequences):
        """Sets the index_sequences of this IndexAdapterKit.

        Index sequences of the kit  # noqa: E501

        :param index_sequences: The index_sequences of this IndexAdapterKit.  # noqa: E501
        :type: list[IndexSequence]
        """

        self._index_sequences = index_sequences

    @property
    def compatible_library_prep_kits(self):
        """Gets the compatible_library_prep_kits of this IndexAdapterKit.  # noqa: E501

        Compatible library preparation kits for this index adapter kit  # noqa: E501

        :return: The compatible_library_prep_kits of this IndexAdapterKit.  # noqa: E501
        :rtype: list[LibraryPrepKitCompact]
        """
        return self._compatible_library_prep_kits

    @compatible_library_prep_kits.setter
    def compatible_library_prep_kits(self, compatible_library_prep_kits):
        """Sets the compatible_library_prep_kits of this IndexAdapterKit.

        Compatible library preparation kits for this index adapter kit  # noqa: E501

        :param compatible_library_prep_kits: The compatible_library_prep_kits of this IndexAdapterKit.  # noqa: E501
        :type: list[LibraryPrepKitCompact]
        """

        self._compatible_library_prep_kits = compatible_library_prep_kits

    @property
    def num_cycles_index1(self):
        """Gets the num_cycles_index1 of this IndexAdapterKit.  # noqa: E501

        Number of cycles in index 1  # noqa: E501

        :return: The num_cycles_index1 of this IndexAdapterKit.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index1

    @num_cycles_index1.setter
    def num_cycles_index1(self, num_cycles_index1):
        """Sets the num_cycles_index1 of this IndexAdapterKit.

        Number of cycles in index 1  # noqa: E501

        :param num_cycles_index1: The num_cycles_index1 of this IndexAdapterKit.  # noqa: E501
        :type: int
        """

        self._num_cycles_index1 = num_cycles_index1

    @property
    def num_cycles_index2(self):
        """Gets the num_cycles_index2 of this IndexAdapterKit.  # noqa: E501

        Number of cycles in index 2  # noqa: E501

        :return: The num_cycles_index2 of this IndexAdapterKit.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index2

    @num_cycles_index2.setter
    def num_cycles_index2(self, num_cycles_index2):
        """Sets the num_cycles_index2 of this IndexAdapterKit.

        Number of cycles in index 2  # noqa: E501

        :param num_cycles_index2: The num_cycles_index2 of this IndexAdapterKit.  # noqa: E501
        :type: int
        """

        self._num_cycles_index2 = num_cycles_index2

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IndexAdapterKit.  # noqa: E501

        Unique identifier for the resource tenant  # noqa: E501

        :return: The tenant_id of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IndexAdapterKit.

        Unique identifier for the resource tenant  # noqa: E501

        :param tenant_id: The tenant_id of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this IndexAdapterKit.  # noqa: E501

        Unique tenant name for the resource tenant  # noqa: E501

        :return: The tenant_name of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this IndexAdapterKit.

        Unique tenant name for the resource tenant  # noqa: E501

        :param tenant_name: The tenant_name of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def created_by_client_id(self):
        """Gets the created_by_client_id of this IndexAdapterKit.  # noqa: E501

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :return: The created_by_client_id of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._created_by_client_id

    @created_by_client_id.setter
    def created_by_client_id(self, created_by_client_id):
        """Sets the created_by_client_id of this IndexAdapterKit.

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :param created_by_client_id: The created_by_client_id of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._created_by_client_id = created_by_client_id

    @property
    def created_by(self):
        """Gets the created_by of this IndexAdapterKit.  # noqa: E501

        User that created the resource  # noqa: E501

        :return: The created_by of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this IndexAdapterKit.

        User that created the resource  # noqa: E501

        :param created_by: The created_by of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this IndexAdapterKit.  # noqa: E501

        User that last modified the resource  # noqa: E501

        :return: The modified_by of this IndexAdapterKit.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this IndexAdapterKit.

        User that last modified the resource  # noqa: E501

        :param modified_by: The modified_by of this IndexAdapterKit.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def time_created(self):
        """Gets the time_created of this IndexAdapterKit.  # noqa: E501

        Time (in UTC) the resource was created  # noqa: E501

        :return: The time_created of this IndexAdapterKit.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this IndexAdapterKit.

        Time (in UTC) the resource was created  # noqa: E501

        :param time_created: The time_created of this IndexAdapterKit.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def time_modified(self):
        """Gets the time_modified of this IndexAdapterKit.  # noqa: E501

        Time (in UTC) the resource was modified  # noqa: E501

        :return: The time_modified of this IndexAdapterKit.  # noqa: E501
        :rtype: datetime
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this IndexAdapterKit.

        Time (in UTC) the resource was modified  # noqa: E501

        :param time_modified: The time_modified of this IndexAdapterKit.  # noqa: E501
        :type: datetime
        """

        self._time_modified = time_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexAdapterKit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IndexAdapterKit):
            return True

        return self.to_dict() != other.to_dict()
