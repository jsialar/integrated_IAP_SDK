# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class CreateIndexAdapterKitRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'organization': 'str',
        'description': 'str',
        'allowed_index_strategies': 'list[str]',
        'adapter_sequence_read1': 'str',
        'adapter_sequence_read2': 'str',
        'settings': 'IndexAdapterKitSettings',
        'checksum': 'str',
        'index_sequences': 'list[IndexSequence]',
        'skip_index_diversity_validation': 'bool',
        'acl': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'organization': 'organization',
        'description': 'description',
        'allowed_index_strategies': 'allowedIndexStrategies',
        'adapter_sequence_read1': 'adapterSequenceRead1',
        'adapter_sequence_read2': 'adapterSequenceRead2',
        'settings': 'settings',
        'checksum': 'checksum',
        'index_sequences': 'indexSequences',
        'skip_index_diversity_validation': 'skipIndexDiversityValidation',
        'acl': 'acl'
    }

    def __init__(self, name=None, display_name=None, organization=None, description=None, allowed_index_strategies=None, adapter_sequence_read1=None, adapter_sequence_read2=None, settings=None, checksum=None, index_sequences=None, skip_index_diversity_validation=None, acl=None, local_vars_configuration=None):  # noqa: E501
        """CreateIndexAdapterKitRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._organization = None
        self._description = None
        self._allowed_index_strategies = None
        self._adapter_sequence_read1 = None
        self._adapter_sequence_read2 = None
        self._settings = None
        self._checksum = None
        self._index_sequences = None
        self._skip_index_diversity_validation = None
        self._acl = None
        self.discriminator = None

        self.name = name
        if display_name is not None:
            self.display_name = display_name
        if organization is not None:
            self.organization = organization
        if description is not None:
            self.description = description
        self.allowed_index_strategies = allowed_index_strategies
        if adapter_sequence_read1 is not None:
            self.adapter_sequence_read1 = adapter_sequence_read1
        if adapter_sequence_read2 is not None:
            self.adapter_sequence_read2 = adapter_sequence_read2
        if settings is not None:
            self.settings = settings
        if checksum is not None:
            self.checksum = checksum
        if index_sequences is not None:
            self.index_sequences = index_sequences
        if skip_index_diversity_validation is not None:
            self.skip_index_diversity_validation = skip_index_diversity_validation
        if acl is not None:
            self.acl = acl

    @property
    def name(self):
        """Gets the name of this CreateIndexAdapterKitRequest.  # noqa: E501

        Name of the kit  # noqa: E501

        :return: The name of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateIndexAdapterKitRequest.

        Name of the kit  # noqa: E501

        :param name: The name of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this CreateIndexAdapterKitRequest.  # noqa: E501

        User-friendly name of the kit  # noqa: E501

        :return: The display_name of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateIndexAdapterKitRequest.

        User-friendly name of the kit  # noqa: E501

        :param display_name: The display_name of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 255):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def organization(self):
        """Gets the organization of this CreateIndexAdapterKitRequest.  # noqa: E501

        Organization owning the kit  # noqa: E501

        :return: The organization of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CreateIndexAdapterKitRequest.

        Organization owning the kit  # noqa: E501

        :param organization: The organization of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) > 255):
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) < 0):
            raise ValueError("Invalid value for `organization`, length must be greater than or equal to `0`")  # noqa: E501

        self._organization = organization

    @property
    def description(self):
        """Gets the description of this CreateIndexAdapterKitRequest.  # noqa: E501

        Description of the kit  # noqa: E501

        :return: The description of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIndexAdapterKitRequest.

        Description of the kit  # noqa: E501

        :param description: The description of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def allowed_index_strategies(self):
        """Gets the allowed_index_strategies of this CreateIndexAdapterKitRequest.  # noqa: E501

        Allowed index strategies  # noqa: E501

        :return: The allowed_index_strategies of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_index_strategies

    @allowed_index_strategies.setter
    def allowed_index_strategies(self, allowed_index_strategies):
        """Sets the allowed_index_strategies of this CreateIndexAdapterKitRequest.

        Allowed index strategies  # noqa: E501

        :param allowed_index_strategies: The allowed_index_strategies of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and allowed_index_strategies is None:  # noqa: E501
            raise ValueError("Invalid value for `allowed_index_strategies`, must not be `None`")  # noqa: E501
        allowed_values = ["NoIndex", "Single", "Dual"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(allowed_index_strategies).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allowed_index_strategies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_index_strategies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_index_strategies = allowed_index_strategies

    @property
    def adapter_sequence_read1(self):
        """Gets the adapter_sequence_read1 of this CreateIndexAdapterKitRequest.  # noqa: E501

        Optional read 1 adapter sequence  # noqa: E501

        :return: The adapter_sequence_read1 of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read1

    @adapter_sequence_read1.setter
    def adapter_sequence_read1(self, adapter_sequence_read1):
        """Sets the adapter_sequence_read1 of this CreateIndexAdapterKitRequest.

        Optional read 1 adapter sequence  # noqa: E501

        :param adapter_sequence_read1: The adapter_sequence_read1 of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read1 is not None and len(adapter_sequence_read1) > 128):
            raise ValueError("Invalid value for `adapter_sequence_read1`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read1 is not None and len(adapter_sequence_read1) < 0):
            raise ValueError("Invalid value for `adapter_sequence_read1`, length must be greater than or equal to `0`")  # noqa: E501

        self._adapter_sequence_read1 = adapter_sequence_read1

    @property
    def adapter_sequence_read2(self):
        """Gets the adapter_sequence_read2 of this CreateIndexAdapterKitRequest.  # noqa: E501

        Optional read 2 adapter sequence  # noqa: E501

        :return: The adapter_sequence_read2 of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read2

    @adapter_sequence_read2.setter
    def adapter_sequence_read2(self, adapter_sequence_read2):
        """Sets the adapter_sequence_read2 of this CreateIndexAdapterKitRequest.

        Optional read 2 adapter sequence  # noqa: E501

        :param adapter_sequence_read2: The adapter_sequence_read2 of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read2 is not None and len(adapter_sequence_read2) > 128):
            raise ValueError("Invalid value for `adapter_sequence_read2`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read2 is not None and len(adapter_sequence_read2) < 0):
            raise ValueError("Invalid value for `adapter_sequence_read2`, length must be greater than or equal to `0`")  # noqa: E501

        self._adapter_sequence_read2 = adapter_sequence_read2

    @property
    def settings(self):
        """Gets the settings of this CreateIndexAdapterKitRequest.  # noqa: E501


        :return: The settings of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: IndexAdapterKitSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateIndexAdapterKitRequest.


        :param settings: The settings of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: IndexAdapterKitSettings
        """

        self._settings = settings

    @property
    def checksum(self):
        """Gets the checksum of this CreateIndexAdapterKitRequest.  # noqa: E501

        Stores the checksum of IndexAdapterKit  # noqa: E501

        :return: The checksum of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this CreateIndexAdapterKitRequest.

        Stores the checksum of IndexAdapterKit  # noqa: E501

        :param checksum: The checksum of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 0):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `0`")  # noqa: E501

        self._checksum = checksum

    @property
    def index_sequences(self):
        """Gets the index_sequences of this CreateIndexAdapterKitRequest.  # noqa: E501

        Index sequence mappings  # noqa: E501

        :return: The index_sequences of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: list[IndexSequence]
        """
        return self._index_sequences

    @index_sequences.setter
    def index_sequences(self, index_sequences):
        """Sets the index_sequences of this CreateIndexAdapterKitRequest.

        Index sequence mappings  # noqa: E501

        :param index_sequences: The index_sequences of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: list[IndexSequence]
        """

        self._index_sequences = index_sequences

    @property
    def skip_index_diversity_validation(self):
        """Gets the skip_index_diversity_validation of this CreateIndexAdapterKitRequest.  # noqa: E501

        Flag to skip index diversity validation  # noqa: E501

        :return: The skip_index_diversity_validation of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_index_diversity_validation

    @skip_index_diversity_validation.setter
    def skip_index_diversity_validation(self, skip_index_diversity_validation):
        """Sets the skip_index_diversity_validation of this CreateIndexAdapterKitRequest.

        Flag to skip index diversity validation  # noqa: E501

        :param skip_index_diversity_validation: The skip_index_diversity_validation of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: bool
        """

        self._skip_index_diversity_validation = skip_index_diversity_validation

    @property
    def acl(self):
        """Gets the acl of this CreateIndexAdapterKitRequest.  # noqa: E501


        :return: The acl of this CreateIndexAdapterKitRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CreateIndexAdapterKitRequest.


        :param acl: The acl of this CreateIndexAdapterKitRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateIndexAdapterKitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateIndexAdapterKitRequest):
            return True

        return self.to_dict() != other.to_dict()
