# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RegisterSampleDataRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'skip_copy_files_to_project_volume': 'bool',
        'total_sample_count': 'int',
        'total_dataset_count': 'int',
        'sample_id': 'str',
        'sample_name': 'str',
        'project_name': 'str',
        'external_sample_id': 'str',
        'external_project_id': 'str',
        'external_analysis_run_id': 'str',
        'analysis_datasets': 'list[CreateAnalysisDatasetParameters]'
    }

    attribute_map = {
        'skip_copy_files_to_project_volume': 'skipCopyFilesToProjectVolume',
        'total_sample_count': 'totalSampleCount',
        'total_dataset_count': 'totalDatasetCount',
        'sample_id': 'sampleId',
        'sample_name': 'sampleName',
        'project_name': 'projectName',
        'external_sample_id': 'externalSampleId',
        'external_project_id': 'externalProjectId',
        'external_analysis_run_id': 'externalAnalysisRunId',
        'analysis_datasets': 'analysisDatasets'
    }

    def __init__(self, skip_copy_files_to_project_volume=None, total_sample_count=None, total_dataset_count=None, sample_id=None, sample_name=None, project_name=None, external_sample_id=None, external_project_id=None, external_analysis_run_id=None, analysis_datasets=None, local_vars_configuration=None):  # noqa: E501
        """RegisterSampleDataRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._skip_copy_files_to_project_volume = None
        self._total_sample_count = None
        self._total_dataset_count = None
        self._sample_id = None
        self._sample_name = None
        self._project_name = None
        self._external_sample_id = None
        self._external_project_id = None
        self._external_analysis_run_id = None
        self._analysis_datasets = None
        self.discriminator = None

        if skip_copy_files_to_project_volume is not None:
            self.skip_copy_files_to_project_volume = skip_copy_files_to_project_volume
        if total_sample_count is not None:
            self.total_sample_count = total_sample_count
        if total_dataset_count is not None:
            self.total_dataset_count = total_dataset_count
        if sample_id is not None:
            self.sample_id = sample_id
        if sample_name is not None:
            self.sample_name = sample_name
        if project_name is not None:
            self.project_name = project_name
        if external_sample_id is not None:
            self.external_sample_id = external_sample_id
        if external_project_id is not None:
            self.external_project_id = external_project_id
        if external_analysis_run_id is not None:
            self.external_analysis_run_id = external_analysis_run_id
        if analysis_datasets is not None:
            self.analysis_datasets = analysis_datasets

    @property
    def skip_copy_files_to_project_volume(self):
        """Gets the skip_copy_files_to_project_volume of this RegisterSampleDataRequest.  # noqa: E501

        Optional. If true, skip copying files to the project volume if the ProjectName matches a known project context  # noqa: E501

        :return: The skip_copy_files_to_project_volume of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_copy_files_to_project_volume

    @skip_copy_files_to_project_volume.setter
    def skip_copy_files_to_project_volume(self, skip_copy_files_to_project_volume):
        """Sets the skip_copy_files_to_project_volume of this RegisterSampleDataRequest.

        Optional. If true, skip copying files to the project volume if the ProjectName matches a known project context  # noqa: E501

        :param skip_copy_files_to_project_volume: The skip_copy_files_to_project_volume of this RegisterSampleDataRequest.  # noqa: E501
        :type: bool
        """

        self._skip_copy_files_to_project_volume = skip_copy_files_to_project_volume

    @property
    def total_sample_count(self):
        """Gets the total_sample_count of this RegisterSampleDataRequest.  # noqa: E501

        Total number of samples that are being registered as part of the same ExternalAnalysisRunId  # noqa: E501

        :return: The total_sample_count of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: int
        """
        return self._total_sample_count

    @total_sample_count.setter
    def total_sample_count(self, total_sample_count):
        """Sets the total_sample_count of this RegisterSampleDataRequest.

        Total number of samples that are being registered as part of the same ExternalAnalysisRunId  # noqa: E501

        :param total_sample_count: The total_sample_count of this RegisterSampleDataRequest.  # noqa: E501
        :type: int
        """

        self._total_sample_count = total_sample_count

    @property
    def total_dataset_count(self):
        """Gets the total_dataset_count of this RegisterSampleDataRequest.  # noqa: E501

        Total number of datasets that are being registered as part of the same ExternalAnalysisRunId  # noqa: E501

        :return: The total_dataset_count of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: int
        """
        return self._total_dataset_count

    @total_dataset_count.setter
    def total_dataset_count(self, total_dataset_count):
        """Sets the total_dataset_count of this RegisterSampleDataRequest.

        Total number of datasets that are being registered as part of the same ExternalAnalysisRunId  # noqa: E501

        :param total_dataset_count: The total_dataset_count of this RegisterSampleDataRequest.  # noqa: E501
        :type: int
        """

        self._total_dataset_count = total_dataset_count

    @property
    def sample_id(self):
        """Gets the sample_id of this RegisterSampleDataRequest.  # noqa: E501

        Optional Sample Id of the sample (if name based matching is not being used)  # noqa: E501

        :return: The sample_id of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this RegisterSampleDataRequest.

        Optional Sample Id of the sample (if name based matching is not being used)  # noqa: E501

        :param sample_id: The sample_id of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sample_id is not None and len(sample_id) > 50):
            raise ValueError("Invalid value for `sample_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sample_id is not None and len(sample_id) < 0):
            raise ValueError("Invalid value for `sample_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._sample_id = sample_id

    @property
    def sample_name(self):
        """Gets the sample_name of this RegisterSampleDataRequest.  # noqa: E501

        Optional name of the sample (when identifying sample by Name+ProjectName)  # noqa: E501

        :return: The sample_name of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this RegisterSampleDataRequest.

        Optional name of the sample (when identifying sample by Name+ProjectName)  # noqa: E501

        :param sample_name: The sample_name of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sample_name is not None and len(sample_name) > 100):
            raise ValueError("Invalid value for `sample_name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sample_name is not None and len(sample_name) < 0):
            raise ValueError("Invalid value for `sample_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._sample_name = sample_name

    @property
    def project_name(self):
        """Gets the project_name of this RegisterSampleDataRequest.  # noqa: E501

        ProjectName of the sample (when identifying sample by Name+ProjectName)  # noqa: E501

        :return: The project_name of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this RegisterSampleDataRequest.

        ProjectName of the sample (when identifying sample by Name+ProjectName)  # noqa: E501

        :param project_name: The project_name of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                project_name is not None and len(project_name) > 255):
            raise ValueError("Invalid value for `project_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                project_name is not None and len(project_name) < 0):
            raise ValueError("Invalid value for `project_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._project_name = project_name

    @property
    def external_sample_id(self):
        """Gets the external_sample_id of this RegisterSampleDataRequest.  # noqa: E501

        Optional external ID to associate with the sample (only when a new sample is being created)  # noqa: E501

        :return: The external_sample_id of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_sample_id

    @external_sample_id.setter
    def external_sample_id(self, external_sample_id):
        """Sets the external_sample_id of this RegisterSampleDataRequest.

        Optional external ID to associate with the sample (only when a new sample is being created)  # noqa: E501

        :param external_sample_id: The external_sample_id of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_sample_id is not None and len(external_sample_id) > 255):
            raise ValueError("Invalid value for `external_sample_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_sample_id is not None and len(external_sample_id) < 0):
            raise ValueError("Invalid value for `external_sample_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_sample_id = external_sample_id

    @property
    def external_project_id(self):
        """Gets the external_project_id of this RegisterSampleDataRequest.  # noqa: E501

        Optional external ID for the project associated with the sample (only when a new sample is being created)  # noqa: E501

        :return: The external_project_id of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_project_id

    @external_project_id.setter
    def external_project_id(self, external_project_id):
        """Sets the external_project_id of this RegisterSampleDataRequest.

        Optional external ID for the project associated with the sample (only when a new sample is being created)  # noqa: E501

        :param external_project_id: The external_project_id of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_project_id is not None and len(external_project_id) > 255):
            raise ValueError("Invalid value for `external_project_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_project_id is not None and len(external_project_id) < 0):
            raise ValueError("Invalid value for `external_project_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_project_id = external_project_id

    @property
    def external_analysis_run_id(self):
        """Gets the external_analysis_run_id of this RegisterSampleDataRequest.  # noqa: E501

        Optional external Id for the analysis run  # noqa: E501

        :return: The external_analysis_run_id of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_analysis_run_id

    @external_analysis_run_id.setter
    def external_analysis_run_id(self, external_analysis_run_id):
        """Sets the external_analysis_run_id of this RegisterSampleDataRequest.

        Optional external Id for the analysis run  # noqa: E501

        :param external_analysis_run_id: The external_analysis_run_id of this RegisterSampleDataRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_analysis_run_id is not None and len(external_analysis_run_id) > 255):
            raise ValueError("Invalid value for `external_analysis_run_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                external_analysis_run_id is not None and len(external_analysis_run_id) < 0):
            raise ValueError("Invalid value for `external_analysis_run_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_analysis_run_id = external_analysis_run_id

    @property
    def analysis_datasets(self):
        """Gets the analysis_datasets of this RegisterSampleDataRequest.  # noqa: E501

        One or more analysis datasets that should be associated with the analysis  # noqa: E501

        :return: The analysis_datasets of this RegisterSampleDataRequest.  # noqa: E501
        :rtype: list[CreateAnalysisDatasetParameters]
        """
        return self._analysis_datasets

    @analysis_datasets.setter
    def analysis_datasets(self, analysis_datasets):
        """Sets the analysis_datasets of this RegisterSampleDataRequest.

        One or more analysis datasets that should be associated with the analysis  # noqa: E501

        :param analysis_datasets: The analysis_datasets of this RegisterSampleDataRequest.  # noqa: E501
        :type: list[CreateAnalysisDatasetParameters]
        """

        self._analysis_datasets = analysis_datasets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterSampleDataRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterSampleDataRequest):
            return True

        return self.to_dict() != other.to_dict()
