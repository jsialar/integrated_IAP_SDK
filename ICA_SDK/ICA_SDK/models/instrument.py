# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class Instrument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'serial_number': 'str',
        'control_software_version': 'str',
        'operating_software_version': 'str',
        'instrument_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'serial_number': 'serialNumber',
        'control_software_version': 'controlSoftwareVersion',
        'operating_software_version': 'operatingSoftwareVersion',
        'instrument_type': 'instrumentType'
    }

    def __init__(self, id=None, name=None, description=None, serial_number=None, control_software_version=None, operating_software_version=None, instrument_type=None, local_vars_configuration=None):  # noqa: E501
        """Instrument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._serial_number = None
        self._control_software_version = None
        self._operating_software_version = None
        self._instrument_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if serial_number is not None:
            self.serial_number = serial_number
        if control_software_version is not None:
            self.control_software_version = control_software_version
        if operating_software_version is not None:
            self.operating_software_version = operating_software_version
        if instrument_type is not None:
            self.instrument_type = instrument_type

    @property
    def id(self):
        """Gets the id of this Instrument.  # noqa: E501

        Unique identifier for the instrument  # noqa: E501

        :return: The id of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instrument.

        Unique identifier for the instrument  # noqa: E501

        :param id: The id of this Instrument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Instrument.  # noqa: E501

        Name of the instrument  # noqa: E501

        :return: The name of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instrument.

        Name of the instrument  # noqa: E501

        :param name: The name of this Instrument.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Instrument.  # noqa: E501

        Description of the instrument  # noqa: E501

        :return: The description of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instrument.

        Description of the instrument  # noqa: E501

        :param description: The description of this Instrument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def serial_number(self):
        """Gets the serial_number of this Instrument.  # noqa: E501

        Serial number of the instrument (this property can act as unique identifier in the system)  # noqa: E501

        :return: The serial_number of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Instrument.

        Serial number of the instrument (this property can act as unique identifier in the system)  # noqa: E501

        :param serial_number: The serial_number of this Instrument.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def control_software_version(self):
        """Gets the control_software_version of this Instrument.  # noqa: E501

        Research use only (RUO) instrument control software version (set when instrument type is a RUO instrument)  # noqa: E501

        :return: The control_software_version of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._control_software_version

    @control_software_version.setter
    def control_software_version(self, control_software_version):
        """Sets the control_software_version of this Instrument.

        Research use only (RUO) instrument control software version (set when instrument type is a RUO instrument)  # noqa: E501

        :param control_software_version: The control_software_version of this Instrument.  # noqa: E501
        :type: str
        """

        self._control_software_version = control_software_version

    @property
    def operating_software_version(self):
        """Gets the operating_software_version of this Instrument.  # noqa: E501

        Diagnostic (DX) instrument operating software version (set when instrument type is a DX instrument)  # noqa: E501

        :return: The operating_software_version of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._operating_software_version

    @operating_software_version.setter
    def operating_software_version(self, operating_software_version):
        """Sets the operating_software_version of this Instrument.

        Diagnostic (DX) instrument operating software version (set when instrument type is a DX instrument)  # noqa: E501

        :param operating_software_version: The operating_software_version of this Instrument.  # noqa: E501
        :type: str
        """

        self._operating_software_version = operating_software_version

    @property
    def instrument_type(self):
        """Gets the instrument_type of this Instrument.  # noqa: E501

        Instrument type  # noqa: E501

        :return: The instrument_type of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this Instrument.

        Instrument type  # noqa: E501

        :param instrument_type: The instrument_type of this Instrument.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instrument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instrument):
            return True

        return self.to_dict() != other.to_dict()
