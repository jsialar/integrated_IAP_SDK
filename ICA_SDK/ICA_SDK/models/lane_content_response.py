# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class LaneContentResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lane_number': 'int',
        'library_pool': 'LibraryPoolCompact',
        'library_pool_name': 'str',
        'library_pool_urn': 'str',
        'lane_libraries': 'list[LaneLibraryResponse]'
    }

    attribute_map = {
        'lane_number': 'laneNumber',
        'library_pool': 'libraryPool',
        'library_pool_name': 'libraryPoolName',
        'library_pool_urn': 'libraryPoolUrn',
        'lane_libraries': 'laneLibraries'
    }

    def __init__(self, lane_number=None, library_pool=None, library_pool_name=None, library_pool_urn=None, lane_libraries=None, local_vars_configuration=None):  # noqa: E501
        """LaneContentResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lane_number = None
        self._library_pool = None
        self._library_pool_name = None
        self._library_pool_urn = None
        self._lane_libraries = None
        self.discriminator = None

        if lane_number is not None:
            self.lane_number = lane_number
        if library_pool is not None:
            self.library_pool = library_pool
        if library_pool_name is not None:
            self.library_pool_name = library_pool_name
        if library_pool_urn is not None:
            self.library_pool_urn = library_pool_urn
        if lane_libraries is not None:
            self.lane_libraries = lane_libraries

    @property
    def lane_number(self):
        """Gets the lane_number of this LaneContentResponse.  # noqa: E501

        Number of the lane  # noqa: E501

        :return: The lane_number of this LaneContentResponse.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this LaneContentResponse.

        Number of the lane  # noqa: E501

        :param lane_number: The lane_number of this LaneContentResponse.  # noqa: E501
        :type: int
        """

        self._lane_number = lane_number

    @property
    def library_pool(self):
        """Gets the library_pool of this LaneContentResponse.  # noqa: E501


        :return: The library_pool of this LaneContentResponse.  # noqa: E501
        :rtype: LibraryPoolCompact
        """
        return self._library_pool

    @library_pool.setter
    def library_pool(self, library_pool):
        """Sets the library_pool of this LaneContentResponse.


        :param library_pool: The library_pool of this LaneContentResponse.  # noqa: E501
        :type: LibraryPoolCompact
        """

        self._library_pool = library_pool

    @property
    def library_pool_name(self):
        """Gets the library_pool_name of this LaneContentResponse.  # noqa: E501

        Name of library pool the lane contains  # noqa: E501

        :return: The library_pool_name of this LaneContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._library_pool_name

    @library_pool_name.setter
    def library_pool_name(self, library_pool_name):
        """Sets the library_pool_name of this LaneContentResponse.

        Name of library pool the lane contains  # noqa: E501

        :param library_pool_name: The library_pool_name of this LaneContentResponse.  # noqa: E501
        :type: str
        """

        self._library_pool_name = library_pool_name

    @property
    def library_pool_urn(self):
        """Gets the library_pool_urn of this LaneContentResponse.  # noqa: E501

        URN of library pool the lane contains  # noqa: E501

        :return: The library_pool_urn of this LaneContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._library_pool_urn

    @library_pool_urn.setter
    def library_pool_urn(self, library_pool_urn):
        """Sets the library_pool_urn of this LaneContentResponse.

        URN of library pool the lane contains  # noqa: E501

        :param library_pool_urn: The library_pool_urn of this LaneContentResponse.  # noqa: E501
        :type: str
        """

        self._library_pool_urn = library_pool_urn

    @property
    def lane_libraries(self):
        """Gets the lane_libraries of this LaneContentResponse.  # noqa: E501

        Libraries and related information the lane contains  # noqa: E501

        :return: The lane_libraries of this LaneContentResponse.  # noqa: E501
        :rtype: list[LaneLibraryResponse]
        """
        return self._lane_libraries

    @lane_libraries.setter
    def lane_libraries(self, lane_libraries):
        """Sets the lane_libraries of this LaneContentResponse.

        Libraries and related information the lane contains  # noqa: E501

        :param lane_libraries: The lane_libraries of this LaneContentResponse.  # noqa: E501
        :type: list[LaneLibraryResponse]
        """

        self._lane_libraries = lane_libraries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaneContentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaneContentResponse):
            return True

        return self.to_dict() != other.to_dict()
