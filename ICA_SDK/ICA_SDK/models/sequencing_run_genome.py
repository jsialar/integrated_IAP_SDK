# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class SequencingRunGenome(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'is_illumina': 'bool',
        'name': 'str',
        'species': 'str',
        'source': 'str',
        'build': 'str',
        'dragen_version': 'str',
        'genome_format': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_illumina': 'isIllumina',
        'name': 'name',
        'species': 'species',
        'source': 'source',
        'build': 'build',
        'dragen_version': 'dragenVersion',
        'genome_format': 'genomeFormat'
    }

    def __init__(self, id=None, is_illumina=None, name=None, species=None, source=None, build=None, dragen_version=None, genome_format=None, local_vars_configuration=None):  # noqa: E501
        """SequencingRunGenome - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._is_illumina = None
        self._name = None
        self._species = None
        self._source = None
        self._build = None
        self._dragen_version = None
        self._genome_format = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_illumina is not None:
            self.is_illumina = is_illumina
        if name is not None:
            self.name = name
        if species is not None:
            self.species = species
        if source is not None:
            self.source = source
        if build is not None:
            self.build = build
        if dragen_version is not None:
            self.dragen_version = dragen_version
        if genome_format is not None:
            self.genome_format = genome_format

    @property
    def id(self):
        """Gets the id of this SequencingRunGenome.  # noqa: E501

        Id of the genome  # noqa: E501

        :return: The id of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SequencingRunGenome.

        Id of the genome  # noqa: E501

        :param id: The id of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_illumina(self):
        """Gets the is_illumina of this SequencingRunGenome.  # noqa: E501

        Whether the genome is belonging to Illumina  # noqa: E501

        :return: The is_illumina of this SequencingRunGenome.  # noqa: E501
        :rtype: bool
        """
        return self._is_illumina

    @is_illumina.setter
    def is_illumina(self, is_illumina):
        """Sets the is_illumina of this SequencingRunGenome.

        Whether the genome is belonging to Illumina  # noqa: E501

        :param is_illumina: The is_illumina of this SequencingRunGenome.  # noqa: E501
        :type: bool
        """

        self._is_illumina = is_illumina

    @property
    def name(self):
        """Gets the name of this SequencingRunGenome.  # noqa: E501

        Name of the genome  # noqa: E501

        :return: The name of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SequencingRunGenome.

        Name of the genome  # noqa: E501

        :param name: The name of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def species(self):
        """Gets the species of this SequencingRunGenome.  # noqa: E501

        Species of the genome  # noqa: E501

        :return: The species of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this SequencingRunGenome.

        Species of the genome  # noqa: E501

        :param species: The species of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def source(self):
        """Gets the source of this SequencingRunGenome.  # noqa: E501

        Source of the genome  # noqa: E501

        :return: The source of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SequencingRunGenome.

        Source of the genome  # noqa: E501

        :param source: The source of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def build(self):
        """Gets the build of this SequencingRunGenome.  # noqa: E501

        Build of the genome  # noqa: E501

        :return: The build of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SequencingRunGenome.

        Build of the genome  # noqa: E501

        :param build: The build of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def dragen_version(self):
        """Gets the dragen_version of this SequencingRunGenome.  # noqa: E501

        Dragen version for the genome  # noqa: E501

        :return: The dragen_version of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._dragen_version

    @dragen_version.setter
    def dragen_version(self, dragen_version):
        """Sets the dragen_version of this SequencingRunGenome.

        Dragen version for the genome  # noqa: E501

        :param dragen_version: The dragen_version of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._dragen_version = dragen_version

    @property
    def genome_format(self):
        """Gets the genome_format of this SequencingRunGenome.  # noqa: E501

        Format for the genome file  # noqa: E501

        :return: The genome_format of this SequencingRunGenome.  # noqa: E501
        :rtype: str
        """
        return self._genome_format

    @genome_format.setter
    def genome_format(self, genome_format):
        """Sets the genome_format of this SequencingRunGenome.

        Format for the genome file  # noqa: E501

        :param genome_format: The genome_format of this SequencingRunGenome.  # noqa: E501
        :type: str
        """

        self._genome_format = genome_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequencingRunGenome):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequencingRunGenome):
            return True

        return self.to_dict() != other.to_dict()
