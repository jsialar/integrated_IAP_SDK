# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateLibraryPrepKitRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'organization': 'str',
        'description': 'str',
        'allowed_read_types': 'list[str]',
        'default_read1_length': 'int',
        'default_read2_length': 'int',
        'settings': 'LibraryPrepKitSettings',
        'checksum': 'str',
        'is_application_specific': 'bool',
        'index_adapter_kit_ids': 'list[str]',
        'force': 'bool',
        'acl': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'organization': 'organization',
        'description': 'description',
        'allowed_read_types': 'allowedReadTypes',
        'default_read1_length': 'defaultRead1Length',
        'default_read2_length': 'defaultRead2Length',
        'settings': 'settings',
        'checksum': 'checksum',
        'is_application_specific': 'isApplicationSpecific',
        'index_adapter_kit_ids': 'indexAdapterKitIds',
        'force': 'force',
        'acl': 'acl'
    }

    def __init__(self, name=None, display_name=None, organization=None, description=None, allowed_read_types=None, default_read1_length=None, default_read2_length=None, settings=None, checksum=None, is_application_specific=None, index_adapter_kit_ids=None, force=None, acl=None, local_vars_configuration=None):  # noqa: E501
        """UpdateLibraryPrepKitRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._organization = None
        self._description = None
        self._allowed_read_types = None
        self._default_read1_length = None
        self._default_read2_length = None
        self._settings = None
        self._checksum = None
        self._is_application_specific = None
        self._index_adapter_kit_ids = None
        self._force = None
        self._acl = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if organization is not None:
            self.organization = organization
        if description is not None:
            self.description = description
        if allowed_read_types is not None:
            self.allowed_read_types = allowed_read_types
        if default_read1_length is not None:
            self.default_read1_length = default_read1_length
        if default_read2_length is not None:
            self.default_read2_length = default_read2_length
        if settings is not None:
            self.settings = settings
        if checksum is not None:
            self.checksum = checksum
        if is_application_specific is not None:
            self.is_application_specific = is_application_specific
        if index_adapter_kit_ids is not None:
            self.index_adapter_kit_ids = index_adapter_kit_ids
        if force is not None:
            self.force = force
        if acl is not None:
            self.acl = acl

    @property
    def name(self):
        """Gets the name of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Name of the library prep kit  # noqa: E501

        :return: The name of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateLibraryPrepKitRequest.

        Name of the library prep kit  # noqa: E501

        :param name: The name of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this UpdateLibraryPrepKitRequest.  # noqa: E501

        User-friendly name of the library prep kit  # noqa: E501

        :return: The display_name of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateLibraryPrepKitRequest.

        User-friendly name of the library prep kit  # noqa: E501

        :param display_name: The display_name of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 255):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def organization(self):
        """Gets the organization of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Organization from where the library prep kit originated (e.g. Illumina)  # noqa: E501

        :return: The organization of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UpdateLibraryPrepKitRequest.

        Organization from where the library prep kit originated (e.g. Illumina)  # noqa: E501

        :param organization: The organization of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) > 255):
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) < 0):
            raise ValueError("Invalid value for `organization`, length must be greater than or equal to `0`")  # noqa: E501

        self._organization = organization

    @property
    def description(self):
        """Gets the description of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Description of the library prep kit  # noqa: E501

        :return: The description of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateLibraryPrepKitRequest.

        Description of the library prep kit  # noqa: E501

        :param description: The description of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def allowed_read_types(self):
        """Gets the allowed_read_types of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Reads types allowed for the library prep kit  # noqa: E501

        :return: The allowed_read_types of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_read_types

    @allowed_read_types.setter
    def allowed_read_types(self, allowed_read_types):
        """Sets the allowed_read_types of this UpdateLibraryPrepKitRequest.

        Reads types allowed for the library prep kit  # noqa: E501

        :param allowed_read_types: The allowed_read_types of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Single", "Paired"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(allowed_read_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allowed_read_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_read_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_read_types = allowed_read_types

    @property
    def default_read1_length(self):
        """Gets the default_read1_length of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Default read 1 length  # noqa: E501

        :return: The default_read1_length of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: int
        """
        return self._default_read1_length

    @default_read1_length.setter
    def default_read1_length(self, default_read1_length):
        """Sets the default_read1_length of this UpdateLibraryPrepKitRequest.

        Default read 1 length  # noqa: E501

        :param default_read1_length: The default_read1_length of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                default_read1_length is not None and default_read1_length > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `default_read1_length`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                default_read1_length is not None and default_read1_length < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_read1_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_read1_length = default_read1_length

    @property
    def default_read2_length(self):
        """Gets the default_read2_length of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Default read 2 length  # noqa: E501

        :return: The default_read2_length of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: int
        """
        return self._default_read2_length

    @default_read2_length.setter
    def default_read2_length(self, default_read2_length):
        """Sets the default_read2_length of this UpdateLibraryPrepKitRequest.

        Default read 2 length  # noqa: E501

        :param default_read2_length: The default_read2_length of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                default_read2_length is not None and default_read2_length > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `default_read2_length`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                default_read2_length is not None and default_read2_length < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_read2_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_read2_length = default_read2_length

    @property
    def settings(self):
        """Gets the settings of this UpdateLibraryPrepKitRequest.  # noqa: E501


        :return: The settings of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: LibraryPrepKitSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdateLibraryPrepKitRequest.


        :param settings: The settings of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: LibraryPrepKitSettings
        """

        self._settings = settings

    @property
    def checksum(self):
        """Gets the checksum of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Checksum of LibraryPrepKit  # noqa: E501

        :return: The checksum of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this UpdateLibraryPrepKitRequest.

        Checksum of LibraryPrepKit  # noqa: E501

        :param checksum: The checksum of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 0):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `0`")  # noqa: E501

        self._checksum = checksum

    @property
    def is_application_specific(self):
        """Gets the is_application_specific of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Whether the library prep kit is application specific  # noqa: E501

        :return: The is_application_specific of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_application_specific

    @is_application_specific.setter
    def is_application_specific(self, is_application_specific):
        """Sets the is_application_specific of this UpdateLibraryPrepKitRequest.

        Whether the library prep kit is application specific  # noqa: E501

        :param is_application_specific: The is_application_specific of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: bool
        """

        self._is_application_specific = is_application_specific

    @property
    def index_adapter_kit_ids(self):
        """Gets the index_adapter_kit_ids of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Array of index adapter kit IDs that are compatible with the library prep kit  # noqa: E501

        :return: The index_adapter_kit_ids of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._index_adapter_kit_ids

    @index_adapter_kit_ids.setter
    def index_adapter_kit_ids(self, index_adapter_kit_ids):
        """Sets the index_adapter_kit_ids of this UpdateLibraryPrepKitRequest.

        Array of index adapter kit IDs that are compatible with the library prep kit  # noqa: E501

        :param index_adapter_kit_ids: The index_adapter_kit_ids of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: list[str]
        """

        self._index_adapter_kit_ids = index_adapter_kit_ids

    @property
    def force(self):
        """Gets the force of this UpdateLibraryPrepKitRequest.  # noqa: E501

        Set to true to force update even when the kit is in use  # noqa: E501

        :return: The force of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UpdateLibraryPrepKitRequest.

        Set to true to force update even when the kit is in use  # noqa: E501

        :param force: The force of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def acl(self):
        """Gets the acl of this UpdateLibraryPrepKitRequest.  # noqa: E501


        :return: The acl of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this UpdateLibraryPrepKitRequest.


        :param acl: The acl of this UpdateLibraryPrepKitRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateLibraryPrepKitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateLibraryPrepKitRequest):
            return True

        return self.to_dict() != other.to_dict()
