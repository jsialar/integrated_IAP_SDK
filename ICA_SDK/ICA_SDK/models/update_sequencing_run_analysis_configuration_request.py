# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateSequencingRunAnalysisConfigurationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'analysis_version_definition_id': 'str',
        'settings': 'object',
        'sample_settings': 'list[SampleSettingEntry]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'analysis_version_definition_id': 'analysisVersionDefinitionId',
        'settings': 'settings',
        'sample_settings': 'sampleSettings'
    }

    def __init__(self, name=None, description=None, analysis_version_definition_id=None, settings=None, sample_settings=None, local_vars_configuration=None):  # noqa: E501
        """UpdateSequencingRunAnalysisConfigurationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._analysis_version_definition_id = None
        self._settings = None
        self._sample_settings = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if analysis_version_definition_id is not None:
            self.analysis_version_definition_id = analysis_version_definition_id
        if settings is not None:
            self.settings = settings
        if sample_settings is not None:
            self.sample_settings = sample_settings

    @property
    def name(self):
        """Gets the name of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501

        Name of the analysis configuration  # noqa: E501

        :return: The name of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSequencingRunAnalysisConfigurationRequest.

        Name of the analysis configuration  # noqa: E501

        :param name: The name of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501

        Description of the analysis configuration  # noqa: E501

        :return: The description of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSequencingRunAnalysisConfigurationRequest.

        Description of the analysis configuration  # noqa: E501

        :param description: The description of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def analysis_version_definition_id(self):
        """Gets the analysis_version_definition_id of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501

        The ID of the analysis version definition on which this analysis configuration is based  # noqa: E501

        :return: The analysis_version_definition_id of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._analysis_version_definition_id

    @analysis_version_definition_id.setter
    def analysis_version_definition_id(self, analysis_version_definition_id):
        """Sets the analysis_version_definition_id of this UpdateSequencingRunAnalysisConfigurationRequest.

        The ID of the analysis version definition on which this analysis configuration is based  # noqa: E501

        :param analysis_version_definition_id: The analysis_version_definition_id of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                analysis_version_definition_id is not None and len(analysis_version_definition_id) > 8192):
            raise ValueError("Invalid value for `analysis_version_definition_id`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                analysis_version_definition_id is not None and len(analysis_version_definition_id) < 0):
            raise ValueError("Invalid value for `analysis_version_definition_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._analysis_version_definition_id = analysis_version_definition_id

    @property
    def settings(self):
        """Gets the settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501

        User-provided analysis-level settings for this analysis configuration (validated against the analysis version definition)  # noqa: E501

        :return: The settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdateSequencingRunAnalysisConfigurationRequest.

        User-provided analysis-level settings for this analysis configuration (validated against the analysis version definition)  # noqa: E501

        :param settings: The settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :type: object
        """

        self._settings = settings

    @property
    def sample_settings(self):
        """Gets the sample_settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501

        User provided per-sample settings for this analysis configuration  These must follow the schema described in the analysis version definition  # noqa: E501

        :return: The sample_settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :rtype: list[SampleSettingEntry]
        """
        return self._sample_settings

    @sample_settings.setter
    def sample_settings(self, sample_settings):
        """Sets the sample_settings of this UpdateSequencingRunAnalysisConfigurationRequest.

        User provided per-sample settings for this analysis configuration  These must follow the schema described in the analysis version definition  # noqa: E501

        :param sample_settings: The sample_settings of this UpdateSequencingRunAnalysisConfigurationRequest.  # noqa: E501
        :type: list[SampleSettingEntry]
        """

        self._sample_settings = sample_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSequencingRunAnalysisConfigurationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSequencingRunAnalysisConfigurationRequest):
            return True

        return self.to_dict() != other.to_dict()
