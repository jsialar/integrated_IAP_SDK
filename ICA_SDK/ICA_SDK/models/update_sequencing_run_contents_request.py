# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateSequencingRunContentsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_index_updates': 'bool',
        'lane_contents': 'list[LaneContent]'
    }

    attribute_map = {
        'allow_index_updates': 'allowIndexUpdates',
        'lane_contents': 'laneContents'
    }

    def __init__(self, allow_index_updates=None, lane_contents=None, local_vars_configuration=None):  # noqa: E501
        """UpdateSequencingRunContentsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_index_updates = None
        self._lane_contents = None
        self.discriminator = None

        if allow_index_updates is not None:
            self.allow_index_updates = allow_index_updates
        self.lane_contents = lane_contents

    @property
    def allow_index_updates(self):
        """Gets the allow_index_updates of this UpdateSequencingRunContentsRequest.  # noqa: E501

        Indicates whether updating indexes is allowed  # noqa: E501

        :return: The allow_index_updates of this UpdateSequencingRunContentsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_index_updates

    @allow_index_updates.setter
    def allow_index_updates(self, allow_index_updates):
        """Sets the allow_index_updates of this UpdateSequencingRunContentsRequest.

        Indicates whether updating indexes is allowed  # noqa: E501

        :param allow_index_updates: The allow_index_updates of this UpdateSequencingRunContentsRequest.  # noqa: E501
        :type: bool
        """

        self._allow_index_updates = allow_index_updates

    @property
    def lane_contents(self):
        """Gets the lane_contents of this UpdateSequencingRunContentsRequest.  # noqa: E501

        Collection of lane contents  # noqa: E501

        :return: The lane_contents of this UpdateSequencingRunContentsRequest.  # noqa: E501
        :rtype: list[LaneContent]
        """
        return self._lane_contents

    @lane_contents.setter
    def lane_contents(self, lane_contents):
        """Sets the lane_contents of this UpdateSequencingRunContentsRequest.

        Collection of lane contents  # noqa: E501

        :param lane_contents: The lane_contents of this UpdateSequencingRunContentsRequest.  # noqa: E501
        :type: list[LaneContent]
        """
        if self.local_vars_configuration.client_side_validation and lane_contents is None:  # noqa: E501
            raise ValueError("Invalid value for `lane_contents`, must not be `None`")  # noqa: E501

        self._lane_contents = lane_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSequencingRunContentsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSequencingRunContentsRequest):
            return True

        return self.to_dict() != other.to_dict()
