# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RunSequencingStatsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_rate': 'float',
        'error_rate_r1': 'float',
        'error_rate_r2': 'float',
        'intensity_cycle1': 'float',
        'is_indexed': 'bool',
        'max_cycle_called': 'int',
        'max_cycle_extracted': 'int',
        'max_cycle_scored': 'int',
        'min_cycle_called': 'int',
        'min_cycle_extracted': 'int',
        'min_cycle_scored': 'int',
        'non_indexed_error_rate': 'float',
        'non_indexed_intensity_cycle1': 'float',
        'non_indexed_percent_aligned': 'float',
        'non_indexed_percent_gt_q30': 'float',
        'non_indexed_projected_total_yield': 'float',
        'non_indexed_yield_total': 'float',
        'num_cycles_index1': 'int',
        'num_cycles_index2': 'int',
        'num_cycles_read1': 'int',
        'num_cycles_read2': 'int',
        'num_lanes': 'int',
        'num_reads': 'int',
        'num_surfaces': 'int',
        'num_swaths_per_lane': 'int',
        'num_tiles_per_swath': 'int',
        'percent_aligned': 'float',
        'percent_gt_q30': 'float',
        'percent_gt_q30_last10_cycles': 'float',
        'percent_gt_q30_r1': 'float',
        'percent_gt_q30_r2': 'float',
        'percent_pf': 'float',
        'percent_resynthesis': 'float',
        'phasing_r1': 'float',
        'phasing_r2': 'float',
        'pre_phasing_r1': 'float',
        'pre_phasing_r2': 'float',
        'projected_total_yield': 'float',
        'reads_pf_total': 'int',
        'reads_total': 'int',
        'yield_total': 'float',
        'clusters': 'int',
        'clusters_pf': 'int',
        'cluster_density': 'float',
        'occupancy': 'float',
        'percent_loading_concentration': 'float'
    }

    attribute_map = {
        'error_rate': 'errorRate',
        'error_rate_r1': 'errorRateR1',
        'error_rate_r2': 'errorRateR2',
        'intensity_cycle1': 'intensityCycle1',
        'is_indexed': 'isIndexed',
        'max_cycle_called': 'maxCycleCalled',
        'max_cycle_extracted': 'maxCycleExtracted',
        'max_cycle_scored': 'maxCycleScored',
        'min_cycle_called': 'minCycleCalled',
        'min_cycle_extracted': 'minCycleExtracted',
        'min_cycle_scored': 'minCycleScored',
        'non_indexed_error_rate': 'nonIndexedErrorRate',
        'non_indexed_intensity_cycle1': 'nonIndexedIntensityCycle1',
        'non_indexed_percent_aligned': 'nonIndexedPercentAligned',
        'non_indexed_percent_gt_q30': 'nonIndexedPercentGtQ30',
        'non_indexed_projected_total_yield': 'nonIndexedProjectedTotalYield',
        'non_indexed_yield_total': 'nonIndexedYieldTotal',
        'num_cycles_index1': 'numCyclesIndex1',
        'num_cycles_index2': 'numCyclesIndex2',
        'num_cycles_read1': 'numCyclesRead1',
        'num_cycles_read2': 'numCyclesRead2',
        'num_lanes': 'numLanes',
        'num_reads': 'numReads',
        'num_surfaces': 'numSurfaces',
        'num_swaths_per_lane': 'numSwathsPerLane',
        'num_tiles_per_swath': 'numTilesPerSwath',
        'percent_aligned': 'percentAligned',
        'percent_gt_q30': 'percentGtQ30',
        'percent_gt_q30_last10_cycles': 'percentGtQ30Last10Cycles',
        'percent_gt_q30_r1': 'percentGtQ30R1',
        'percent_gt_q30_r2': 'percentGtQ30R2',
        'percent_pf': 'percentPf',
        'percent_resynthesis': 'percentResynthesis',
        'phasing_r1': 'phasingR1',
        'phasing_r2': 'phasingR2',
        'pre_phasing_r1': 'prePhasingR1',
        'pre_phasing_r2': 'prePhasingR2',
        'projected_total_yield': 'projectedTotalYield',
        'reads_pf_total': 'readsPfTotal',
        'reads_total': 'readsTotal',
        'yield_total': 'yieldTotal',
        'clusters': 'clusters',
        'clusters_pf': 'clustersPf',
        'cluster_density': 'clusterDensity',
        'occupancy': 'occupancy',
        'percent_loading_concentration': 'percentLoadingConcentration'
    }

    def __init__(self, error_rate=None, error_rate_r1=None, error_rate_r2=None, intensity_cycle1=None, is_indexed=None, max_cycle_called=None, max_cycle_extracted=None, max_cycle_scored=None, min_cycle_called=None, min_cycle_extracted=None, min_cycle_scored=None, non_indexed_error_rate=None, non_indexed_intensity_cycle1=None, non_indexed_percent_aligned=None, non_indexed_percent_gt_q30=None, non_indexed_projected_total_yield=None, non_indexed_yield_total=None, num_cycles_index1=None, num_cycles_index2=None, num_cycles_read1=None, num_cycles_read2=None, num_lanes=None, num_reads=None, num_surfaces=None, num_swaths_per_lane=None, num_tiles_per_swath=None, percent_aligned=None, percent_gt_q30=None, percent_gt_q30_last10_cycles=None, percent_gt_q30_r1=None, percent_gt_q30_r2=None, percent_pf=None, percent_resynthesis=None, phasing_r1=None, phasing_r2=None, pre_phasing_r1=None, pre_phasing_r2=None, projected_total_yield=None, reads_pf_total=None, reads_total=None, yield_total=None, clusters=None, clusters_pf=None, cluster_density=None, occupancy=None, percent_loading_concentration=None, local_vars_configuration=None):  # noqa: E501
        """RunSequencingStatsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_rate = None
        self._error_rate_r1 = None
        self._error_rate_r2 = None
        self._intensity_cycle1 = None
        self._is_indexed = None
        self._max_cycle_called = None
        self._max_cycle_extracted = None
        self._max_cycle_scored = None
        self._min_cycle_called = None
        self._min_cycle_extracted = None
        self._min_cycle_scored = None
        self._non_indexed_error_rate = None
        self._non_indexed_intensity_cycle1 = None
        self._non_indexed_percent_aligned = None
        self._non_indexed_percent_gt_q30 = None
        self._non_indexed_projected_total_yield = None
        self._non_indexed_yield_total = None
        self._num_cycles_index1 = None
        self._num_cycles_index2 = None
        self._num_cycles_read1 = None
        self._num_cycles_read2 = None
        self._num_lanes = None
        self._num_reads = None
        self._num_surfaces = None
        self._num_swaths_per_lane = None
        self._num_tiles_per_swath = None
        self._percent_aligned = None
        self._percent_gt_q30 = None
        self._percent_gt_q30_last10_cycles = None
        self._percent_gt_q30_r1 = None
        self._percent_gt_q30_r2 = None
        self._percent_pf = None
        self._percent_resynthesis = None
        self._phasing_r1 = None
        self._phasing_r2 = None
        self._pre_phasing_r1 = None
        self._pre_phasing_r2 = None
        self._projected_total_yield = None
        self._reads_pf_total = None
        self._reads_total = None
        self._yield_total = None
        self._clusters = None
        self._clusters_pf = None
        self._cluster_density = None
        self._occupancy = None
        self._percent_loading_concentration = None
        self.discriminator = None

        if error_rate is not None:
            self.error_rate = error_rate
        if error_rate_r1 is not None:
            self.error_rate_r1 = error_rate_r1
        if error_rate_r2 is not None:
            self.error_rate_r2 = error_rate_r2
        if intensity_cycle1 is not None:
            self.intensity_cycle1 = intensity_cycle1
        if is_indexed is not None:
            self.is_indexed = is_indexed
        if max_cycle_called is not None:
            self.max_cycle_called = max_cycle_called
        if max_cycle_extracted is not None:
            self.max_cycle_extracted = max_cycle_extracted
        if max_cycle_scored is not None:
            self.max_cycle_scored = max_cycle_scored
        if min_cycle_called is not None:
            self.min_cycle_called = min_cycle_called
        if min_cycle_extracted is not None:
            self.min_cycle_extracted = min_cycle_extracted
        if min_cycle_scored is not None:
            self.min_cycle_scored = min_cycle_scored
        if non_indexed_error_rate is not None:
            self.non_indexed_error_rate = non_indexed_error_rate
        if non_indexed_intensity_cycle1 is not None:
            self.non_indexed_intensity_cycle1 = non_indexed_intensity_cycle1
        if non_indexed_percent_aligned is not None:
            self.non_indexed_percent_aligned = non_indexed_percent_aligned
        if non_indexed_percent_gt_q30 is not None:
            self.non_indexed_percent_gt_q30 = non_indexed_percent_gt_q30
        if non_indexed_projected_total_yield is not None:
            self.non_indexed_projected_total_yield = non_indexed_projected_total_yield
        if non_indexed_yield_total is not None:
            self.non_indexed_yield_total = non_indexed_yield_total
        if num_cycles_index1 is not None:
            self.num_cycles_index1 = num_cycles_index1
        if num_cycles_index2 is not None:
            self.num_cycles_index2 = num_cycles_index2
        if num_cycles_read1 is not None:
            self.num_cycles_read1 = num_cycles_read1
        if num_cycles_read2 is not None:
            self.num_cycles_read2 = num_cycles_read2
        if num_lanes is not None:
            self.num_lanes = num_lanes
        if num_reads is not None:
            self.num_reads = num_reads
        if num_surfaces is not None:
            self.num_surfaces = num_surfaces
        if num_swaths_per_lane is not None:
            self.num_swaths_per_lane = num_swaths_per_lane
        if num_tiles_per_swath is not None:
            self.num_tiles_per_swath = num_tiles_per_swath
        if percent_aligned is not None:
            self.percent_aligned = percent_aligned
        if percent_gt_q30 is not None:
            self.percent_gt_q30 = percent_gt_q30
        if percent_gt_q30_last10_cycles is not None:
            self.percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles
        if percent_gt_q30_r1 is not None:
            self.percent_gt_q30_r1 = percent_gt_q30_r1
        if percent_gt_q30_r2 is not None:
            self.percent_gt_q30_r2 = percent_gt_q30_r2
        if percent_pf is not None:
            self.percent_pf = percent_pf
        if percent_resynthesis is not None:
            self.percent_resynthesis = percent_resynthesis
        if phasing_r1 is not None:
            self.phasing_r1 = phasing_r1
        if phasing_r2 is not None:
            self.phasing_r2 = phasing_r2
        if pre_phasing_r1 is not None:
            self.pre_phasing_r1 = pre_phasing_r1
        if pre_phasing_r2 is not None:
            self.pre_phasing_r2 = pre_phasing_r2
        if projected_total_yield is not None:
            self.projected_total_yield = projected_total_yield
        if reads_pf_total is not None:
            self.reads_pf_total = reads_pf_total
        if reads_total is not None:
            self.reads_total = reads_total
        if yield_total is not None:
            self.yield_total = yield_total
        if clusters is not None:
            self.clusters = clusters
        if clusters_pf is not None:
            self.clusters_pf = clusters_pf
        if cluster_density is not None:
            self.cluster_density = cluster_density
        if occupancy is not None:
            self.occupancy = occupancy
        if percent_loading_concentration is not None:
            self.percent_loading_concentration = percent_loading_concentration

    @property
    def error_rate(self):
        """Gets the error_rate of this RunSequencingStatsResponse.  # noqa: E501


        :return: The error_rate of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this RunSequencingStatsResponse.


        :param error_rate: The error_rate of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def error_rate_r1(self):
        """Gets the error_rate_r1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The error_rate_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate_r1

    @error_rate_r1.setter
    def error_rate_r1(self, error_rate_r1):
        """Sets the error_rate_r1 of this RunSequencingStatsResponse.


        :param error_rate_r1: The error_rate_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate_r1 = error_rate_r1

    @property
    def error_rate_r2(self):
        """Gets the error_rate_r2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The error_rate_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._error_rate_r2

    @error_rate_r2.setter
    def error_rate_r2(self, error_rate_r2):
        """Sets the error_rate_r2 of this RunSequencingStatsResponse.


        :param error_rate_r2: The error_rate_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._error_rate_r2 = error_rate_r2

    @property
    def intensity_cycle1(self):
        """Gets the intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._intensity_cycle1

    @intensity_cycle1.setter
    def intensity_cycle1(self, intensity_cycle1):
        """Sets the intensity_cycle1 of this RunSequencingStatsResponse.


        :param intensity_cycle1: The intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._intensity_cycle1 = intensity_cycle1

    @property
    def is_indexed(self):
        """Gets the is_indexed of this RunSequencingStatsResponse.  # noqa: E501


        :return: The is_indexed of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_indexed

    @is_indexed.setter
    def is_indexed(self, is_indexed):
        """Sets the is_indexed of this RunSequencingStatsResponse.


        :param is_indexed: The is_indexed of this RunSequencingStatsResponse.  # noqa: E501
        :type: bool
        """

        self._is_indexed = is_indexed

    @property
    def max_cycle_called(self):
        """Gets the max_cycle_called of this RunSequencingStatsResponse.  # noqa: E501


        :return: The max_cycle_called of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_called

    @max_cycle_called.setter
    def max_cycle_called(self, max_cycle_called):
        """Sets the max_cycle_called of this RunSequencingStatsResponse.


        :param max_cycle_called: The max_cycle_called of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._max_cycle_called = max_cycle_called

    @property
    def max_cycle_extracted(self):
        """Gets the max_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501


        :return: The max_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_extracted

    @max_cycle_extracted.setter
    def max_cycle_extracted(self, max_cycle_extracted):
        """Sets the max_cycle_extracted of this RunSequencingStatsResponse.


        :param max_cycle_extracted: The max_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._max_cycle_extracted = max_cycle_extracted

    @property
    def max_cycle_scored(self):
        """Gets the max_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501


        :return: The max_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_cycle_scored

    @max_cycle_scored.setter
    def max_cycle_scored(self, max_cycle_scored):
        """Sets the max_cycle_scored of this RunSequencingStatsResponse.


        :param max_cycle_scored: The max_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._max_cycle_scored = max_cycle_scored

    @property
    def min_cycle_called(self):
        """Gets the min_cycle_called of this RunSequencingStatsResponse.  # noqa: E501


        :return: The min_cycle_called of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._min_cycle_called

    @min_cycle_called.setter
    def min_cycle_called(self, min_cycle_called):
        """Sets the min_cycle_called of this RunSequencingStatsResponse.


        :param min_cycle_called: The min_cycle_called of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._min_cycle_called = min_cycle_called

    @property
    def min_cycle_extracted(self):
        """Gets the min_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501


        :return: The min_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._min_cycle_extracted

    @min_cycle_extracted.setter
    def min_cycle_extracted(self, min_cycle_extracted):
        """Sets the min_cycle_extracted of this RunSequencingStatsResponse.


        :param min_cycle_extracted: The min_cycle_extracted of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._min_cycle_extracted = min_cycle_extracted

    @property
    def min_cycle_scored(self):
        """Gets the min_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501


        :return: The min_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._min_cycle_scored

    @min_cycle_scored.setter
    def min_cycle_scored(self, min_cycle_scored):
        """Sets the min_cycle_scored of this RunSequencingStatsResponse.


        :param min_cycle_scored: The min_cycle_scored of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._min_cycle_scored = min_cycle_scored

    @property
    def non_indexed_error_rate(self):
        """Gets the non_indexed_error_rate of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_error_rate of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_error_rate

    @non_indexed_error_rate.setter
    def non_indexed_error_rate(self, non_indexed_error_rate):
        """Sets the non_indexed_error_rate of this RunSequencingStatsResponse.


        :param non_indexed_error_rate: The non_indexed_error_rate of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_error_rate = non_indexed_error_rate

    @property
    def non_indexed_intensity_cycle1(self):
        """Gets the non_indexed_intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_intensity_cycle1

    @non_indexed_intensity_cycle1.setter
    def non_indexed_intensity_cycle1(self, non_indexed_intensity_cycle1):
        """Sets the non_indexed_intensity_cycle1 of this RunSequencingStatsResponse.


        :param non_indexed_intensity_cycle1: The non_indexed_intensity_cycle1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_intensity_cycle1 = non_indexed_intensity_cycle1

    @property
    def non_indexed_percent_aligned(self):
        """Gets the non_indexed_percent_aligned of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_percent_aligned of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_percent_aligned

    @non_indexed_percent_aligned.setter
    def non_indexed_percent_aligned(self, non_indexed_percent_aligned):
        """Sets the non_indexed_percent_aligned of this RunSequencingStatsResponse.


        :param non_indexed_percent_aligned: The non_indexed_percent_aligned of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_percent_aligned = non_indexed_percent_aligned

    @property
    def non_indexed_percent_gt_q30(self):
        """Gets the non_indexed_percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_percent_gt_q30

    @non_indexed_percent_gt_q30.setter
    def non_indexed_percent_gt_q30(self, non_indexed_percent_gt_q30):
        """Sets the non_indexed_percent_gt_q30 of this RunSequencingStatsResponse.


        :param non_indexed_percent_gt_q30: The non_indexed_percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_percent_gt_q30 = non_indexed_percent_gt_q30

    @property
    def non_indexed_projected_total_yield(self):
        """Gets the non_indexed_projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_projected_total_yield

    @non_indexed_projected_total_yield.setter
    def non_indexed_projected_total_yield(self, non_indexed_projected_total_yield):
        """Sets the non_indexed_projected_total_yield of this RunSequencingStatsResponse.


        :param non_indexed_projected_total_yield: The non_indexed_projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_projected_total_yield = non_indexed_projected_total_yield

    @property
    def non_indexed_yield_total(self):
        """Gets the non_indexed_yield_total of this RunSequencingStatsResponse.  # noqa: E501


        :return: The non_indexed_yield_total of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._non_indexed_yield_total

    @non_indexed_yield_total.setter
    def non_indexed_yield_total(self, non_indexed_yield_total):
        """Sets the non_indexed_yield_total of this RunSequencingStatsResponse.


        :param non_indexed_yield_total: The non_indexed_yield_total of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._non_indexed_yield_total = non_indexed_yield_total

    @property
    def num_cycles_index1(self):
        """Gets the num_cycles_index1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_cycles_index1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index1

    @num_cycles_index1.setter
    def num_cycles_index1(self, num_cycles_index1):
        """Sets the num_cycles_index1 of this RunSequencingStatsResponse.


        :param num_cycles_index1: The num_cycles_index1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_cycles_index1 = num_cycles_index1

    @property
    def num_cycles_index2(self):
        """Gets the num_cycles_index2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_cycles_index2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index2

    @num_cycles_index2.setter
    def num_cycles_index2(self, num_cycles_index2):
        """Sets the num_cycles_index2 of this RunSequencingStatsResponse.


        :param num_cycles_index2: The num_cycles_index2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_cycles_index2 = num_cycles_index2

    @property
    def num_cycles_read1(self):
        """Gets the num_cycles_read1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_cycles_read1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read1

    @num_cycles_read1.setter
    def num_cycles_read1(self, num_cycles_read1):
        """Sets the num_cycles_read1 of this RunSequencingStatsResponse.


        :param num_cycles_read1: The num_cycles_read1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_cycles_read1 = num_cycles_read1

    @property
    def num_cycles_read2(self):
        """Gets the num_cycles_read2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_cycles_read2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read2

    @num_cycles_read2.setter
    def num_cycles_read2(self, num_cycles_read2):
        """Sets the num_cycles_read2 of this RunSequencingStatsResponse.


        :param num_cycles_read2: The num_cycles_read2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_cycles_read2 = num_cycles_read2

    @property
    def num_lanes(self):
        """Gets the num_lanes of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_lanes of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_lanes

    @num_lanes.setter
    def num_lanes(self, num_lanes):
        """Sets the num_lanes of this RunSequencingStatsResponse.


        :param num_lanes: The num_lanes of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_lanes = num_lanes

    @property
    def num_reads(self):
        """Gets the num_reads of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_reads of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_reads

    @num_reads.setter
    def num_reads(self, num_reads):
        """Sets the num_reads of this RunSequencingStatsResponse.


        :param num_reads: The num_reads of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_reads = num_reads

    @property
    def num_surfaces(self):
        """Gets the num_surfaces of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_surfaces of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_surfaces

    @num_surfaces.setter
    def num_surfaces(self, num_surfaces):
        """Sets the num_surfaces of this RunSequencingStatsResponse.


        :param num_surfaces: The num_surfaces of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_surfaces = num_surfaces

    @property
    def num_swaths_per_lane(self):
        """Gets the num_swaths_per_lane of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_swaths_per_lane of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_swaths_per_lane

    @num_swaths_per_lane.setter
    def num_swaths_per_lane(self, num_swaths_per_lane):
        """Sets the num_swaths_per_lane of this RunSequencingStatsResponse.


        :param num_swaths_per_lane: The num_swaths_per_lane of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_swaths_per_lane = num_swaths_per_lane

    @property
    def num_tiles_per_swath(self):
        """Gets the num_tiles_per_swath of this RunSequencingStatsResponse.  # noqa: E501


        :return: The num_tiles_per_swath of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_tiles_per_swath

    @num_tiles_per_swath.setter
    def num_tiles_per_swath(self, num_tiles_per_swath):
        """Sets the num_tiles_per_swath of this RunSequencingStatsResponse.


        :param num_tiles_per_swath: The num_tiles_per_swath of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._num_tiles_per_swath = num_tiles_per_swath

    @property
    def percent_aligned(self):
        """Gets the percent_aligned of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_aligned of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_aligned

    @percent_aligned.setter
    def percent_aligned(self, percent_aligned):
        """Sets the percent_aligned of this RunSequencingStatsResponse.


        :param percent_aligned: The percent_aligned of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_aligned = percent_aligned

    @property
    def percent_gt_q30(self):
        """Gets the percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30

    @percent_gt_q30.setter
    def percent_gt_q30(self, percent_gt_q30):
        """Sets the percent_gt_q30 of this RunSequencingStatsResponse.


        :param percent_gt_q30: The percent_gt_q30 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30 = percent_gt_q30

    @property
    def percent_gt_q30_last10_cycles(self):
        """Gets the percent_gt_q30_last10_cycles of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_gt_q30_last10_cycles of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_last10_cycles

    @percent_gt_q30_last10_cycles.setter
    def percent_gt_q30_last10_cycles(self, percent_gt_q30_last10_cycles):
        """Sets the percent_gt_q30_last10_cycles of this RunSequencingStatsResponse.


        :param percent_gt_q30_last10_cycles: The percent_gt_q30_last10_cycles of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_last10_cycles = percent_gt_q30_last10_cycles

    @property
    def percent_gt_q30_r1(self):
        """Gets the percent_gt_q30_r1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_gt_q30_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_r1

    @percent_gt_q30_r1.setter
    def percent_gt_q30_r1(self, percent_gt_q30_r1):
        """Sets the percent_gt_q30_r1 of this RunSequencingStatsResponse.


        :param percent_gt_q30_r1: The percent_gt_q30_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_r1 = percent_gt_q30_r1

    @property
    def percent_gt_q30_r2(self):
        """Gets the percent_gt_q30_r2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_gt_q30_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_gt_q30_r2

    @percent_gt_q30_r2.setter
    def percent_gt_q30_r2(self, percent_gt_q30_r2):
        """Sets the percent_gt_q30_r2 of this RunSequencingStatsResponse.


        :param percent_gt_q30_r2: The percent_gt_q30_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_gt_q30_r2 = percent_gt_q30_r2

    @property
    def percent_pf(self):
        """Gets the percent_pf of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_pf of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_pf

    @percent_pf.setter
    def percent_pf(self, percent_pf):
        """Sets the percent_pf of this RunSequencingStatsResponse.


        :param percent_pf: The percent_pf of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_pf = percent_pf

    @property
    def percent_resynthesis(self):
        """Gets the percent_resynthesis of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_resynthesis of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_resynthesis

    @percent_resynthesis.setter
    def percent_resynthesis(self, percent_resynthesis):
        """Sets the percent_resynthesis of this RunSequencingStatsResponse.


        :param percent_resynthesis: The percent_resynthesis of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_resynthesis = percent_resynthesis

    @property
    def phasing_r1(self):
        """Gets the phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._phasing_r1

    @phasing_r1.setter
    def phasing_r1(self, phasing_r1):
        """Sets the phasing_r1 of this RunSequencingStatsResponse.


        :param phasing_r1: The phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._phasing_r1 = phasing_r1

    @property
    def phasing_r2(self):
        """Gets the phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._phasing_r2

    @phasing_r2.setter
    def phasing_r2(self, phasing_r2):
        """Sets the phasing_r2 of this RunSequencingStatsResponse.


        :param phasing_r2: The phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._phasing_r2 = phasing_r2

    @property
    def pre_phasing_r1(self):
        """Gets the pre_phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The pre_phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_r1

    @pre_phasing_r1.setter
    def pre_phasing_r1(self, pre_phasing_r1):
        """Sets the pre_phasing_r1 of this RunSequencingStatsResponse.


        :param pre_phasing_r1: The pre_phasing_r1 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._pre_phasing_r1 = pre_phasing_r1

    @property
    def pre_phasing_r2(self):
        """Gets the pre_phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501


        :return: The pre_phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._pre_phasing_r2

    @pre_phasing_r2.setter
    def pre_phasing_r2(self, pre_phasing_r2):
        """Sets the pre_phasing_r2 of this RunSequencingStatsResponse.


        :param pre_phasing_r2: The pre_phasing_r2 of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._pre_phasing_r2 = pre_phasing_r2

    @property
    def projected_total_yield(self):
        """Gets the projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501


        :return: The projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._projected_total_yield

    @projected_total_yield.setter
    def projected_total_yield(self, projected_total_yield):
        """Sets the projected_total_yield of this RunSequencingStatsResponse.


        :param projected_total_yield: The projected_total_yield of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._projected_total_yield = projected_total_yield

    @property
    def reads_pf_total(self):
        """Gets the reads_pf_total of this RunSequencingStatsResponse.  # noqa: E501


        :return: The reads_pf_total of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._reads_pf_total

    @reads_pf_total.setter
    def reads_pf_total(self, reads_pf_total):
        """Sets the reads_pf_total of this RunSequencingStatsResponse.


        :param reads_pf_total: The reads_pf_total of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._reads_pf_total = reads_pf_total

    @property
    def reads_total(self):
        """Gets the reads_total of this RunSequencingStatsResponse.  # noqa: E501


        :return: The reads_total of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._reads_total

    @reads_total.setter
    def reads_total(self, reads_total):
        """Sets the reads_total of this RunSequencingStatsResponse.


        :param reads_total: The reads_total of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._reads_total = reads_total

    @property
    def yield_total(self):
        """Gets the yield_total of this RunSequencingStatsResponse.  # noqa: E501


        :return: The yield_total of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._yield_total

    @yield_total.setter
    def yield_total(self, yield_total):
        """Sets the yield_total of this RunSequencingStatsResponse.


        :param yield_total: The yield_total of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._yield_total = yield_total

    @property
    def clusters(self):
        """Gets the clusters of this RunSequencingStatsResponse.  # noqa: E501


        :return: The clusters of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this RunSequencingStatsResponse.


        :param clusters: The clusters of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._clusters = clusters

    @property
    def clusters_pf(self):
        """Gets the clusters_pf of this RunSequencingStatsResponse.  # noqa: E501


        :return: The clusters_pf of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._clusters_pf

    @clusters_pf.setter
    def clusters_pf(self, clusters_pf):
        """Sets the clusters_pf of this RunSequencingStatsResponse.


        :param clusters_pf: The clusters_pf of this RunSequencingStatsResponse.  # noqa: E501
        :type: int
        """

        self._clusters_pf = clusters_pf

    @property
    def cluster_density(self):
        """Gets the cluster_density of this RunSequencingStatsResponse.  # noqa: E501


        :return: The cluster_density of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._cluster_density

    @cluster_density.setter
    def cluster_density(self, cluster_density):
        """Sets the cluster_density of this RunSequencingStatsResponse.


        :param cluster_density: The cluster_density of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._cluster_density = cluster_density

    @property
    def occupancy(self):
        """Gets the occupancy of this RunSequencingStatsResponse.  # noqa: E501


        :return: The occupancy of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this RunSequencingStatsResponse.


        :param occupancy: The occupancy of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._occupancy = occupancy

    @property
    def percent_loading_concentration(self):
        """Gets the percent_loading_concentration of this RunSequencingStatsResponse.  # noqa: E501


        :return: The percent_loading_concentration of this RunSequencingStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_loading_concentration

    @percent_loading_concentration.setter
    def percent_loading_concentration(self, percent_loading_concentration):
        """Sets the percent_loading_concentration of this RunSequencingStatsResponse.


        :param percent_loading_concentration: The percent_loading_concentration of this RunSequencingStatsResponse.  # noqa: E501
        :type: float
        """

        self._percent_loading_concentration = percent_loading_concentration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSequencingStatsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunSequencingStatsResponse):
            return True

        return self.to_dict() != other.to_dict()
