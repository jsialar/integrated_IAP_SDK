# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class FileReferenceCompact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'urn': 'str',
        'file_name': 'str',
        'file_size': 'int',
        'href': 'str',
        'presigned_url': 'str',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'urn': 'urn',
        'file_name': 'fileName',
        'file_size': 'fileSize',
        'href': 'href',
        'presigned_url': 'presignedUrl',
        'error': 'error'
    }

    def __init__(self, id=None, urn=None, file_name=None, file_size=None, href=None, presigned_url=None, error=None, local_vars_configuration=None):  # noqa: E501
        """FileReferenceCompact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urn = None
        self._file_name = None
        self._file_size = None
        self._href = None
        self._presigned_url = None
        self._error = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urn is not None:
            self.urn = urn
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        if href is not None:
            self.href = href
        if presigned_url is not None:
            self.presigned_url = presigned_url
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this FileReferenceCompact.  # noqa: E501

        Id of the file in GDS  # noqa: E501

        :return: The id of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileReferenceCompact.

        Id of the file in GDS  # noqa: E501

        :param id: The id of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def urn(self):
        """Gets the urn of this FileReferenceCompact.  # noqa: E501

        Urn of the file in GDS  # noqa: E501

        :return: The urn of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this FileReferenceCompact.

        Urn of the file in GDS  # noqa: E501

        :param urn: The urn of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def file_name(self):
        """Gets the file_name of this FileReferenceCompact.  # noqa: E501

        Name of the file  # noqa: E501

        :return: The file_name of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileReferenceCompact.

        Name of the file  # noqa: E501

        :param file_name: The file_name of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this FileReferenceCompact.  # noqa: E501

        Size of the file in number of bytes  # noqa: E501

        :return: The file_size of this FileReferenceCompact.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this FileReferenceCompact.

        Size of the file in number of bytes  # noqa: E501

        :param file_size: The file_size of this FileReferenceCompact.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def href(self):
        """Gets the href of this FileReferenceCompact.  # noqa: E501

        Href of the file in GDS  # noqa: E501

        :return: The href of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FileReferenceCompact.

        Href of the file in GDS  # noqa: E501

        :param href: The href of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def presigned_url(self):
        """Gets the presigned_url of this FileReferenceCompact.  # noqa: E501

        URL to download the file  # noqa: E501

        :return: The presigned_url of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._presigned_url

    @presigned_url.setter
    def presigned_url(self, presigned_url):
        """Sets the presigned_url of this FileReferenceCompact.

        URL to download the file  # noqa: E501

        :param presigned_url: The presigned_url of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._presigned_url = presigned_url

    @property
    def error(self):
        """Gets the error of this FileReferenceCompact.  # noqa: E501

        Error Message  # noqa: E501

        :return: The error of this FileReferenceCompact.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FileReferenceCompact.

        Error Message  # noqa: E501

        :param error: The error of this FileReferenceCompact.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReferenceCompact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileReferenceCompact):
            return True

        return self.to_dict() != other.to_dict()
