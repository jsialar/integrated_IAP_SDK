# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class WorkflowMetadataDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workflow_type': 'str',
        'workflow_url': 'str',
        'volume_size_in_gigabytes': 'int',
        'tags': 'object',
        'workflow_params': 'object',
        'workflow_resources_folder': 'str'
    }

    attribute_map = {
        'workflow_type': 'workflowType',
        'workflow_url': 'workflowUrl',
        'volume_size_in_gigabytes': 'volumeSizeInGigabytes',
        'tags': 'tags',
        'workflow_params': 'workflowParams',
        'workflow_resources_folder': 'workflowResourcesFolder'
    }

    def __init__(self, workflow_type=None, workflow_url=None, volume_size_in_gigabytes=None, tags=None, workflow_params=None, workflow_resources_folder=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowMetadataDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._workflow_type = None
        self._workflow_url = None
        self._volume_size_in_gigabytes = None
        self._tags = None
        self._workflow_params = None
        self._workflow_resources_folder = None
        self.discriminator = None

        if workflow_type is not None:
            self.workflow_type = workflow_type
        if workflow_url is not None:
            self.workflow_url = workflow_url
        if volume_size_in_gigabytes is not None:
            self.volume_size_in_gigabytes = volume_size_in_gigabytes
        if tags is not None:
            self.tags = tags
        if workflow_params is not None:
            self.workflow_params = workflow_params
        if workflow_resources_folder is not None:
            self.workflow_resources_folder = workflow_resources_folder

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowMetadataDto.  # noqa: E501

        Workflow type  We always force it to be nextflow for now  # noqa: E501

        :return: The workflow_type of this WorkflowMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowMetadataDto.

        Workflow type  We always force it to be nextflow for now  # noqa: E501

        :param workflow_type: The workflow_type of this WorkflowMetadataDto.  # noqa: E501
        :type: str
        """

        self._workflow_type = workflow_type

    @property
    def workflow_url(self):
        """Gets the workflow_url of this WorkflowMetadataDto.  # noqa: E501

        Points to the workflow definition  # noqa: E501

        :return: The workflow_url of this WorkflowMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._workflow_url

    @workflow_url.setter
    def workflow_url(self, workflow_url):
        """Sets the workflow_url of this WorkflowMetadataDto.

        Points to the workflow definition  # noqa: E501

        :param workflow_url: The workflow_url of this WorkflowMetadataDto.  # noqa: E501
        :type: str
        """

        self._workflow_url = workflow_url

    @property
    def volume_size_in_gigabytes(self):
        """Gets the volume_size_in_gigabytes of this WorkflowMetadataDto.  # noqa: E501

        The volume size limitation for the analysis output  # noqa: E501

        :return: The volume_size_in_gigabytes of this WorkflowMetadataDto.  # noqa: E501
        :rtype: int
        """
        return self._volume_size_in_gigabytes

    @volume_size_in_gigabytes.setter
    def volume_size_in_gigabytes(self, volume_size_in_gigabytes):
        """Sets the volume_size_in_gigabytes of this WorkflowMetadataDto.

        The volume size limitation for the analysis output  # noqa: E501

        :param volume_size_in_gigabytes: The volume_size_in_gigabytes of this WorkflowMetadataDto.  # noqa: E501
        :type: int
        """

        self._volume_size_in_gigabytes = volume_size_in_gigabytes

    @property
    def tags(self):
        """Gets the tags of this WorkflowMetadataDto.  # noqa: E501

        A JSON object that can be used to pass metadata to the workflow  # noqa: E501

        :return: The tags of this WorkflowMetadataDto.  # noqa: E501
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkflowMetadataDto.

        A JSON object that can be used to pass metadata to the workflow  # noqa: E501

        :param tags: The tags of this WorkflowMetadataDto.  # noqa: E501
        :type: object
        """

        self._tags = tags

    @property
    def workflow_params(self):
        """Gets the workflow_params of this WorkflowMetadataDto.  # noqa: E501

        Workflow parameters with key/value pairs  A JSON object that allows the definition to provide hard coded parameters to the workflow  These get merged with the parameters provided to the workflow via user settings  # noqa: E501

        :return: The workflow_params of this WorkflowMetadataDto.  # noqa: E501
        :rtype: object
        """
        return self._workflow_params

    @workflow_params.setter
    def workflow_params(self, workflow_params):
        """Sets the workflow_params of this WorkflowMetadataDto.

        Workflow parameters with key/value pairs  A JSON object that allows the definition to provide hard coded parameters to the workflow  These get merged with the parameters provided to the workflow via user settings  # noqa: E501

        :param workflow_params: The workflow_params of this WorkflowMetadataDto.  # noqa: E501
        :type: object
        """

        self._workflow_params = workflow_params

    @property
    def workflow_resources_folder(self):
        """Gets the workflow_resources_folder of this WorkflowMetadataDto.  # noqa: E501

        Optional resources folder configured for the workflow  # noqa: E501

        :return: The workflow_resources_folder of this WorkflowMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._workflow_resources_folder

    @workflow_resources_folder.setter
    def workflow_resources_folder(self, workflow_resources_folder):
        """Sets the workflow_resources_folder of this WorkflowMetadataDto.

        Optional resources folder configured for the workflow  # noqa: E501

        :param workflow_resources_folder: The workflow_resources_folder of this WorkflowMetadataDto.  # noqa: E501
        :type: str
        """

        self._workflow_resources_folder = workflow_resources_folder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowMetadataDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowMetadataDto):
            return True

        return self.to_dict() != other.to_dict()
