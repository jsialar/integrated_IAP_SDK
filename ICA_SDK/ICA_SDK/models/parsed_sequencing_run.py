# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class ParsedSequencingRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_container_identifier': 'str',
        'run_configuration': 'UpdateSequencingRunConfigurationRequest',
        'run_contents': 'UpdateSequencingRunContentsRequest',
        'run_analysis_configurations': 'list[CreateSequencingRunAnalysisConfigurationRequest]',
        'run_prep_kit_info': 'SequencingRunPrepKitInfo'
    }

    attribute_map = {
        'input_container_identifier': 'inputContainerIdentifier',
        'run_configuration': 'runConfiguration',
        'run_contents': 'runContents',
        'run_analysis_configurations': 'runAnalysisConfigurations',
        'run_prep_kit_info': 'runPrepKitInfo'
    }

    def __init__(self, input_container_identifier=None, run_configuration=None, run_contents=None, run_analysis_configurations=None, run_prep_kit_info=None, local_vars_configuration=None):  # noqa: E501
        """ParsedSequencingRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_container_identifier = None
        self._run_configuration = None
        self._run_contents = None
        self._run_analysis_configurations = None
        self._run_prep_kit_info = None
        self.discriminator = None

        if input_container_identifier is not None:
            self.input_container_identifier = input_container_identifier
        if run_configuration is not None:
            self.run_configuration = run_configuration
        if run_contents is not None:
            self.run_contents = run_contents
        if run_analysis_configurations is not None:
            self.run_analysis_configurations = run_analysis_configurations
        if run_prep_kit_info is not None:
            self.run_prep_kit_info = run_prep_kit_info

    @property
    def input_container_identifier(self):
        """Gets the input_container_identifier of this ParsedSequencingRun.  # noqa: E501

        The input container identifier extracted from the sample sheet  # noqa: E501

        :return: The input_container_identifier of this ParsedSequencingRun.  # noqa: E501
        :rtype: str
        """
        return self._input_container_identifier

    @input_container_identifier.setter
    def input_container_identifier(self, input_container_identifier):
        """Sets the input_container_identifier of this ParsedSequencingRun.

        The input container identifier extracted from the sample sheet  # noqa: E501

        :param input_container_identifier: The input_container_identifier of this ParsedSequencingRun.  # noqa: E501
        :type: str
        """

        self._input_container_identifier = input_container_identifier

    @property
    def run_configuration(self):
        """Gets the run_configuration of this ParsedSequencingRun.  # noqa: E501


        :return: The run_configuration of this ParsedSequencingRun.  # noqa: E501
        :rtype: UpdateSequencingRunConfigurationRequest
        """
        return self._run_configuration

    @run_configuration.setter
    def run_configuration(self, run_configuration):
        """Sets the run_configuration of this ParsedSequencingRun.


        :param run_configuration: The run_configuration of this ParsedSequencingRun.  # noqa: E501
        :type: UpdateSequencingRunConfigurationRequest
        """

        self._run_configuration = run_configuration

    @property
    def run_contents(self):
        """Gets the run_contents of this ParsedSequencingRun.  # noqa: E501


        :return: The run_contents of this ParsedSequencingRun.  # noqa: E501
        :rtype: UpdateSequencingRunContentsRequest
        """
        return self._run_contents

    @run_contents.setter
    def run_contents(self, run_contents):
        """Sets the run_contents of this ParsedSequencingRun.


        :param run_contents: The run_contents of this ParsedSequencingRun.  # noqa: E501
        :type: UpdateSequencingRunContentsRequest
        """

        self._run_contents = run_contents

    @property
    def run_analysis_configurations(self):
        """Gets the run_analysis_configurations of this ParsedSequencingRun.  # noqa: E501

        Run analysis configurations  # noqa: E501

        :return: The run_analysis_configurations of this ParsedSequencingRun.  # noqa: E501
        :rtype: list[CreateSequencingRunAnalysisConfigurationRequest]
        """
        return self._run_analysis_configurations

    @run_analysis_configurations.setter
    def run_analysis_configurations(self, run_analysis_configurations):
        """Sets the run_analysis_configurations of this ParsedSequencingRun.

        Run analysis configurations  # noqa: E501

        :param run_analysis_configurations: The run_analysis_configurations of this ParsedSequencingRun.  # noqa: E501
        :type: list[CreateSequencingRunAnalysisConfigurationRequest]
        """

        self._run_analysis_configurations = run_analysis_configurations

    @property
    def run_prep_kit_info(self):
        """Gets the run_prep_kit_info of this ParsedSequencingRun.  # noqa: E501


        :return: The run_prep_kit_info of this ParsedSequencingRun.  # noqa: E501
        :rtype: SequencingRunPrepKitInfo
        """
        return self._run_prep_kit_info

    @run_prep_kit_info.setter
    def run_prep_kit_info(self, run_prep_kit_info):
        """Sets the run_prep_kit_info of this ParsedSequencingRun.


        :param run_prep_kit_info: The run_prep_kit_info of this ParsedSequencingRun.  # noqa: E501
        :type: SequencingRunPrepKitInfo
        """

        self._run_prep_kit_info = run_prep_kit_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParsedSequencingRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParsedSequencingRun):
            return True

        return self.to_dict() != other.to_dict()
