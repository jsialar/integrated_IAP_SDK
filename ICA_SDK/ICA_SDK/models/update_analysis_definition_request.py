# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateAnalysisDefinitionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'organization': 'str',
        'display_name': 'str',
        'description': 'str',
        'status': 'str',
        'library_prep_kit_ids': 'list[str]',
        'illumina_kit_support_mode': 'str',
        'regulatory_mode': 'str',
        'checksum': 'str',
        'acl': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'organization': 'organization',
        'display_name': 'displayName',
        'description': 'description',
        'status': 'status',
        'library_prep_kit_ids': 'libraryPrepKitIds',
        'illumina_kit_support_mode': 'illuminaKitSupportMode',
        'regulatory_mode': 'regulatoryMode',
        'checksum': 'checksum',
        'acl': 'acl'
    }

    def __init__(self, name=None, organization=None, display_name=None, description=None, status=None, library_prep_kit_ids=None, illumina_kit_support_mode=None, regulatory_mode=None, checksum=None, acl=None, local_vars_configuration=None):  # noqa: E501
        """UpdateAnalysisDefinitionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._organization = None
        self._display_name = None
        self._description = None
        self._status = None
        self._library_prep_kit_ids = None
        self._illumina_kit_support_mode = None
        self._regulatory_mode = None
        self._checksum = None
        self._acl = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if library_prep_kit_ids is not None:
            self.library_prep_kit_ids = library_prep_kit_ids
        if illumina_kit_support_mode is not None:
            self.illumina_kit_support_mode = illumina_kit_support_mode
        if regulatory_mode is not None:
            self.regulatory_mode = regulatory_mode
        if checksum is not None:
            self.checksum = checksum
        if acl is not None:
            self.acl = acl

    @property
    def name(self):
        """Gets the name of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Name of the analysis definition  # noqa: E501

        :return: The name of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAnalysisDefinitionRequest.

        Name of the analysis definition  # noqa: E501

        :param name: The name of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Organization owning the analysis definition  # noqa: E501

        :return: The organization of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UpdateAnalysisDefinitionRequest.

        Organization owning the analysis definition  # noqa: E501

        :param organization: The organization of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) > 255):
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) < 0):
            raise ValueError("Invalid value for `organization`, length must be greater than or equal to `0`")  # noqa: E501

        self._organization = organization

    @property
    def display_name(self):
        """Gets the display_name of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        User-friendly name of the analysis definition  # noqa: E501

        :return: The display_name of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateAnalysisDefinitionRequest.

        User-friendly name of the analysis definition  # noqa: E501

        :param display_name: The display_name of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 255):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) < 0):
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Description of the analysis definition  # noqa: E501

        :return: The description of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAnalysisDefinitionRequest.

        Description of the analysis definition  # noqa: E501

        :param description: The description of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def status(self):
        """Gets the status of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Status of the analysis definition  # noqa: E501

        :return: The status of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAnalysisDefinitionRequest.

        Status of the analysis definition  # noqa: E501

        :param status: The status of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def library_prep_kit_ids(self):
        """Gets the library_prep_kit_ids of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Array of library prep kit IDs that are compatible with this analysis definition  # noqa: E501

        :return: The library_prep_kit_ids of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._library_prep_kit_ids

    @library_prep_kit_ids.setter
    def library_prep_kit_ids(self, library_prep_kit_ids):
        """Sets the library_prep_kit_ids of this UpdateAnalysisDefinitionRequest.

        Array of library prep kit IDs that are compatible with this analysis definition  # noqa: E501

        :param library_prep_kit_ids: The library_prep_kit_ids of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._library_prep_kit_ids = library_prep_kit_ids

    @property
    def illumina_kit_support_mode(self):
        """Gets the illumina_kit_support_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Illumina Kits Support Mode of analysis definition  # noqa: E501

        :return: The illumina_kit_support_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._illumina_kit_support_mode

    @illumina_kit_support_mode.setter
    def illumina_kit_support_mode(self, illumina_kit_support_mode):
        """Sets the illumina_kit_support_mode of this UpdateAnalysisDefinitionRequest.

        Illumina Kits Support Mode of analysis definition  # noqa: E501

        :param illumina_kit_support_mode: The illumina_kit_support_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Compatible", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and illumina_kit_support_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `illumina_kit_support_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(illumina_kit_support_mode, allowed_values)
            )

        self._illumina_kit_support_mode = illumina_kit_support_mode

    @property
    def regulatory_mode(self):
        """Gets the regulatory_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Regulatory mode of the analysis definition  # noqa: E501

        :return: The regulatory_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._regulatory_mode

    @regulatory_mode.setter
    def regulatory_mode(self, regulatory_mode):
        """Sets the regulatory_mode of this UpdateAnalysisDefinitionRequest.

        Regulatory mode of the analysis definition  # noqa: E501

        :param regulatory_mode: The regulatory_mode of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUO", "IVD", "IUO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and regulatory_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `regulatory_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(regulatory_mode, allowed_values)
            )

        self._regulatory_mode = regulatory_mode

    @property
    def checksum(self):
        """Gets the checksum of this UpdateAnalysisDefinitionRequest.  # noqa: E501

        Checksum of AnalysisDefinition  # noqa: E501

        :return: The checksum of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this UpdateAnalysisDefinitionRequest.

        Checksum of AnalysisDefinition  # noqa: E501

        :param checksum: The checksum of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) > 255):
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                checksum is not None and len(checksum) < 0):
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `0`")  # noqa: E501

        self._checksum = checksum

    @property
    def acl(self):
        """Gets the acl of this UpdateAnalysisDefinitionRequest.  # noqa: E501


        :return: The acl of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this UpdateAnalysisDefinitionRequest.


        :param acl: The acl of this UpdateAnalysisDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAnalysisDefinitionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateAnalysisDefinitionRequest):
            return True

        return self.to_dict() != other.to_dict()
