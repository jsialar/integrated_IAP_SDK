# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateSequencingRunConfigurationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_name': 'str',
        'description': 'str',
        'regulatory_mode': 'str',
        'instrument_type': 'str',
        'instrument_platform': 'str',
        'num_cycles_read1': 'int',
        'num_cycles_read2': 'int',
        'read_type': 'str',
        'num_cycles_index1': 'int',
        'num_cycles_index2': 'int',
        'use_custom_primer_for_read1': 'bool',
        'use_custom_primer_for_read2': 'bool',
        'use_custom_primer_for_index1': 'bool',
        'use_custom_primer_for_index2': 'bool'
    }

    attribute_map = {
        'run_name': 'runName',
        'description': 'description',
        'regulatory_mode': 'regulatoryMode',
        'instrument_type': 'instrumentType',
        'instrument_platform': 'instrumentPlatform',
        'num_cycles_read1': 'numCyclesRead1',
        'num_cycles_read2': 'numCyclesRead2',
        'read_type': 'readType',
        'num_cycles_index1': 'numCyclesIndex1',
        'num_cycles_index2': 'numCyclesIndex2',
        'use_custom_primer_for_read1': 'useCustomPrimerForRead1',
        'use_custom_primer_for_read2': 'useCustomPrimerForRead2',
        'use_custom_primer_for_index1': 'useCustomPrimerForIndex1',
        'use_custom_primer_for_index2': 'useCustomPrimerForIndex2'
    }

    def __init__(self, run_name=None, description=None, regulatory_mode=None, instrument_type=None, instrument_platform=None, num_cycles_read1=None, num_cycles_read2=None, read_type=None, num_cycles_index1=None, num_cycles_index2=None, use_custom_primer_for_read1=None, use_custom_primer_for_read2=None, use_custom_primer_for_index1=None, use_custom_primer_for_index2=None, local_vars_configuration=None):  # noqa: E501
        """UpdateSequencingRunConfigurationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_name = None
        self._description = None
        self._regulatory_mode = None
        self._instrument_type = None
        self._instrument_platform = None
        self._num_cycles_read1 = None
        self._num_cycles_read2 = None
        self._read_type = None
        self._num_cycles_index1 = None
        self._num_cycles_index2 = None
        self._use_custom_primer_for_read1 = None
        self._use_custom_primer_for_read2 = None
        self._use_custom_primer_for_index1 = None
        self._use_custom_primer_for_index2 = None
        self.discriminator = None

        if run_name is not None:
            self.run_name = run_name
        if description is not None:
            self.description = description
        if regulatory_mode is not None:
            self.regulatory_mode = regulatory_mode
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if instrument_platform is not None:
            self.instrument_platform = instrument_platform
        if num_cycles_read1 is not None:
            self.num_cycles_read1 = num_cycles_read1
        if num_cycles_read2 is not None:
            self.num_cycles_read2 = num_cycles_read2
        if read_type is not None:
            self.read_type = read_type
        if num_cycles_index1 is not None:
            self.num_cycles_index1 = num_cycles_index1
        if num_cycles_index2 is not None:
            self.num_cycles_index2 = num_cycles_index2
        if use_custom_primer_for_read1 is not None:
            self.use_custom_primer_for_read1 = use_custom_primer_for_read1
        if use_custom_primer_for_read2 is not None:
            self.use_custom_primer_for_read2 = use_custom_primer_for_read2
        if use_custom_primer_for_index1 is not None:
            self.use_custom_primer_for_index1 = use_custom_primer_for_index1
        if use_custom_primer_for_index2 is not None:
            self.use_custom_primer_for_index2 = use_custom_primer_for_index2

    @property
    def run_name(self):
        """Gets the run_name of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Name of the run  Must not be null, empty, or consist only of white-space characters  # noqa: E501

        :return: The run_name of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this UpdateSequencingRunConfigurationRequest.

        Name of the run  Must not be null, empty, or consist only of white-space characters  # noqa: E501

        :param run_name: The run_name of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                run_name is not None and len(run_name) > 255):
            raise ValueError("Invalid value for `run_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                run_name is not None and len(run_name) < 0):
            raise ValueError("Invalid value for `run_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._run_name = run_name

    @property
    def description(self):
        """Gets the description of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Description of the run  # noqa: E501

        :return: The description of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSequencingRunConfigurationRequest.

        Description of the run  # noqa: E501

        :param description: The description of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def regulatory_mode(self):
        """Gets the regulatory_mode of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Regulatory mode of the run  # noqa: E501

        :return: The regulatory_mode of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._regulatory_mode

    @regulatory_mode.setter
    def regulatory_mode(self, regulatory_mode):
        """Sets the regulatory_mode of this UpdateSequencingRunConfigurationRequest.

        Regulatory mode of the run  # noqa: E501

        :param regulatory_mode: The regulatory_mode of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUO", "IVD", "IUO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and regulatory_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `regulatory_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(regulatory_mode, allowed_values)
            )

        self._regulatory_mode = regulatory_mode

    @property
    def instrument_type(self):
        """Gets the instrument_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Type of instrument for which the run is planned  # noqa: E501

        :return: The instrument_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this UpdateSequencingRunConfigurationRequest.

        Type of instrument for which the run is planned  # noqa: E501

        :param instrument_type: The instrument_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def instrument_platform(self):
        """Gets the instrument_platform of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Platform of instrument for which the run is planned  Recognized values include:  NextSeq, HiSeq, MiSeq, Eco, iScan, HiSeqX, NeoPrep, MiniSeq, NovaSeq, iSeq, TruSightNIPT, NextSeq1k2k  No value entered is treated as the instrument platform of input InstrumentType  # noqa: E501

        :return: The instrument_platform of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_platform

    @instrument_platform.setter
    def instrument_platform(self, instrument_platform):
        """Sets the instrument_platform of this UpdateSequencingRunConfigurationRequest.

        Platform of instrument for which the run is planned  Recognized values include:  NextSeq, HiSeq, MiSeq, Eco, iScan, HiSeqX, NeoPrep, MiniSeq, NovaSeq, iSeq, TruSightNIPT, NextSeq1k2k  No value entered is treated as the instrument platform of input InstrumentType  # noqa: E501

        :param instrument_platform: The instrument_platform of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._instrument_platform = instrument_platform

    @property
    def num_cycles_read1(self):
        """Gets the num_cycles_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Number of cycles in read 1  # noqa: E501

        :return: The num_cycles_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read1

    @num_cycles_read1.setter
    def num_cycles_read1(self, num_cycles_read1):
        """Sets the num_cycles_read1 of this UpdateSequencingRunConfigurationRequest.

        Number of cycles in read 1  # noqa: E501

        :param num_cycles_read1: The num_cycles_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_read1 is not None and num_cycles_read1 > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_read1`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_read1 is not None and num_cycles_read1 < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_read1`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_cycles_read1 = num_cycles_read1

    @property
    def num_cycles_read2(self):
        """Gets the num_cycles_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Number of cycles in read 2  # noqa: E501

        :return: The num_cycles_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_read2

    @num_cycles_read2.setter
    def num_cycles_read2(self, num_cycles_read2):
        """Sets the num_cycles_read2 of this UpdateSequencingRunConfigurationRequest.

        Number of cycles in read 2  # noqa: E501

        :param num_cycles_read2: The num_cycles_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_read2 is not None and num_cycles_read2 > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_read2`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_read2 is not None and num_cycles_read2 < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_read2`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_cycles_read2 = num_cycles_read2

    @property
    def read_type(self):
        """Gets the read_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Read type of the run  # noqa: E501

        :return: The read_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._read_type

    @read_type.setter
    def read_type(self, read_type):
        """Sets the read_type of this UpdateSequencingRunConfigurationRequest.

        Read type of the run  # noqa: E501

        :param read_type: The read_type of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Single", "Paired"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and read_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `read_type` ({0}), must be one of {1}"  # noqa: E501
                .format(read_type, allowed_values)
            )

        self._read_type = read_type

    @property
    def num_cycles_index1(self):
        """Gets the num_cycles_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Number of cycles in index 1  # noqa: E501

        :return: The num_cycles_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index1

    @num_cycles_index1.setter
    def num_cycles_index1(self, num_cycles_index1):
        """Sets the num_cycles_index1 of this UpdateSequencingRunConfigurationRequest.

        Number of cycles in index 1  # noqa: E501

        :param num_cycles_index1: The num_cycles_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_index1 is not None and num_cycles_index1 > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_index1`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_index1 is not None and num_cycles_index1 < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_index1`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_cycles_index1 = num_cycles_index1

    @property
    def num_cycles_index2(self):
        """Gets the num_cycles_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Number of cycles in index 2  # noqa: E501

        :return: The num_cycles_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_cycles_index2

    @num_cycles_index2.setter
    def num_cycles_index2(self, num_cycles_index2):
        """Sets the num_cycles_index2 of this UpdateSequencingRunConfigurationRequest.

        Number of cycles in index 2  # noqa: E501

        :param num_cycles_index2: The num_cycles_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_index2 is not None and num_cycles_index2 > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_index2`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_cycles_index2 is not None and num_cycles_index2 < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_cycles_index2`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_cycles_index2 = num_cycles_index2

    @property
    def use_custom_primer_for_read1(self):
        """Gets the use_custom_primer_for_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Value indicating whether read 1 uses custom primer  # noqa: E501

        :return: The use_custom_primer_for_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_primer_for_read1

    @use_custom_primer_for_read1.setter
    def use_custom_primer_for_read1(self, use_custom_primer_for_read1):
        """Sets the use_custom_primer_for_read1 of this UpdateSequencingRunConfigurationRequest.

        Value indicating whether read 1 uses custom primer  # noqa: E501

        :param use_custom_primer_for_read1: The use_custom_primer_for_read1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_custom_primer_for_read1 = use_custom_primer_for_read1

    @property
    def use_custom_primer_for_read2(self):
        """Gets the use_custom_primer_for_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Value indicating whether read 2 uses custom primer  # noqa: E501

        :return: The use_custom_primer_for_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_primer_for_read2

    @use_custom_primer_for_read2.setter
    def use_custom_primer_for_read2(self, use_custom_primer_for_read2):
        """Sets the use_custom_primer_for_read2 of this UpdateSequencingRunConfigurationRequest.

        Value indicating whether read 2 uses custom primer  # noqa: E501

        :param use_custom_primer_for_read2: The use_custom_primer_for_read2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_custom_primer_for_read2 = use_custom_primer_for_read2

    @property
    def use_custom_primer_for_index1(self):
        """Gets the use_custom_primer_for_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Value indicating whether index 1 uses custom primer  # noqa: E501

        :return: The use_custom_primer_for_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_primer_for_index1

    @use_custom_primer_for_index1.setter
    def use_custom_primer_for_index1(self, use_custom_primer_for_index1):
        """Sets the use_custom_primer_for_index1 of this UpdateSequencingRunConfigurationRequest.

        Value indicating whether index 1 uses custom primer  # noqa: E501

        :param use_custom_primer_for_index1: The use_custom_primer_for_index1 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_custom_primer_for_index1 = use_custom_primer_for_index1

    @property
    def use_custom_primer_for_index2(self):
        """Gets the use_custom_primer_for_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501

        Value indicating whether index 2 uses custom primer  # noqa: E501

        :return: The use_custom_primer_for_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_primer_for_index2

    @use_custom_primer_for_index2.setter
    def use_custom_primer_for_index2(self, use_custom_primer_for_index2):
        """Sets the use_custom_primer_for_index2 of this UpdateSequencingRunConfigurationRequest.

        Value indicating whether index 2 uses custom primer  # noqa: E501

        :param use_custom_primer_for_index2: The use_custom_primer_for_index2 of this UpdateSequencingRunConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_custom_primer_for_index2 = use_custom_primer_for_index2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSequencingRunConfigurationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSequencingRunConfigurationRequest):
            return True

        return self.to_dict() != other.to_dict()
