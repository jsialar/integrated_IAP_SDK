# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class LaneContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lane_number': 'int',
        'same_as_lane_number': 'int',
        'adapter_sequence_read1': 'str',
        'adapter_sequence_read2': 'str',
        'lane_libraries': 'list[LaneLibrary]'
    }

    attribute_map = {
        'lane_number': 'laneNumber',
        'same_as_lane_number': 'sameAsLaneNumber',
        'adapter_sequence_read1': 'adapterSequenceRead1',
        'adapter_sequence_read2': 'adapterSequenceRead2',
        'lane_libraries': 'laneLibraries'
    }

    def __init__(self, lane_number=None, same_as_lane_number=None, adapter_sequence_read1=None, adapter_sequence_read2=None, lane_libraries=None, local_vars_configuration=None):  # noqa: E501
        """LaneContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lane_number = None
        self._same_as_lane_number = None
        self._adapter_sequence_read1 = None
        self._adapter_sequence_read2 = None
        self._lane_libraries = None
        self.discriminator = None

        if lane_number is not None:
            self.lane_number = lane_number
        if same_as_lane_number is not None:
            self.same_as_lane_number = same_as_lane_number
        if adapter_sequence_read1 is not None:
            self.adapter_sequence_read1 = adapter_sequence_read1
        if adapter_sequence_read2 is not None:
            self.adapter_sequence_read2 = adapter_sequence_read2
        if lane_libraries is not None:
            self.lane_libraries = lane_libraries

    @property
    def lane_number(self):
        """Gets the lane_number of this LaneContent.  # noqa: E501

        Optional number of the lane. If not provided, it implies that the contents are the same across all lanes  # noqa: E501

        :return: The lane_number of this LaneContent.  # noqa: E501
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number):
        """Sets the lane_number of this LaneContent.

        Optional number of the lane. If not provided, it implies that the contents are the same across all lanes  # noqa: E501

        :param lane_number: The lane_number of this LaneContent.  # noqa: E501
        :type: int
        """

        self._lane_number = lane_number

    @property
    def same_as_lane_number(self):
        """Gets the same_as_lane_number of this LaneContent.  # noqa: E501

        Indicates that the content of this lane is the same as that of the previously-defined lane  # noqa: E501

        :return: The same_as_lane_number of this LaneContent.  # noqa: E501
        :rtype: int
        """
        return self._same_as_lane_number

    @same_as_lane_number.setter
    def same_as_lane_number(self, same_as_lane_number):
        """Sets the same_as_lane_number of this LaneContent.

        Indicates that the content of this lane is the same as that of the previously-defined lane  # noqa: E501

        :param same_as_lane_number: The same_as_lane_number of this LaneContent.  # noqa: E501
        :type: int
        """

        self._same_as_lane_number = same_as_lane_number

    @property
    def adapter_sequence_read1(self):
        """Gets the adapter_sequence_read1 of this LaneContent.  # noqa: E501

        Default Adapter sequence read 1 for this lane  # noqa: E501

        :return: The adapter_sequence_read1 of this LaneContent.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read1

    @adapter_sequence_read1.setter
    def adapter_sequence_read1(self, adapter_sequence_read1):
        """Sets the adapter_sequence_read1 of this LaneContent.

        Default Adapter sequence read 1 for this lane  # noqa: E501

        :param adapter_sequence_read1: The adapter_sequence_read1 of this LaneContent.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read1 is not None and len(adapter_sequence_read1) > 128):
            raise ValueError("Invalid value for `adapter_sequence_read1`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read1 is not None and len(adapter_sequence_read1) < 0):
            raise ValueError("Invalid value for `adapter_sequence_read1`, length must be greater than or equal to `0`")  # noqa: E501

        self._adapter_sequence_read1 = adapter_sequence_read1

    @property
    def adapter_sequence_read2(self):
        """Gets the adapter_sequence_read2 of this LaneContent.  # noqa: E501

        Default Adapter sequence read 2 for this lane  # noqa: E501

        :return: The adapter_sequence_read2 of this LaneContent.  # noqa: E501
        :rtype: str
        """
        return self._adapter_sequence_read2

    @adapter_sequence_read2.setter
    def adapter_sequence_read2(self, adapter_sequence_read2):
        """Sets the adapter_sequence_read2 of this LaneContent.

        Default Adapter sequence read 2 for this lane  # noqa: E501

        :param adapter_sequence_read2: The adapter_sequence_read2 of this LaneContent.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read2 is not None and len(adapter_sequence_read2) > 128):
            raise ValueError("Invalid value for `adapter_sequence_read2`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                adapter_sequence_read2 is not None and len(adapter_sequence_read2) < 0):
            raise ValueError("Invalid value for `adapter_sequence_read2`, length must be greater than or equal to `0`")  # noqa: E501

        self._adapter_sequence_read2 = adapter_sequence_read2

    @property
    def lane_libraries(self):
        """Gets the lane_libraries of this LaneContent.  # noqa: E501

        Information about the samples and libraries the lane contains  # noqa: E501

        :return: The lane_libraries of this LaneContent.  # noqa: E501
        :rtype: list[LaneLibrary]
        """
        return self._lane_libraries

    @lane_libraries.setter
    def lane_libraries(self, lane_libraries):
        """Sets the lane_libraries of this LaneContent.

        Information about the samples and libraries the lane contains  # noqa: E501

        :param lane_libraries: The lane_libraries of this LaneContent.  # noqa: E501
        :type: list[LaneLibrary]
        """

        self._lane_libraries = lane_libraries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaneContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LaneContent):
            return True

        return self.to_dict() != other.to_dict()
