# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class ImportPlannedRunRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sample_sheet_content': 'str',
        'resolve_prep_kits': 'bool',
        'resolve_prep_kits_by_name': 'bool',
        'resolve_index_sequence_info': 'bool',
        'enable_warnings_for_missing_cloud_sections': 'bool',
        'default_kits': 'list[DefaultKit]'
    }

    attribute_map = {
        'sample_sheet_content': 'sampleSheetContent',
        'resolve_prep_kits': 'resolvePrepKits',
        'resolve_prep_kits_by_name': 'resolvePrepKitsByName',
        'resolve_index_sequence_info': 'resolveIndexSequenceInfo',
        'enable_warnings_for_missing_cloud_sections': 'enableWarningsForMissingCloudSections',
        'default_kits': 'defaultKits'
    }

    def __init__(self, sample_sheet_content=None, resolve_prep_kits=None, resolve_prep_kits_by_name=None, resolve_index_sequence_info=None, enable_warnings_for_missing_cloud_sections=None, default_kits=None, local_vars_configuration=None):  # noqa: E501
        """ImportPlannedRunRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sample_sheet_content = None
        self._resolve_prep_kits = None
        self._resolve_prep_kits_by_name = None
        self._resolve_index_sequence_info = None
        self._enable_warnings_for_missing_cloud_sections = None
        self._default_kits = None
        self.discriminator = None

        self.sample_sheet_content = sample_sheet_content
        if resolve_prep_kits is not None:
            self.resolve_prep_kits = resolve_prep_kits
        if resolve_prep_kits_by_name is not None:
            self.resolve_prep_kits_by_name = resolve_prep_kits_by_name
        if resolve_index_sequence_info is not None:
            self.resolve_index_sequence_info = resolve_index_sequence_info
        if enable_warnings_for_missing_cloud_sections is not None:
            self.enable_warnings_for_missing_cloud_sections = enable_warnings_for_missing_cloud_sections
        if default_kits is not None:
            self.default_kits = default_kits

    @property
    def sample_sheet_content(self):
        """Gets the sample_sheet_content of this ImportPlannedRunRequest.  # noqa: E501

        The csv string of the sample sheet  # noqa: E501

        :return: The sample_sheet_content of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_sheet_content

    @sample_sheet_content.setter
    def sample_sheet_content(self, sample_sheet_content):
        """Sets the sample_sheet_content of this ImportPlannedRunRequest.

        The csv string of the sample sheet  # noqa: E501

        :param sample_sheet_content: The sample_sheet_content of this ImportPlannedRunRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sample_sheet_content is None:  # noqa: E501
            raise ValueError("Invalid value for `sample_sheet_content`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sample_sheet_content is not None and len(sample_sheet_content) > 10485760):
            raise ValueError("Invalid value for `sample_sheet_content`, length must be less than or equal to `10485760`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sample_sheet_content is not None and len(sample_sheet_content) < 0):
            raise ValueError("Invalid value for `sample_sheet_content`, length must be greater than or equal to `0`")  # noqa: E501

        self._sample_sheet_content = sample_sheet_content

    @property
    def resolve_prep_kits(self):
        """Gets the resolve_prep_kits of this ImportPlannedRunRequest.  # noqa: E501

        If true, resolve prep kit information from sample sheet if possible  # noqa: E501

        :return: The resolve_prep_kits of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._resolve_prep_kits

    @resolve_prep_kits.setter
    def resolve_prep_kits(self, resolve_prep_kits):
        """Sets the resolve_prep_kits of this ImportPlannedRunRequest.

        If true, resolve prep kit information from sample sheet if possible  # noqa: E501

        :param resolve_prep_kits: The resolve_prep_kits of this ImportPlannedRunRequest.  # noqa: E501
        :type: bool
        """

        self._resolve_prep_kits = resolve_prep_kits

    @property
    def resolve_prep_kits_by_name(self):
        """Gets the resolve_prep_kits_by_name of this ImportPlannedRunRequest.  # noqa: E501

        If true, attempt to resolve prep kits by name if they cannot be resolved using URN column  # noqa: E501

        :return: The resolve_prep_kits_by_name of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._resolve_prep_kits_by_name

    @resolve_prep_kits_by_name.setter
    def resolve_prep_kits_by_name(self, resolve_prep_kits_by_name):
        """Sets the resolve_prep_kits_by_name of this ImportPlannedRunRequest.

        If true, attempt to resolve prep kits by name if they cannot be resolved using URN column  # noqa: E501

        :param resolve_prep_kits_by_name: The resolve_prep_kits_by_name of this ImportPlannedRunRequest.  # noqa: E501
        :type: bool
        """

        self._resolve_prep_kits_by_name = resolve_prep_kits_by_name

    @property
    def resolve_index_sequence_info(self):
        """Gets the resolve_index_sequence_info of this ImportPlannedRunRequest.  # noqa: E501

        If true, attempt to resolve index sequence info like Index Name and Position based on the index sequences  # noqa: E501

        :return: The resolve_index_sequence_info of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._resolve_index_sequence_info

    @resolve_index_sequence_info.setter
    def resolve_index_sequence_info(self, resolve_index_sequence_info):
        """Sets the resolve_index_sequence_info of this ImportPlannedRunRequest.

        If true, attempt to resolve index sequence info like Index Name and Position based on the index sequences  # noqa: E501

        :param resolve_index_sequence_info: The resolve_index_sequence_info of this ImportPlannedRunRequest.  # noqa: E501
        :type: bool
        """

        self._resolve_index_sequence_info = resolve_index_sequence_info

    @property
    def enable_warnings_for_missing_cloud_sections(self):
        """Gets the enable_warnings_for_missing_cloud_sections of this ImportPlannedRunRequest.  # noqa: E501

        Enable warnings if cloud sections are not provided  # noqa: E501

        :return: The enable_warnings_for_missing_cloud_sections of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_warnings_for_missing_cloud_sections

    @enable_warnings_for_missing_cloud_sections.setter
    def enable_warnings_for_missing_cloud_sections(self, enable_warnings_for_missing_cloud_sections):
        """Sets the enable_warnings_for_missing_cloud_sections of this ImportPlannedRunRequest.

        Enable warnings if cloud sections are not provided  # noqa: E501

        :param enable_warnings_for_missing_cloud_sections: The enable_warnings_for_missing_cloud_sections of this ImportPlannedRunRequest.  # noqa: E501
        :type: bool
        """

        self._enable_warnings_for_missing_cloud_sections = enable_warnings_for_missing_cloud_sections

    @property
    def default_kits(self):
        """Gets the default_kits of this ImportPlannedRunRequest.  # noqa: E501

        Default kits to be used during sample sheet parsing  # noqa: E501

        :return: The default_kits of this ImportPlannedRunRequest.  # noqa: E501
        :rtype: list[DefaultKit]
        """
        return self._default_kits

    @default_kits.setter
    def default_kits(self, default_kits):
        """Sets the default_kits of this ImportPlannedRunRequest.

        Default kits to be used during sample sheet parsing  # noqa: E501

        :param default_kits: The default_kits of this ImportPlannedRunRequest.  # noqa: E501
        :type: list[DefaultKit]
        """

        self._default_kits = default_kits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPlannedRunRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportPlannedRunRequest):
            return True

        return self.to_dict() != other.to_dict()
