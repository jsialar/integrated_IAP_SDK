# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RunVerificationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'overall_status': 'bool',
        'run_valid': 'ComponentVerificationResult',
        'can_activate_dragen': 'ComponentVerificationResult',
        'disk_space_available': 'ComponentVerificationResult',
        'external_connectivity': 'ComponentVerificationResult'
    }

    attribute_map = {
        'overall_status': 'overallStatus',
        'run_valid': 'runValid',
        'can_activate_dragen': 'canActivateDRAGEN',
        'disk_space_available': 'diskSpaceAvailable',
        'external_connectivity': 'externalConnectivity'
    }

    def __init__(self, overall_status=None, run_valid=None, can_activate_dragen=None, disk_space_available=None, external_connectivity=None, local_vars_configuration=None):  # noqa: E501
        """RunVerificationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._overall_status = None
        self._run_valid = None
        self._can_activate_dragen = None
        self._disk_space_available = None
        self._external_connectivity = None
        self.discriminator = None

        if overall_status is not None:
            self.overall_status = overall_status
        if run_valid is not None:
            self.run_valid = run_valid
        if can_activate_dragen is not None:
            self.can_activate_dragen = can_activate_dragen
        if disk_space_available is not None:
            self.disk_space_available = disk_space_available
        if external_connectivity is not None:
            self.external_connectivity = external_connectivity

    @property
    def overall_status(self):
        """Gets the overall_status of this RunVerificationResult.  # noqa: E501

        True if all checks passed  # noqa: E501

        :return: The overall_status of this RunVerificationResult.  # noqa: E501
        :rtype: bool
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this RunVerificationResult.

        True if all checks passed  # noqa: E501

        :param overall_status: The overall_status of this RunVerificationResult.  # noqa: E501
        :type: bool
        """

        self._overall_status = overall_status

    @property
    def run_valid(self):
        """Gets the run_valid of this RunVerificationResult.  # noqa: E501


        :return: The run_valid of this RunVerificationResult.  # noqa: E501
        :rtype: ComponentVerificationResult
        """
        return self._run_valid

    @run_valid.setter
    def run_valid(self, run_valid):
        """Sets the run_valid of this RunVerificationResult.


        :param run_valid: The run_valid of this RunVerificationResult.  # noqa: E501
        :type: ComponentVerificationResult
        """

        self._run_valid = run_valid

    @property
    def can_activate_dragen(self):
        """Gets the can_activate_dragen of this RunVerificationResult.  # noqa: E501


        :return: The can_activate_dragen of this RunVerificationResult.  # noqa: E501
        :rtype: ComponentVerificationResult
        """
        return self._can_activate_dragen

    @can_activate_dragen.setter
    def can_activate_dragen(self, can_activate_dragen):
        """Sets the can_activate_dragen of this RunVerificationResult.


        :param can_activate_dragen: The can_activate_dragen of this RunVerificationResult.  # noqa: E501
        :type: ComponentVerificationResult
        """

        self._can_activate_dragen = can_activate_dragen

    @property
    def disk_space_available(self):
        """Gets the disk_space_available of this RunVerificationResult.  # noqa: E501


        :return: The disk_space_available of this RunVerificationResult.  # noqa: E501
        :rtype: ComponentVerificationResult
        """
        return self._disk_space_available

    @disk_space_available.setter
    def disk_space_available(self, disk_space_available):
        """Sets the disk_space_available of this RunVerificationResult.


        :param disk_space_available: The disk_space_available of this RunVerificationResult.  # noqa: E501
        :type: ComponentVerificationResult
        """

        self._disk_space_available = disk_space_available

    @property
    def external_connectivity(self):
        """Gets the external_connectivity of this RunVerificationResult.  # noqa: E501


        :return: The external_connectivity of this RunVerificationResult.  # noqa: E501
        :rtype: ComponentVerificationResult
        """
        return self._external_connectivity

    @external_connectivity.setter
    def external_connectivity(self, external_connectivity):
        """Sets the external_connectivity of this RunVerificationResult.


        :param external_connectivity: The external_connectivity of this RunVerificationResult.  # noqa: E501
        :type: ComponentVerificationResult
        """

        self._external_connectivity = external_connectivity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunVerificationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunVerificationResult):
            return True

        return self.to_dict() != other.to_dict()
