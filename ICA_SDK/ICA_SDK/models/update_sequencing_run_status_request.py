# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateSequencingRunStatusRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'verification_status': 'str',
        'verification_status_summary': 'str',
        'instrument_run_status': 'str',
        'instrument_run_status_summary': 'str',
        'instrument_analysis_status': 'str',
        'instrument_analysis_status_summary': 'str',
        'upload_status_summary': 'str',
        'verification_progress': 'str',
        'instrument_progress': 'str',
        'sequencing_progress': 'str',
        'instrument_analysis_progress': 'str',
        'upload_progress': 'str',
        'failure_reason': 'str',
        'needs_attention': 'bool',
        'needs_attention_reason': 'str'
    }

    attribute_map = {
        'verification_status': 'verificationStatus',
        'verification_status_summary': 'verificationStatusSummary',
        'instrument_run_status': 'instrumentRunStatus',
        'instrument_run_status_summary': 'instrumentRunStatusSummary',
        'instrument_analysis_status': 'instrumentAnalysisStatus',
        'instrument_analysis_status_summary': 'instrumentAnalysisStatusSummary',
        'upload_status_summary': 'uploadStatusSummary',
        'verification_progress': 'verificationProgress',
        'instrument_progress': 'instrumentProgress',
        'sequencing_progress': 'sequencingProgress',
        'instrument_analysis_progress': 'instrumentAnalysisProgress',
        'upload_progress': 'uploadProgress',
        'failure_reason': 'failureReason',
        'needs_attention': 'needsAttention',
        'needs_attention_reason': 'needsAttentionReason'
    }

    def __init__(self, verification_status=None, verification_status_summary=None, instrument_run_status=None, instrument_run_status_summary=None, instrument_analysis_status=None, instrument_analysis_status_summary=None, upload_status_summary=None, verification_progress=None, instrument_progress=None, sequencing_progress=None, instrument_analysis_progress=None, upload_progress=None, failure_reason=None, needs_attention=None, needs_attention_reason=None, local_vars_configuration=None):  # noqa: E501
        """UpdateSequencingRunStatusRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._verification_status = None
        self._verification_status_summary = None
        self._instrument_run_status = None
        self._instrument_run_status_summary = None
        self._instrument_analysis_status = None
        self._instrument_analysis_status_summary = None
        self._upload_status_summary = None
        self._verification_progress = None
        self._instrument_progress = None
        self._sequencing_progress = None
        self._instrument_analysis_progress = None
        self._upload_progress = None
        self._failure_reason = None
        self._needs_attention = None
        self._needs_attention_reason = None
        self.discriminator = None

        if verification_status is not None:
            self.verification_status = verification_status
        if verification_status_summary is not None:
            self.verification_status_summary = verification_status_summary
        if instrument_run_status is not None:
            self.instrument_run_status = instrument_run_status
        if instrument_run_status_summary is not None:
            self.instrument_run_status_summary = instrument_run_status_summary
        if instrument_analysis_status is not None:
            self.instrument_analysis_status = instrument_analysis_status
        if instrument_analysis_status_summary is not None:
            self.instrument_analysis_status_summary = instrument_analysis_status_summary
        if upload_status_summary is not None:
            self.upload_status_summary = upload_status_summary
        if verification_progress is not None:
            self.verification_progress = verification_progress
        if instrument_progress is not None:
            self.instrument_progress = instrument_progress
        if sequencing_progress is not None:
            self.sequencing_progress = sequencing_progress
        if instrument_analysis_progress is not None:
            self.instrument_analysis_progress = instrument_analysis_progress
        if upload_progress is not None:
            self.upload_progress = upload_progress
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if needs_attention_reason is not None:
            self.needs_attention_reason = needs_attention_reason

    @property
    def verification_status(self):
        """Gets the verification_status of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Verification status updated while the stage is completing  # noqa: E501

        :return: The verification_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this UpdateSequencingRunStatusRequest.

        Verification status updated while the stage is completing  # noqa: E501

        :param verification_status: The verification_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                verification_status is not None and len(verification_status) > 40):
            raise ValueError("Invalid value for `verification_status`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verification_status is not None and len(verification_status) < 0):
            raise ValueError("Invalid value for `verification_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._verification_status = verification_status

    @property
    def verification_status_summary(self):
        """Gets the verification_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Detailed summary of verification status  # noqa: E501

        :return: The verification_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_status_summary

    @verification_status_summary.setter
    def verification_status_summary(self, verification_status_summary):
        """Sets the verification_status_summary of this UpdateSequencingRunStatusRequest.

        Detailed summary of verification status  # noqa: E501

        :param verification_status_summary: The verification_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                verification_status_summary is not None and len(verification_status_summary) > 255):
            raise ValueError("Invalid value for `verification_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verification_status_summary is not None and len(verification_status_summary) < 0):
            raise ValueError("Invalid value for `verification_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._verification_status_summary = verification_status_summary

    @property
    def instrument_run_status(self):
        """Gets the instrument_run_status of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Instrument run status updated by the instrument control software while the stage is completing  # noqa: E501

        :return: The instrument_run_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_status

    @instrument_run_status.setter
    def instrument_run_status(self, instrument_run_status):
        """Sets the instrument_run_status of this UpdateSequencingRunStatusRequest.

        Instrument run status updated by the instrument control software while the stage is completing  # noqa: E501

        :param instrument_run_status: The instrument_run_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                instrument_run_status is not None and len(instrument_run_status) > 40):
            raise ValueError("Invalid value for `instrument_run_status`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_run_status is not None and len(instrument_run_status) < 0):
            raise ValueError("Invalid value for `instrument_run_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._instrument_run_status = instrument_run_status

    @property
    def instrument_run_status_summary(self):
        """Gets the instrument_run_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Detailed summary of instrument run status provided by instrument  # noqa: E501

        :return: The instrument_run_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_run_status_summary

    @instrument_run_status_summary.setter
    def instrument_run_status_summary(self, instrument_run_status_summary):
        """Sets the instrument_run_status_summary of this UpdateSequencingRunStatusRequest.

        Detailed summary of instrument run status provided by instrument  # noqa: E501

        :param instrument_run_status_summary: The instrument_run_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                instrument_run_status_summary is not None and len(instrument_run_status_summary) > 255):
            raise ValueError("Invalid value for `instrument_run_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_run_status_summary is not None and len(instrument_run_status_summary) < 0):
            raise ValueError("Invalid value for `instrument_run_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._instrument_run_status_summary = instrument_run_status_summary

    @property
    def instrument_analysis_status(self):
        """Gets the instrument_analysis_status of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Instrument analysis status updated by the instrument control software while the stage is completing  # noqa: E501

        :return: The instrument_analysis_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_analysis_status

    @instrument_analysis_status.setter
    def instrument_analysis_status(self, instrument_analysis_status):
        """Sets the instrument_analysis_status of this UpdateSequencingRunStatusRequest.

        Instrument analysis status updated by the instrument control software while the stage is completing  # noqa: E501

        :param instrument_analysis_status: The instrument_analysis_status of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                instrument_analysis_status is not None and len(instrument_analysis_status) > 40):
            raise ValueError("Invalid value for `instrument_analysis_status`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_analysis_status is not None and len(instrument_analysis_status) < 0):
            raise ValueError("Invalid value for `instrument_analysis_status`, length must be greater than or equal to `0`")  # noqa: E501

        self._instrument_analysis_status = instrument_analysis_status

    @property
    def instrument_analysis_status_summary(self):
        """Gets the instrument_analysis_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Detailed summary of instrument analysis status provided by instrument  # noqa: E501

        :return: The instrument_analysis_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_analysis_status_summary

    @instrument_analysis_status_summary.setter
    def instrument_analysis_status_summary(self, instrument_analysis_status_summary):
        """Sets the instrument_analysis_status_summary of this UpdateSequencingRunStatusRequest.

        Detailed summary of instrument analysis status provided by instrument  # noqa: E501

        :param instrument_analysis_status_summary: The instrument_analysis_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                instrument_analysis_status_summary is not None and len(instrument_analysis_status_summary) > 255):
            raise ValueError("Invalid value for `instrument_analysis_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                instrument_analysis_status_summary is not None and len(instrument_analysis_status_summary) < 0):
            raise ValueError("Invalid value for `instrument_analysis_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._instrument_analysis_status_summary = instrument_analysis_status_summary

    @property
    def upload_status_summary(self):
        """Gets the upload_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Detailed summary of upload progress provided by instrument  # noqa: E501

        :return: The upload_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._upload_status_summary

    @upload_status_summary.setter
    def upload_status_summary(self, upload_status_summary):
        """Sets the upload_status_summary of this UpdateSequencingRunStatusRequest.

        Detailed summary of upload progress provided by instrument  # noqa: E501

        :param upload_status_summary: The upload_status_summary of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                upload_status_summary is not None and len(upload_status_summary) > 255):
            raise ValueError("Invalid value for `upload_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                upload_status_summary is not None and len(upload_status_summary) < 0):
            raise ValueError("Invalid value for `upload_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._upload_status_summary = upload_status_summary

    @property
    def verification_progress(self):
        """Gets the verification_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Progress of the verification stage  # noqa: E501

        :return: The verification_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._verification_progress

    @verification_progress.setter
    def verification_progress(self, verification_progress):
        """Sets the verification_progress of this UpdateSequencingRunStatusRequest.

        Progress of the verification stage  # noqa: E501

        :param verification_progress: The verification_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Started", "Completed", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and verification_progress not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `verification_progress` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_progress, allowed_values)
            )

        self._verification_progress = verification_progress

    @property
    def instrument_progress(self):
        """Gets the instrument_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Progress of the instrument stage  # noqa: E501

        :return: The instrument_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_progress

    @instrument_progress.setter
    def instrument_progress(self, instrument_progress):
        """Sets the instrument_progress of this UpdateSequencingRunStatusRequest.

        Progress of the instrument stage  # noqa: E501

        :param instrument_progress: The instrument_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Started", "Completed", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_progress not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_progress` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_progress, allowed_values)
            )

        self._instrument_progress = instrument_progress

    @property
    def sequencing_progress(self):
        """Gets the sequencing_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Progress of the sequencing stage  # noqa: E501

        :return: The sequencing_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._sequencing_progress

    @sequencing_progress.setter
    def sequencing_progress(self, sequencing_progress):
        """Sets the sequencing_progress of this UpdateSequencingRunStatusRequest.

        Progress of the sequencing stage  # noqa: E501

        :param sequencing_progress: The sequencing_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Started", "Completed", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sequencing_progress not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sequencing_progress` ({0}), must be one of {1}"  # noqa: E501
                .format(sequencing_progress, allowed_values)
            )

        self._sequencing_progress = sequencing_progress

    @property
    def instrument_analysis_progress(self):
        """Gets the instrument_analysis_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Progress of the instrument analysis stage  # noqa: E501

        :return: The instrument_analysis_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_analysis_progress

    @instrument_analysis_progress.setter
    def instrument_analysis_progress(self, instrument_analysis_progress):
        """Sets the instrument_analysis_progress of this UpdateSequencingRunStatusRequest.

        Progress of the instrument analysis stage  # noqa: E501

        :param instrument_analysis_progress: The instrument_analysis_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Started", "Completed", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and instrument_analysis_progress not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `instrument_analysis_progress` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_analysis_progress, allowed_values)
            )

        self._instrument_analysis_progress = instrument_analysis_progress

    @property
    def upload_progress(self):
        """Gets the upload_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Progress of the upload stage  # noqa: E501

        :return: The upload_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._upload_progress

    @upload_progress.setter
    def upload_progress(self, upload_progress):
        """Sets the upload_progress of this UpdateSequencingRunStatusRequest.

        Progress of the upload stage  # noqa: E501

        :param upload_progress: The upload_progress of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Started", "Completed", "Failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and upload_progress not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `upload_progress` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_progress, allowed_values)
            )

        self._upload_progress = upload_progress

    @property
    def failure_reason(self):
        """Gets the failure_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Reason for reported failure  # noqa: E501

        :return: The failure_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this UpdateSequencingRunStatusRequest.

        Reason for reported failure  # noqa: E501

        :param failure_reason: The failure_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                failure_reason is not None and len(failure_reason) > 8192):
            raise ValueError("Invalid value for `failure_reason`, length must be less than or equal to `8192`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                failure_reason is not None and len(failure_reason) < 0):
            raise ValueError("Invalid value for `failure_reason`, length must be greater than or equal to `0`")  # noqa: E501

        self._failure_reason = failure_reason

    @property
    def needs_attention(self):
        """Gets the needs_attention of this UpdateSequencingRunStatusRequest.  # noqa: E501

        True if the run should be marked as needing attention for user, false otherwise  # noqa: E501

        :return: The needs_attention of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this UpdateSequencingRunStatusRequest.

        True if the run should be marked as needing attention for user, false otherwise  # noqa: E501

        :param needs_attention: The needs_attention of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def needs_attention_reason(self):
        """Gets the needs_attention_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501

        Reason why the run needs attention  # noqa: E501

        :return: The needs_attention_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._needs_attention_reason

    @needs_attention_reason.setter
    def needs_attention_reason(self, needs_attention_reason):
        """Sets the needs_attention_reason of this UpdateSequencingRunStatusRequest.

        Reason why the run needs attention  # noqa: E501

        :param needs_attention_reason: The needs_attention_reason of this UpdateSequencingRunStatusRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                needs_attention_reason is not None and len(needs_attention_reason) > 255):
            raise ValueError("Invalid value for `needs_attention_reason`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                needs_attention_reason is not None and len(needs_attention_reason) < 0):
            raise ValueError("Invalid value for `needs_attention_reason`, length must be greater than or equal to `0`")  # noqa: E501

        self._needs_attention_reason = needs_attention_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSequencingRunStatusRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSequencingRunStatusRequest):
            return True

        return self.to_dict() != other.to_dict()
