# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class SequencingAnalysisRunCompact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'urn': 'str',
        'href': 'str',
        'name': 'str',
        'status': 'str',
        'status_summary': 'str',
        'workflow_run_id': 'str',
        'workflow_version_name': 'str',
        'workflow_version_id': 'str',
        'analysis_data_folder_urn': 'str',
        'analysis_data_volume_urn': 'str',
        'analysis_data_folder_volume_path': 'str',
        'external_id': 'str',
        'sequencing_run': 'SequencingRunCompact',
        'needs_attention': 'bool',
        'needs_attention_reason': 'str',
        'can_abort': 'bool',
        'is_active': 'bool',
        'sub_tenant_id': 'str',
        'acl': 'list[str]',
        'tenant_id': 'str',
        'tenant_name': 'str',
        'created_by_client_id': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'time_created': 'datetime',
        'time_modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'urn': 'urn',
        'href': 'href',
        'name': 'name',
        'status': 'status',
        'status_summary': 'statusSummary',
        'workflow_run_id': 'workflowRunId',
        'workflow_version_name': 'workflowVersionName',
        'workflow_version_id': 'workflowVersionId',
        'analysis_data_folder_urn': 'analysisDataFolderUrn',
        'analysis_data_volume_urn': 'analysisDataVolumeUrn',
        'analysis_data_folder_volume_path': 'analysisDataFolderVolumePath',
        'external_id': 'externalId',
        'sequencing_run': 'sequencingRun',
        'needs_attention': 'needsAttention',
        'needs_attention_reason': 'needsAttentionReason',
        'can_abort': 'canAbort',
        'is_active': 'isActive',
        'sub_tenant_id': 'subTenantId',
        'acl': 'acl',
        'tenant_id': 'tenantId',
        'tenant_name': 'tenantName',
        'created_by_client_id': 'createdByClientId',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'time_created': 'timeCreated',
        'time_modified': 'timeModified'
    }

    def __init__(self, id=None, urn=None, href=None, name=None, status=None, status_summary=None, workflow_run_id=None, workflow_version_name=None, workflow_version_id=None, analysis_data_folder_urn=None, analysis_data_volume_urn=None, analysis_data_folder_volume_path=None, external_id=None, sequencing_run=None, needs_attention=None, needs_attention_reason=None, can_abort=None, is_active=None, sub_tenant_id=None, acl=None, tenant_id=None, tenant_name=None, created_by_client_id=None, created_by=None, modified_by=None, time_created=None, time_modified=None, local_vars_configuration=None):  # noqa: E501
        """SequencingAnalysisRunCompact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._urn = None
        self._href = None
        self._name = None
        self._status = None
        self._status_summary = None
        self._workflow_run_id = None
        self._workflow_version_name = None
        self._workflow_version_id = None
        self._analysis_data_folder_urn = None
        self._analysis_data_volume_urn = None
        self._analysis_data_folder_volume_path = None
        self._external_id = None
        self._sequencing_run = None
        self._needs_attention = None
        self._needs_attention_reason = None
        self._can_abort = None
        self._is_active = None
        self._sub_tenant_id = None
        self._acl = None
        self._tenant_id = None
        self._tenant_name = None
        self._created_by_client_id = None
        self._created_by = None
        self._modified_by = None
        self._time_created = None
        self._time_modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if urn is not None:
            self.urn = urn
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if status_summary is not None:
            self.status_summary = status_summary
        if workflow_run_id is not None:
            self.workflow_run_id = workflow_run_id
        if workflow_version_name is not None:
            self.workflow_version_name = workflow_version_name
        if workflow_version_id is not None:
            self.workflow_version_id = workflow_version_id
        if analysis_data_folder_urn is not None:
            self.analysis_data_folder_urn = analysis_data_folder_urn
        if analysis_data_volume_urn is not None:
            self.analysis_data_volume_urn = analysis_data_volume_urn
        if analysis_data_folder_volume_path is not None:
            self.analysis_data_folder_volume_path = analysis_data_folder_volume_path
        if external_id is not None:
            self.external_id = external_id
        if sequencing_run is not None:
            self.sequencing_run = sequencing_run
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if needs_attention_reason is not None:
            self.needs_attention_reason = needs_attention_reason
        if can_abort is not None:
            self.can_abort = can_abort
        if is_active is not None:
            self.is_active = is_active
        if sub_tenant_id is not None:
            self.sub_tenant_id = sub_tenant_id
        if acl is not None:
            self.acl = acl
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if created_by_client_id is not None:
            self.created_by_client_id = created_by_client_id
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if time_created is not None:
            self.time_created = time_created
        if time_modified is not None:
            self.time_modified = time_modified

    @property
    def id(self):
        """Gets the id of this SequencingAnalysisRunCompact.  # noqa: E501

        Unique object ID  # noqa: E501

        :return: The id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SequencingAnalysisRunCompact.

        Unique object ID  # noqa: E501

        :param id: The id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def urn(self):
        """Gets the urn of this SequencingAnalysisRunCompact.  # noqa: E501

        URN of the object  # noqa: E501

        :return: The urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this SequencingAnalysisRunCompact.

        URN of the object  # noqa: E501

        :param urn: The urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def href(self):
        """Gets the href of this SequencingAnalysisRunCompact.  # noqa: E501

        HREF to the object  # noqa: E501

        :return: The href of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SequencingAnalysisRunCompact.

        HREF to the object  # noqa: E501

        :param href: The href of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this SequencingAnalysisRunCompact.  # noqa: E501

        Name of the sequencing analysis run  # noqa: E501

        :return: The name of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SequencingAnalysisRunCompact.

        Name of the sequencing analysis run  # noqa: E501

        :param name: The name of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this SequencingAnalysisRunCompact.  # noqa: E501

        Status of the sequencing analysis run  # noqa: E501

        :return: The status of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SequencingAnalysisRunCompact.

        Status of the sequencing analysis run  # noqa: E501

        :param status: The status of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_summary(self):
        """Gets the status_summary of this SequencingAnalysisRunCompact.  # noqa: E501

        Summary of the status associated with the analysis run  # noqa: E501

        :return: The status_summary of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._status_summary

    @status_summary.setter
    def status_summary(self, status_summary):
        """Sets the status_summary of this SequencingAnalysisRunCompact.

        Summary of the status associated with the analysis run  # noqa: E501

        :param status_summary: The status_summary of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._status_summary = status_summary

    @property
    def workflow_run_id(self):
        """Gets the workflow_run_id of this SequencingAnalysisRunCompact.  # noqa: E501

        Id of the associated WorkflowRun of the sequencing analysis run on WES  # noqa: E501

        :return: The workflow_run_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._workflow_run_id

    @workflow_run_id.setter
    def workflow_run_id(self, workflow_run_id):
        """Sets the workflow_run_id of this SequencingAnalysisRunCompact.

        Id of the associated WorkflowRun of the sequencing analysis run on WES  # noqa: E501

        :param workflow_run_id: The workflow_run_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._workflow_run_id = workflow_run_id

    @property
    def workflow_version_name(self):
        """Gets the workflow_version_name of this SequencingAnalysisRunCompact.  # noqa: E501

        The name of the associated WorkflowVersion of the sequencing analysis run on WES  # noqa: E501

        :return: The workflow_version_name of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._workflow_version_name

    @workflow_version_name.setter
    def workflow_version_name(self, workflow_version_name):
        """Sets the workflow_version_name of this SequencingAnalysisRunCompact.

        The name of the associated WorkflowVersion of the sequencing analysis run on WES  # noqa: E501

        :param workflow_version_name: The workflow_version_name of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._workflow_version_name = workflow_version_name

    @property
    def workflow_version_id(self):
        """Gets the workflow_version_id of this SequencingAnalysisRunCompact.  # noqa: E501

        The id of the associated WorkflowVersion of the sequencing analysis run on WES  # noqa: E501

        :return: The workflow_version_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._workflow_version_id

    @workflow_version_id.setter
    def workflow_version_id(self, workflow_version_id):
        """Sets the workflow_version_id of this SequencingAnalysisRunCompact.

        The id of the associated WorkflowVersion of the sequencing analysis run on WES  # noqa: E501

        :param workflow_version_id: The workflow_version_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._workflow_version_id = workflow_version_id

    @property
    def analysis_data_folder_urn(self):
        """Gets the analysis_data_folder_urn of this SequencingAnalysisRunCompact.  # noqa: E501

        Urn of AnalysisDataFolder of the sequencing analysis run on GDS  # noqa: E501

        :return: The analysis_data_folder_urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._analysis_data_folder_urn

    @analysis_data_folder_urn.setter
    def analysis_data_folder_urn(self, analysis_data_folder_urn):
        """Sets the analysis_data_folder_urn of this SequencingAnalysisRunCompact.

        Urn of AnalysisDataFolder of the sequencing analysis run on GDS  # noqa: E501

        :param analysis_data_folder_urn: The analysis_data_folder_urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._analysis_data_folder_urn = analysis_data_folder_urn

    @property
    def analysis_data_volume_urn(self):
        """Gets the analysis_data_volume_urn of this SequencingAnalysisRunCompact.  # noqa: E501

        Urn of AnalysisDataVolume of the sequencing analysis run on GDS  # noqa: E501

        :return: The analysis_data_volume_urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._analysis_data_volume_urn

    @analysis_data_volume_urn.setter
    def analysis_data_volume_urn(self, analysis_data_volume_urn):
        """Sets the analysis_data_volume_urn of this SequencingAnalysisRunCompact.

        Urn of AnalysisDataVolume of the sequencing analysis run on GDS  # noqa: E501

        :param analysis_data_volume_urn: The analysis_data_volume_urn of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._analysis_data_volume_urn = analysis_data_volume_urn

    @property
    def analysis_data_folder_volume_path(self):
        """Gets the analysis_data_folder_volume_path of this SequencingAnalysisRunCompact.  # noqa: E501

        Combination of GDS volume and path of AnalysisDataFolder of the sequencing analysis run  # noqa: E501

        :return: The analysis_data_folder_volume_path of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._analysis_data_folder_volume_path

    @analysis_data_folder_volume_path.setter
    def analysis_data_folder_volume_path(self, analysis_data_folder_volume_path):
        """Sets the analysis_data_folder_volume_path of this SequencingAnalysisRunCompact.

        Combination of GDS volume and path of AnalysisDataFolder of the sequencing analysis run  # noqa: E501

        :param analysis_data_folder_volume_path: The analysis_data_folder_volume_path of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._analysis_data_folder_volume_path = analysis_data_folder_volume_path

    @property
    def external_id(self):
        """Gets the external_id of this SequencingAnalysisRunCompact.  # noqa: E501

        External ID of the sequencing analysis run  # noqa: E501

        :return: The external_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SequencingAnalysisRunCompact.

        External ID of the sequencing analysis run  # noqa: E501

        :param external_id: The external_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def sequencing_run(self):
        """Gets the sequencing_run of this SequencingAnalysisRunCompact.  # noqa: E501


        :return: The sequencing_run of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: SequencingRunCompact
        """
        return self._sequencing_run

    @sequencing_run.setter
    def sequencing_run(self, sequencing_run):
        """Sets the sequencing_run of this SequencingAnalysisRunCompact.


        :param sequencing_run: The sequencing_run of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: SequencingRunCompact
        """

        self._sequencing_run = sequencing_run

    @property
    def needs_attention(self):
        """Gets the needs_attention of this SequencingAnalysisRunCompact.  # noqa: E501

        Indicates with value 'true' if the analysis run needs attention  # noqa: E501

        :return: The needs_attention of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this SequencingAnalysisRunCompact.

        Indicates with value 'true' if the analysis run needs attention  # noqa: E501

        :param needs_attention: The needs_attention of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def needs_attention_reason(self):
        """Gets the needs_attention_reason of this SequencingAnalysisRunCompact.  # noqa: E501

        Detail reason why the analysis run needs attention  # noqa: E501

        :return: The needs_attention_reason of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._needs_attention_reason

    @needs_attention_reason.setter
    def needs_attention_reason(self, needs_attention_reason):
        """Sets the needs_attention_reason of this SequencingAnalysisRunCompact.

        Detail reason why the analysis run needs attention  # noqa: E501

        :param needs_attention_reason: The needs_attention_reason of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._needs_attention_reason = needs_attention_reason

    @property
    def can_abort(self):
        """Gets the can_abort of this SequencingAnalysisRunCompact.  # noqa: E501

        Indicates whether the analysis run can be aborted or not  # noqa: E501

        :return: The can_abort of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._can_abort

    @can_abort.setter
    def can_abort(self, can_abort):
        """Sets the can_abort of this SequencingAnalysisRunCompact.

        Indicates whether the analysis run can be aborted or not  # noqa: E501

        :param can_abort: The can_abort of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: bool
        """

        self._can_abort = can_abort

    @property
    def is_active(self):
        """Gets the is_active of this SequencingAnalysisRunCompact.  # noqa: E501

        Indicates whether the analysis run is active or not  # noqa: E501

        :return: The is_active of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SequencingAnalysisRunCompact.

        Indicates whether the analysis run is active or not  # noqa: E501

        :param is_active: The is_active of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def sub_tenant_id(self):
        """Gets the sub_tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :return: The sub_tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._sub_tenant_id

    @sub_tenant_id.setter
    def sub_tenant_id(self, sub_tenant_id):
        """Sets the sub_tenant_id of this SequencingAnalysisRunCompact.

        Organizational or Workgroup ID. If neither are present, User ID.  # noqa: E501

        :param sub_tenant_id: The sub_tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._sub_tenant_id = sub_tenant_id

    @property
    def acl(self):
        """Gets the acl of this SequencingAnalysisRunCompact.  # noqa: E501

        Access control list of the object  # noqa: E501

        :return: The acl of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this SequencingAnalysisRunCompact.

        Access control list of the object  # noqa: E501

        :param acl: The acl of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501

        Unique identifier for the resource tenant  # noqa: E501

        :return: The tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SequencingAnalysisRunCompact.

        Unique identifier for the resource tenant  # noqa: E501

        :param tenant_id: The tenant_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this SequencingAnalysisRunCompact.  # noqa: E501

        Unique tenant name for the resource tenant  # noqa: E501

        :return: The tenant_name of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this SequencingAnalysisRunCompact.

        Unique tenant name for the resource tenant  # noqa: E501

        :param tenant_name: The tenant_name of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def created_by_client_id(self):
        """Gets the created_by_client_id of this SequencingAnalysisRunCompact.  # noqa: E501

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :return: The created_by_client_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._created_by_client_id

    @created_by_client_id.setter
    def created_by_client_id(self, created_by_client_id):
        """Sets the created_by_client_id of this SequencingAnalysisRunCompact.

        ClientId that created the resource (bssh, stratus...)  # noqa: E501

        :param created_by_client_id: The created_by_client_id of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._created_by_client_id = created_by_client_id

    @property
    def created_by(self):
        """Gets the created_by of this SequencingAnalysisRunCompact.  # noqa: E501

        User that created the resource  # noqa: E501

        :return: The created_by of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SequencingAnalysisRunCompact.

        User that created the resource  # noqa: E501

        :param created_by: The created_by of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this SequencingAnalysisRunCompact.  # noqa: E501

        User that last modified the resource  # noqa: E501

        :return: The modified_by of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SequencingAnalysisRunCompact.

        User that last modified the resource  # noqa: E501

        :param modified_by: The modified_by of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def time_created(self):
        """Gets the time_created of this SequencingAnalysisRunCompact.  # noqa: E501

        Time (in UTC) the resource was created  # noqa: E501

        :return: The time_created of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this SequencingAnalysisRunCompact.

        Time (in UTC) the resource was created  # noqa: E501

        :param time_created: The time_created of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def time_modified(self):
        """Gets the time_modified of this SequencingAnalysisRunCompact.  # noqa: E501

        Time (in UTC) the resource was modified  # noqa: E501

        :return: The time_modified of this SequencingAnalysisRunCompact.  # noqa: E501
        :rtype: datetime
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this SequencingAnalysisRunCompact.

        Time (in UTC) the resource was modified  # noqa: E501

        :param time_modified: The time_modified of this SequencingAnalysisRunCompact.  # noqa: E501
        :type: datetime
        """

        self._time_modified = time_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequencingAnalysisRunCompact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequencingAnalysisRunCompact):
            return True

        return self.to_dict() != other.to_dict()
