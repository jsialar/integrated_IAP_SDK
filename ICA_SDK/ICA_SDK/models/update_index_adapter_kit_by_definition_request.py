# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class UpdateIndexAdapterKitByDefinitionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'definition_format': 'str',
        'definition': 'str',
        'force': 'bool',
        'skip_index_diversity_validation': 'bool'
    }

    attribute_map = {
        'definition_format': 'definitionFormat',
        'definition': 'definition',
        'force': 'force',
        'skip_index_diversity_validation': 'skipIndexDiversityValidation'
    }

    def __init__(self, definition_format=None, definition=None, force=None, skip_index_diversity_validation=None, local_vars_configuration=None):  # noqa: E501
        """UpdateIndexAdapterKitByDefinitionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._definition_format = None
        self._definition = None
        self._force = None
        self._skip_index_diversity_validation = None
        self.discriminator = None

        if definition_format is not None:
            self.definition_format = definition_format
        self.definition = definition
        if force is not None:
            self.force = force
        if skip_index_diversity_validation is not None:
            self.skip_index_diversity_validation = skip_index_diversity_validation

    @property
    def definition_format(self):
        """Gets the definition_format of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501

        The format for Definition (e.g. yaml)  # noqa: E501

        :return: The definition_format of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._definition_format

    @definition_format.setter
    def definition_format(self, definition_format):
        """Sets the definition_format of this UpdateIndexAdapterKitByDefinitionRequest.

        The format for Definition (e.g. yaml)  # noqa: E501

        :param definition_format: The definition_format of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yaml", "Tsv"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and definition_format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `definition_format` ({0}), must be one of {1}"  # noqa: E501
                .format(definition_format, allowed_values)
            )

        self._definition_format = definition_format

    @property
    def definition(self):
        """Gets the definition of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501

        The kit definition in the specified DefinitionFormat  # noqa: E501

        :return: The definition of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this UpdateIndexAdapterKitByDefinitionRequest.

        The kit definition in the specified DefinitionFormat  # noqa: E501

        :param definition: The definition of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and definition is None:  # noqa: E501
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def force(self):
        """Gets the force of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501

        Set to true to force update even when the kit is in use  # noqa: E501

        :return: The force of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UpdateIndexAdapterKitByDefinitionRequest.

        Set to true to force update even when the kit is in use  # noqa: E501

        :param force: The force of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def skip_index_diversity_validation(self):
        """Gets the skip_index_diversity_validation of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501

        Flag to skip index diversity validation  # noqa: E501

        :return: The skip_index_diversity_validation of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_index_diversity_validation

    @skip_index_diversity_validation.setter
    def skip_index_diversity_validation(self, skip_index_diversity_validation):
        """Sets the skip_index_diversity_validation of this UpdateIndexAdapterKitByDefinitionRequest.

        Flag to skip index diversity validation  # noqa: E501

        :param skip_index_diversity_validation: The skip_index_diversity_validation of this UpdateIndexAdapterKitByDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._skip_index_diversity_validation = skip_index_diversity_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateIndexAdapterKitByDefinitionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateIndexAdapterKitByDefinitionRequest):
            return True

        return self.to_dict() != other.to_dict()
