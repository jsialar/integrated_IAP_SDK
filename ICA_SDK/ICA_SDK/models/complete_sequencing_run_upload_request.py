# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class CompleteSequencingRunUploadRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_upload_status_summary': 'str',
        'session_id': 'str',
        'expected_session_file_count': 'int'
    }

    attribute_map = {
        'run_upload_status_summary': 'runUploadStatusSummary',
        'session_id': 'sessionId',
        'expected_session_file_count': 'expectedSessionFileCount'
    }

    def __init__(self, run_upload_status_summary=None, session_id=None, expected_session_file_count=None, local_vars_configuration=None):  # noqa: E501
        """CompleteSequencingRunUploadRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_upload_status_summary = None
        self._session_id = None
        self._expected_session_file_count = None
        self.discriminator = None

        if run_upload_status_summary is not None:
            self.run_upload_status_summary = run_upload_status_summary
        if session_id is not None:
            self.session_id = session_id
        if expected_session_file_count is not None:
            self.expected_session_file_count = expected_session_file_count

    @property
    def run_upload_status_summary(self):
        """Gets the run_upload_status_summary of this CompleteSequencingRunUploadRequest.  # noqa: E501

        Detailed summary of run upload status/progress  # noqa: E501

        :return: The run_upload_status_summary of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._run_upload_status_summary

    @run_upload_status_summary.setter
    def run_upload_status_summary(self, run_upload_status_summary):
        """Sets the run_upload_status_summary of this CompleteSequencingRunUploadRequest.

        Detailed summary of run upload status/progress  # noqa: E501

        :param run_upload_status_summary: The run_upload_status_summary of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                run_upload_status_summary is not None and len(run_upload_status_summary) > 255):
            raise ValueError("Invalid value for `run_upload_status_summary`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                run_upload_status_summary is not None and len(run_upload_status_summary) < 0):
            raise ValueError("Invalid value for `run_upload_status_summary`, length must be greater than or equal to `0`")  # noqa: E501

        self._run_upload_status_summary = run_upload_status_summary

    @property
    def session_id(self):
        """Gets the session_id of this CompleteSequencingRunUploadRequest.  # noqa: E501

        Optional ID of folder upload session  # noqa: E501

        :return: The session_id of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CompleteSequencingRunUploadRequest.

        Optional ID of folder upload session  # noqa: E501

        :param session_id: The session_id of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                session_id is not None and len(session_id) > 255):
            raise ValueError("Invalid value for `session_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                session_id is not None and len(session_id) < 0):
            raise ValueError("Invalid value for `session_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._session_id = session_id

    @property
    def expected_session_file_count(self):
        """Gets the expected_session_file_count of this CompleteSequencingRunUploadRequest.  # noqa: E501

        Optional Expected number of files uploaded  # noqa: E501

        :return: The expected_session_file_count of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :rtype: int
        """
        return self._expected_session_file_count

    @expected_session_file_count.setter
    def expected_session_file_count(self, expected_session_file_count):
        """Sets the expected_session_file_count of this CompleteSequencingRunUploadRequest.

        Optional Expected number of files uploaded  # noqa: E501

        :param expected_session_file_count: The expected_session_file_count of this CompleteSequencingRunUploadRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                expected_session_file_count is not None and expected_session_file_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `expected_session_file_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expected_session_file_count is not None and expected_session_file_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `expected_session_file_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expected_session_file_count = expected_session_file_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompleteSequencingRunUploadRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompleteSequencingRunUploadRequest):
            return True

        return self.to_dict() != other.to_dict()
