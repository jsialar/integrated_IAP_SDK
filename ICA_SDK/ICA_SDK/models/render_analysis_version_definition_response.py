# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class RenderAnalysisVersionDefinitionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'validation_errors': 'list[RenderMessage]',
        'validation_warnings': 'list[RenderMessage]',
        'analysis_version_definition': 'AnalysisVersionDefinitionCompact',
        'run_analysis_configuration': 'CreateSequencingRunAnalysisConfigurationRequest',
        'changed_setting_ids': 'list[str]',
        'changed_setting_value_ids': 'list[str]',
        'changed_sample_setting_ids': 'list[str]',
        'changed_sample_setting_value_ids': 'object'
    }

    attribute_map = {
        'validation_errors': 'validationErrors',
        'validation_warnings': 'validationWarnings',
        'analysis_version_definition': 'analysisVersionDefinition',
        'run_analysis_configuration': 'runAnalysisConfiguration',
        'changed_setting_ids': 'changedSettingIds',
        'changed_setting_value_ids': 'changedSettingValueIds',
        'changed_sample_setting_ids': 'changedSampleSettingIds',
        'changed_sample_setting_value_ids': 'changedSampleSettingValueIds'
    }

    def __init__(self, validation_errors=None, validation_warnings=None, analysis_version_definition=None, run_analysis_configuration=None, changed_setting_ids=None, changed_setting_value_ids=None, changed_sample_setting_ids=None, changed_sample_setting_value_ids=None, local_vars_configuration=None):  # noqa: E501
        """RenderAnalysisVersionDefinitionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._validation_errors = None
        self._validation_warnings = None
        self._analysis_version_definition = None
        self._run_analysis_configuration = None
        self._changed_setting_ids = None
        self._changed_setting_value_ids = None
        self._changed_sample_setting_ids = None
        self._changed_sample_setting_value_ids = None
        self.discriminator = None

        if validation_errors is not None:
            self.validation_errors = validation_errors
        if validation_warnings is not None:
            self.validation_warnings = validation_warnings
        if analysis_version_definition is not None:
            self.analysis_version_definition = analysis_version_definition
        if run_analysis_configuration is not None:
            self.run_analysis_configuration = run_analysis_configuration
        if changed_setting_ids is not None:
            self.changed_setting_ids = changed_setting_ids
        if changed_setting_value_ids is not None:
            self.changed_setting_value_ids = changed_setting_value_ids
        if changed_sample_setting_ids is not None:
            self.changed_sample_setting_ids = changed_sample_setting_ids
        if changed_sample_setting_value_ids is not None:
            self.changed_sample_setting_value_ids = changed_sample_setting_value_ids

    @property
    def validation_errors(self):
        """Gets the validation_errors of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        List of rendered message with errors  # noqa: E501

        :return: The validation_errors of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: list[RenderMessage]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this RenderAnalysisVersionDefinitionResponse.

        List of rendered message with errors  # noqa: E501

        :param validation_errors: The validation_errors of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: list[RenderMessage]
        """

        self._validation_errors = validation_errors

    @property
    def validation_warnings(self):
        """Gets the validation_warnings of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        List of rendered message with warnings  # noqa: E501

        :return: The validation_warnings of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: list[RenderMessage]
        """
        return self._validation_warnings

    @validation_warnings.setter
    def validation_warnings(self, validation_warnings):
        """Sets the validation_warnings of this RenderAnalysisVersionDefinitionResponse.

        List of rendered message with warnings  # noqa: E501

        :param validation_warnings: The validation_warnings of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: list[RenderMessage]
        """

        self._validation_warnings = validation_warnings

    @property
    def analysis_version_definition(self):
        """Gets the analysis_version_definition of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501


        :return: The analysis_version_definition of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: AnalysisVersionDefinitionCompact
        """
        return self._analysis_version_definition

    @analysis_version_definition.setter
    def analysis_version_definition(self, analysis_version_definition):
        """Sets the analysis_version_definition of this RenderAnalysisVersionDefinitionResponse.


        :param analysis_version_definition: The analysis_version_definition of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: AnalysisVersionDefinitionCompact
        """

        self._analysis_version_definition = analysis_version_definition

    @property
    def run_analysis_configuration(self):
        """Gets the run_analysis_configuration of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501


        :return: The run_analysis_configuration of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: CreateSequencingRunAnalysisConfigurationRequest
        """
        return self._run_analysis_configuration

    @run_analysis_configuration.setter
    def run_analysis_configuration(self, run_analysis_configuration):
        """Sets the run_analysis_configuration of this RenderAnalysisVersionDefinitionResponse.


        :param run_analysis_configuration: The run_analysis_configuration of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: CreateSequencingRunAnalysisConfigurationRequest
        """

        self._run_analysis_configuration = run_analysis_configuration

    @property
    def changed_setting_ids(self):
        """Gets the changed_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        List of changed ids of analysis version definition settings  # noqa: E501

        :return: The changed_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._changed_setting_ids

    @changed_setting_ids.setter
    def changed_setting_ids(self, changed_setting_ids):
        """Sets the changed_setting_ids of this RenderAnalysisVersionDefinitionResponse.

        List of changed ids of analysis version definition settings  # noqa: E501

        :param changed_setting_ids: The changed_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: list[str]
        """

        self._changed_setting_ids = changed_setting_ids

    @property
    def changed_setting_value_ids(self):
        """Gets the changed_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        List of changed ids of run analysis configuration setting values  # noqa: E501

        :return: The changed_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._changed_setting_value_ids

    @changed_setting_value_ids.setter
    def changed_setting_value_ids(self, changed_setting_value_ids):
        """Sets the changed_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.

        List of changed ids of run analysis configuration setting values  # noqa: E501

        :param changed_setting_value_ids: The changed_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: list[str]
        """

        self._changed_setting_value_ids = changed_setting_value_ids

    @property
    def changed_sample_setting_ids(self):
        """Gets the changed_sample_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        List of changed ids of analysis version definition sample settings  # noqa: E501

        :return: The changed_sample_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._changed_sample_setting_ids

    @changed_sample_setting_ids.setter
    def changed_sample_setting_ids(self, changed_sample_setting_ids):
        """Sets the changed_sample_setting_ids of this RenderAnalysisVersionDefinitionResponse.

        List of changed ids of analysis version definition sample settings  # noqa: E501

        :param changed_sample_setting_ids: The changed_sample_setting_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: list[str]
        """

        self._changed_sample_setting_ids = changed_sample_setting_ids

    @property
    def changed_sample_setting_value_ids(self):
        """Gets the changed_sample_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501

        Array of samples with list of changed sample setting value ids  # noqa: E501

        :return: The changed_sample_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :rtype: object
        """
        return self._changed_sample_setting_value_ids

    @changed_sample_setting_value_ids.setter
    def changed_sample_setting_value_ids(self, changed_sample_setting_value_ids):
        """Sets the changed_sample_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.

        Array of samples with list of changed sample setting value ids  # noqa: E501

        :param changed_sample_setting_value_ids: The changed_sample_setting_value_ids of this RenderAnalysisVersionDefinitionResponse.  # noqa: E501
        :type: object
        """

        self._changed_sample_setting_value_ids = changed_sample_setting_value_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenderAnalysisVersionDefinitionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RenderAnalysisVersionDefinitionResponse):
            return True

        return self.to_dict() != other.to_dict()
