# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ICA_SDK.configuration import Configuration


class MultiAnalysisConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_cloud_analyses': 'int',
        'max_cloud_total_physical_configurations': 'int',
        'max_cloud_total_logical_configurations': 'int',
        'max_cloud_logical_configurations_per_physical': 'int',
        'max_local_analyses': 'int',
        'max_local_total_physical_configurations': 'int',
        'max_local_total_logical_configurations': 'int',
        'max_local_logical_configurations_per_physical': 'int'
    }

    attribute_map = {
        'max_cloud_analyses': 'maxCloudAnalyses',
        'max_cloud_total_physical_configurations': 'maxCloudTotalPhysicalConfigurations',
        'max_cloud_total_logical_configurations': 'maxCloudTotalLogicalConfigurations',
        'max_cloud_logical_configurations_per_physical': 'maxCloudLogicalConfigurationsPerPhysical',
        'max_local_analyses': 'maxLocalAnalyses',
        'max_local_total_physical_configurations': 'maxLocalTotalPhysicalConfigurations',
        'max_local_total_logical_configurations': 'maxLocalTotalLogicalConfigurations',
        'max_local_logical_configurations_per_physical': 'maxLocalLogicalConfigurationsPerPhysical'
    }

    def __init__(self, max_cloud_analyses=None, max_cloud_total_physical_configurations=None, max_cloud_total_logical_configurations=None, max_cloud_logical_configurations_per_physical=None, max_local_analyses=None, max_local_total_physical_configurations=None, max_local_total_logical_configurations=None, max_local_logical_configurations_per_physical=None, local_vars_configuration=None):  # noqa: E501
        """MultiAnalysisConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_cloud_analyses = None
        self._max_cloud_total_physical_configurations = None
        self._max_cloud_total_logical_configurations = None
        self._max_cloud_logical_configurations_per_physical = None
        self._max_local_analyses = None
        self._max_local_total_physical_configurations = None
        self._max_local_total_logical_configurations = None
        self._max_local_logical_configurations_per_physical = None
        self.discriminator = None

        if max_cloud_analyses is not None:
            self.max_cloud_analyses = max_cloud_analyses
        if max_cloud_total_physical_configurations is not None:
            self.max_cloud_total_physical_configurations = max_cloud_total_physical_configurations
        if max_cloud_total_logical_configurations is not None:
            self.max_cloud_total_logical_configurations = max_cloud_total_logical_configurations
        if max_cloud_logical_configurations_per_physical is not None:
            self.max_cloud_logical_configurations_per_physical = max_cloud_logical_configurations_per_physical
        if max_local_analyses is not None:
            self.max_local_analyses = max_local_analyses
        if max_local_total_physical_configurations is not None:
            self.max_local_total_physical_configurations = max_local_total_physical_configurations
        if max_local_total_logical_configurations is not None:
            self.max_local_total_logical_configurations = max_local_total_logical_configurations
        if max_local_logical_configurations_per_physical is not None:
            self.max_local_logical_configurations_per_physical = max_local_logical_configurations_per_physical

    @property
    def max_cloud_analyses(self):
        """Gets the max_cloud_analyses of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum number of distinct analysis+version for COCA  # noqa: E501

        :return: The max_cloud_analyses of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_cloud_analyses

    @max_cloud_analyses.setter
    def max_cloud_analyses(self, max_cloud_analyses):
        """Sets the max_cloud_analyses of this MultiAnalysisConfiguration.

        Maximum number of distinct analysis+version for COCA  # noqa: E501

        :param max_cloud_analyses: The max_cloud_analyses of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_cloud_analyses = max_cloud_analyses

    @property
    def max_cloud_total_physical_configurations(self):
        """Gets the max_cloud_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of physical configurations  # noqa: E501

        :return: The max_cloud_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_cloud_total_physical_configurations

    @max_cloud_total_physical_configurations.setter
    def max_cloud_total_physical_configurations(self, max_cloud_total_physical_configurations):
        """Sets the max_cloud_total_physical_configurations of this MultiAnalysisConfiguration.

        Maximum total number of physical configurations  # noqa: E501

        :param max_cloud_total_physical_configurations: The max_cloud_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_cloud_total_physical_configurations = max_cloud_total_physical_configurations

    @property
    def max_cloud_total_logical_configurations(self):
        """Gets the max_cloud_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of logical configurations  # noqa: E501

        :return: The max_cloud_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_cloud_total_logical_configurations

    @max_cloud_total_logical_configurations.setter
    def max_cloud_total_logical_configurations(self, max_cloud_total_logical_configurations):
        """Sets the max_cloud_total_logical_configurations of this MultiAnalysisConfiguration.

        Maximum total number of logical configurations  # noqa: E501

        :param max_cloud_total_logical_configurations: The max_cloud_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_cloud_total_logical_configurations = max_cloud_total_logical_configurations

    @property
    def max_cloud_logical_configurations_per_physical(self):
        """Gets the max_cloud_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of logical configurations within a physical configuration  # noqa: E501

        :return: The max_cloud_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_cloud_logical_configurations_per_physical

    @max_cloud_logical_configurations_per_physical.setter
    def max_cloud_logical_configurations_per_physical(self, max_cloud_logical_configurations_per_physical):
        """Sets the max_cloud_logical_configurations_per_physical of this MultiAnalysisConfiguration.

        Maximum total number of logical configurations within a physical configuration  # noqa: E501

        :param max_cloud_logical_configurations_per_physical: The max_cloud_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_cloud_logical_configurations_per_physical = max_cloud_logical_configurations_per_physical

    @property
    def max_local_analyses(self):
        """Gets the max_local_analyses of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum number of distinct analysis+version for COCA  # noqa: E501

        :return: The max_local_analyses of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_local_analyses

    @max_local_analyses.setter
    def max_local_analyses(self, max_local_analyses):
        """Sets the max_local_analyses of this MultiAnalysisConfiguration.

        Maximum number of distinct analysis+version for COCA  # noqa: E501

        :param max_local_analyses: The max_local_analyses of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_local_analyses = max_local_analyses

    @property
    def max_local_total_physical_configurations(self):
        """Gets the max_local_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of physical configurations  # noqa: E501

        :return: The max_local_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_local_total_physical_configurations

    @max_local_total_physical_configurations.setter
    def max_local_total_physical_configurations(self, max_local_total_physical_configurations):
        """Sets the max_local_total_physical_configurations of this MultiAnalysisConfiguration.

        Maximum total number of physical configurations  # noqa: E501

        :param max_local_total_physical_configurations: The max_local_total_physical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_local_total_physical_configurations = max_local_total_physical_configurations

    @property
    def max_local_total_logical_configurations(self):
        """Gets the max_local_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of logical configurations  # noqa: E501

        :return: The max_local_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_local_total_logical_configurations

    @max_local_total_logical_configurations.setter
    def max_local_total_logical_configurations(self, max_local_total_logical_configurations):
        """Sets the max_local_total_logical_configurations of this MultiAnalysisConfiguration.

        Maximum total number of logical configurations  # noqa: E501

        :param max_local_total_logical_configurations: The max_local_total_logical_configurations of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_local_total_logical_configurations = max_local_total_logical_configurations

    @property
    def max_local_logical_configurations_per_physical(self):
        """Gets the max_local_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501

        Maximum total number of logical configurations within a physical configuration  # noqa: E501

        :return: The max_local_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_local_logical_configurations_per_physical

    @max_local_logical_configurations_per_physical.setter
    def max_local_logical_configurations_per_physical(self, max_local_logical_configurations_per_physical):
        """Sets the max_local_logical_configurations_per_physical of this MultiAnalysisConfiguration.

        Maximum total number of logical configurations within a physical configuration  # noqa: E501

        :param max_local_logical_configurations_per_physical: The max_local_logical_configurations_per_physical of this MultiAnalysisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_local_logical_configurations_per_physical = max_local_logical_configurations_per_physical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiAnalysisConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiAnalysisConfiguration):
            return True

        return self.to_dict() != other.to_dict()
