"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from ICA_SDK.model.instrument import Instrument
    from ICA_SDK.model.run_sequencing_stats_response import RunSequencingStatsResponse
    from ICA_SDK.model.run_verification_result import RunVerificationResult
    from ICA_SDK.model.sequencing_analysis_run_compact import SequencingAnalysisRunCompact
    from ICA_SDK.model.sequencing_run_analysis_summary import SequencingRunAnalysisSummary
    from ICA_SDK.model.sequencing_run_compact import SequencingRunCompact
    from ICA_SDK.model.sequencing_run_configuration import SequencingRunConfiguration
    from ICA_SDK.model.sequencing_run_genome_info import SequencingRunGenomeInfo
    from ICA_SDK.model.sequencing_run_prep_kit_info import SequencingRunPrepKitInfo
    globals()['Instrument'] = Instrument
    globals()['RunSequencingStatsResponse'] = RunSequencingStatsResponse
    globals()['RunVerificationResult'] = RunVerificationResult
    globals()['SequencingAnalysisRunCompact'] = SequencingAnalysisRunCompact
    globals()['SequencingRunAnalysisSummary'] = SequencingRunAnalysisSummary
    globals()['SequencingRunCompact'] = SequencingRunCompact
    globals()['SequencingRunConfiguration'] = SequencingRunConfiguration
    globals()['SequencingRunGenomeInfo'] = SequencingRunGenomeInfo
    globals()['SequencingRunPrepKitInfo'] = SequencingRunPrepKitInfo


class SequencingRun(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'urn': (str,),  # noqa: E501
            'href': (str,),  # noqa: E501
            'run_origin': (str,),  # noqa: E501
            'regulatory_mode': (str,),  # noqa: E501
            'instrument_run_id': (str,),  # noqa: E501
            'external_run_id': (str,),  # noqa: E501
            'run_name': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'is_planned': (bool,),  # noqa: E501
            'aggregate_run_status': (str,),  # noqa: E501
            'verification_status': (str,),  # noqa: E501
            'verification_status_summary': (str,),  # noqa: E501
            'verification_completed': (bool,),  # noqa: E501
            'verification_time_started': (datetime,),  # noqa: E501
            'verification_time_completed': (datetime,),  # noqa: E501
            'instrument_run_status': (str,),  # noqa: E501
            'instrument_run_status_summary': (str,),  # noqa: E501
            'instrument_run_completed': (bool,),  # noqa: E501
            'instrument_run_time_started': (datetime,),  # noqa: E501
            'instrument_run_time_completed': (datetime,),  # noqa: E501
            'instrument_completed': (bool,),  # noqa: E501
            'instrument_time_started': (datetime,),  # noqa: E501
            'instrument_time_completed': (datetime,),  # noqa: E501
            'sequencing_completed': (bool,),  # noqa: E501
            'sequencing_time_started': (datetime,),  # noqa: E501
            'sequencing_time_completed': (datetime,),  # noqa: E501
            'instrument_analysis_status': (str,),  # noqa: E501
            'instrument_analysis_status_summary': (str,),  # noqa: E501
            'instrument_analysis_performed': (bool,),  # noqa: E501
            'instrument_analysis_completed': (bool,),  # noqa: E501
            'instrument_analysis_time_started': (datetime,),  # noqa: E501
            'instrument_analysis_time_completed': (datetime,),  # noqa: E501
            'run_upload_status': (str,),  # noqa: E501
            'run_upload_status_summary': (str,),  # noqa: E501
            'run_upload_completed': (bool,),  # noqa: E501
            'run_upload_time_started': (datetime,),  # noqa: E501
            'run_upload_time_completed': (datetime,),  # noqa: E501
            'is_completed': (bool,),  # noqa: E501
            'is_failed': (bool,),  # noqa: E501
            'run_failure_type': (str,),  # noqa: E501
            'run_failure_reason': (str,),  # noqa: E501
            'needs_attention': (bool,),  # noqa: E501
            'needs_attention_reason': (str,),  # noqa: E501
            'is_aborted': (bool,),  # noqa: E501
            'is_timed_out': (bool,),  # noqa: E501
            'prep_kit_info': (SequencingRunPrepKitInfo,),  # noqa: E501
            'genome_info': (SequencingRunGenomeInfo,),  # noqa: E501
            'flow_cell_barcode': (str,),  # noqa: E501
            'input_container_identifier': (str,),  # noqa: E501
            'consumables': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'run_mode': (str,),  # noqa: E501
            'instrument_run_number': (int,),  # noqa: E501
            'sample_sheet_name': (str,),  # noqa: E501
            'data_volume_urn': (str,),  # noqa: E501
            'data_folder_urn': (str,),  # noqa: E501
            'data_folder_volume_path': (str,),  # noqa: E501
            'total_size': (int,),  # noqa: E501
            'locked_by': (str,),  # noqa: E501
            'started_by': (str,),  # noqa: E501
            'time_locked': (datetime,),  # noqa: E501
            'is_locked': (bool,),  # noqa: E501
            'config': (SequencingRunConfiguration,),  # noqa: E501
            'instrument': (Instrument,),  # noqa: E501
            'instrument_type_snapshot': (str,),  # noqa: E501
            'instrument_software_version': (str,),  # noqa: E501
            'analysis_location': (str,),  # noqa: E501
            'analysis_summaries': ([SequencingRunAnalysisSummary],),  # noqa: E501
            'run_analysis_settings': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'is_favorite': (bool,),  # noqa: E501
            'external_location': (str,),  # noqa: E501
            'checksum_of_manifest': (str,),  # noqa: E501
            'requeued_from_run': (SequencingRunCompact,),  # noqa: E501
            'requeue_reason': (str,),  # noqa: E501
            'verification_results': (RunVerificationResult,),  # noqa: E501
            'can_edit_run': (bool,),  # noqa: E501
            'can_requeue_run': (bool,),  # noqa: E501
            'can_delete': (bool,),  # noqa: E501
            'analysis_time_started': (datetime,),  # noqa: E501
            'analysis_time_completed': (datetime,),  # noqa: E501
            'run_time_completed': (datetime,),  # noqa: E501
            'run_sequencing_stats': (RunSequencingStatsResponse,),  # noqa: E501
            'analysis_runs': ([SequencingAnalysisRunCompact],),  # noqa: E501
            'sub_tenant_id': (str,),  # noqa: E501
            'acl': ([str],),  # noqa: E501
            'run_parameters_xml': (str,),  # noqa: E501
            'run_info_xml': (str,),  # noqa: E501
            'tenant_id': (str,),  # noqa: E501
            'tenant_name': (str,),  # noqa: E501
            'created_by_client_id': (str,),  # noqa: E501
            'created_by': (str,),  # noqa: E501
            'modified_by': (str,),  # noqa: E501
            'time_created': (datetime,),  # noqa: E501
            'time_modified': (datetime,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'urn': 'urn',  # noqa: E501
        'href': 'href',  # noqa: E501
        'run_origin': 'runOrigin',  # noqa: E501
        'regulatory_mode': 'regulatoryMode',  # noqa: E501
        'instrument_run_id': 'instrumentRunId',  # noqa: E501
        'external_run_id': 'externalRunId',  # noqa: E501
        'run_name': 'runName',  # noqa: E501
        'description': 'description',  # noqa: E501
        'is_planned': 'isPlanned',  # noqa: E501
        'aggregate_run_status': 'aggregateRunStatus',  # noqa: E501
        'verification_status': 'verificationStatus',  # noqa: E501
        'verification_status_summary': 'verificationStatusSummary',  # noqa: E501
        'verification_completed': 'verificationCompleted',  # noqa: E501
        'verification_time_started': 'verificationTimeStarted',  # noqa: E501
        'verification_time_completed': 'verificationTimeCompleted',  # noqa: E501
        'instrument_run_status': 'instrumentRunStatus',  # noqa: E501
        'instrument_run_status_summary': 'instrumentRunStatusSummary',  # noqa: E501
        'instrument_run_completed': 'instrumentRunCompleted',  # noqa: E501
        'instrument_run_time_started': 'instrumentRunTimeStarted',  # noqa: E501
        'instrument_run_time_completed': 'instrumentRunTimeCompleted',  # noqa: E501
        'instrument_completed': 'instrumentCompleted',  # noqa: E501
        'instrument_time_started': 'instrumentTimeStarted',  # noqa: E501
        'instrument_time_completed': 'instrumentTimeCompleted',  # noqa: E501
        'sequencing_completed': 'sequencingCompleted',  # noqa: E501
        'sequencing_time_started': 'sequencingTimeStarted',  # noqa: E501
        'sequencing_time_completed': 'sequencingTimeCompleted',  # noqa: E501
        'instrument_analysis_status': 'instrumentAnalysisStatus',  # noqa: E501
        'instrument_analysis_status_summary': 'instrumentAnalysisStatusSummary',  # noqa: E501
        'instrument_analysis_performed': 'instrumentAnalysisPerformed',  # noqa: E501
        'instrument_analysis_completed': 'instrumentAnalysisCompleted',  # noqa: E501
        'instrument_analysis_time_started': 'instrumentAnalysisTimeStarted',  # noqa: E501
        'instrument_analysis_time_completed': 'instrumentAnalysisTimeCompleted',  # noqa: E501
        'run_upload_status': 'runUploadStatus',  # noqa: E501
        'run_upload_status_summary': 'runUploadStatusSummary',  # noqa: E501
        'run_upload_completed': 'runUploadCompleted',  # noqa: E501
        'run_upload_time_started': 'runUploadTimeStarted',  # noqa: E501
        'run_upload_time_completed': 'runUploadTimeCompleted',  # noqa: E501
        'is_completed': 'isCompleted',  # noqa: E501
        'is_failed': 'isFailed',  # noqa: E501
        'run_failure_type': 'runFailureType',  # noqa: E501
        'run_failure_reason': 'runFailureReason',  # noqa: E501
        'needs_attention': 'needsAttention',  # noqa: E501
        'needs_attention_reason': 'needsAttentionReason',  # noqa: E501
        'is_aborted': 'isAborted',  # noqa: E501
        'is_timed_out': 'isTimedOut',  # noqa: E501
        'prep_kit_info': 'prepKitInfo',  # noqa: E501
        'genome_info': 'genomeInfo',  # noqa: E501
        'flow_cell_barcode': 'flowCellBarcode',  # noqa: E501
        'input_container_identifier': 'inputContainerIdentifier',  # noqa: E501
        'consumables': 'consumables',  # noqa: E501
        'run_mode': 'runMode',  # noqa: E501
        'instrument_run_number': 'instrumentRunNumber',  # noqa: E501
        'sample_sheet_name': 'sampleSheetName',  # noqa: E501
        'data_volume_urn': 'dataVolumeUrn',  # noqa: E501
        'data_folder_urn': 'dataFolderUrn',  # noqa: E501
        'data_folder_volume_path': 'dataFolderVolumePath',  # noqa: E501
        'total_size': 'totalSize',  # noqa: E501
        'locked_by': 'lockedBy',  # noqa: E501
        'started_by': 'startedBy',  # noqa: E501
        'time_locked': 'timeLocked',  # noqa: E501
        'is_locked': 'isLocked',  # noqa: E501
        'config': 'config',  # noqa: E501
        'instrument': 'instrument',  # noqa: E501
        'instrument_type_snapshot': 'instrumentTypeSnapshot',  # noqa: E501
        'instrument_software_version': 'instrumentSoftwareVersion',  # noqa: E501
        'analysis_location': 'analysisLocation',  # noqa: E501
        'analysis_summaries': 'analysisSummaries',  # noqa: E501
        'run_analysis_settings': 'runAnalysisSettings',  # noqa: E501
        'is_favorite': 'isFavorite',  # noqa: E501
        'external_location': 'externalLocation',  # noqa: E501
        'checksum_of_manifest': 'checksumOfManifest',  # noqa: E501
        'requeued_from_run': 'requeuedFromRun',  # noqa: E501
        'requeue_reason': 'requeueReason',  # noqa: E501
        'verification_results': 'verificationResults',  # noqa: E501
        'can_edit_run': 'canEditRun',  # noqa: E501
        'can_requeue_run': 'canRequeueRun',  # noqa: E501
        'can_delete': 'canDelete',  # noqa: E501
        'analysis_time_started': 'analysisTimeStarted',  # noqa: E501
        'analysis_time_completed': 'analysisTimeCompleted',  # noqa: E501
        'run_time_completed': 'runTimeCompleted',  # noqa: E501
        'run_sequencing_stats': 'runSequencingStats',  # noqa: E501
        'analysis_runs': 'analysisRuns',  # noqa: E501
        'sub_tenant_id': 'subTenantId',  # noqa: E501
        'acl': 'acl',  # noqa: E501
        'run_parameters_xml': 'runParametersXml',  # noqa: E501
        'run_info_xml': 'runInfoXml',  # noqa: E501
        'tenant_id': 'tenantId',  # noqa: E501
        'tenant_name': 'tenantName',  # noqa: E501
        'created_by_client_id': 'createdByClientId',  # noqa: E501
        'created_by': 'createdBy',  # noqa: E501
        'modified_by': 'modifiedBy',  # noqa: E501
        'time_created': 'timeCreated',  # noqa: E501
        'time_modified': 'timeModified',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SequencingRun - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): Unique object ID. [optional]  # noqa: E501
            urn (str): URN of the object. [optional]  # noqa: E501
            href (str): HREF to the object. [optional]  # noqa: E501
            run_origin (str): Origin of the run data (Instrument, InstrumentPostRunUpload, Simulated, etc.). [optional]  # noqa: E501
            regulatory_mode (str): Regulatory mode of the run. [optional]  # noqa: E501
            instrument_run_id (str): Run ID typically generated by instrument (not guaranteed to be unique for either tenant or system). [optional]  # noqa: E501
            external_run_id (str): ID of the sequencing run in another system. [optional]  # noqa: E501
            run_name (str): User-supplied name of the experiment/run (not guaranteed to be unique for either tenant or system). [optional]  # noqa: E501
            description (str): User-supplied description of the run. [optional]  # noqa: E501
            is_planned (bool): Indicates with value 'true' when the run is in the planning stage (including while locked and assigned to an instrument). [optional]  # noqa: E501
            aggregate_run_status (str): Overall status of the run across all stages, including the status of post-upload cloud processing. [optional]  # noqa: E501
            verification_status (str): Status of the verification stage. [optional]  # noqa: E501
            verification_status_summary (str): Summary of the current status of the run. [optional]  # noqa: E501
            verification_completed (bool): Indicates with value 'true' when the verification stage completes. [optional]  # noqa: E501
            verification_time_started (datetime): Time when the verification stage started. [optional]  # noqa: E501
            verification_time_completed (datetime): Time when the run fully completed on the instrument (if set, this marks the end of the verification stage). [optional]  # noqa: E501
            instrument_run_status (str): Status of the instrument run stage. [optional]  # noqa: E501
            instrument_run_status_summary (str): Summary of the current status of the run. [optional]  # noqa: E501
            instrument_run_completed (bool): Indicates with value 'true' when the instrument run stage completes. [optional]  # noqa: E501
            instrument_run_time_started (datetime): Time when the instrument run stage started. [optional]  # noqa: E501
            instrument_run_time_completed (datetime): Time when the run fully completed on the instrument (if set, this marks the end of the instrument run stage). [optional]  # noqa: E501
            instrument_completed (bool): Indicates with value 'true' when the instrument sub-stage completes. [optional]  # noqa: E501
            instrument_time_started (datetime): Time when the instrument starts active work on the run (marks the start of the instrument sub-stage). [optional]  # noqa: E501
            instrument_time_completed (datetime): Time when the instrument completes active work on the run (excluding background file upload). [optional]  # noqa: E501
            sequencing_completed (bool): Indicates with value 'true' when the sequencing sub-stage completes. [optional]  # noqa: E501
            sequencing_time_started (datetime): Time when the sequencing sub-stage started. [optional]  # noqa: E501
            sequencing_time_completed (datetime): Time when the sequencing sub-stage completed. [optional]  # noqa: E501
            instrument_analysis_status (str): Status of the on-instrument analysis software. [optional]  # noqa: E501
            instrument_analysis_status_summary (str): Summary of the instrument analysis status. [optional]  # noqa: E501
            instrument_analysis_performed (bool): Indicates with value 'true' if instrument analysis is being performed for the run. [optional]  # noqa: E501
            instrument_analysis_completed (bool): Indicates with value 'true' when the instrument analysis sub-stage completes. [optional]  # noqa: E501
            instrument_analysis_time_started (datetime): Time when the analysis starts on the instrument (marks the start of instrument analysis sub-stage). [optional]  # noqa: E501
            instrument_analysis_time_completed (datetime): Time when the analysis completed on the instrument. [optional]  # noqa: E501
            run_upload_status (str): Status of data upload from instrument. [optional]  # noqa: E501
            run_upload_status_summary (str): Detailed summary of run upload status/progress. [optional]  # noqa: E501
            run_upload_completed (bool): Indicates with value 'true' when the run upload sub-stage completes. [optional]  # noqa: E501
            run_upload_time_started (datetime): Time when the data upload starts (marks the start of upload sub-stage). [optional]  # noqa: E501
            run_upload_time_completed (datetime): Time when the run upload sub-stage completed. [optional]  # noqa: E501
            is_completed (bool): Indicates whether the run is in terminal state. [optional]  # noqa: E501
            is_failed (bool): Indicates whether the run failed. [optional]  # noqa: E501
            run_failure_type (str): Indicates the FailureType of the run (e.g None, InstrumentFailure, InstrumentSequencingFailure etc.). [optional]  # noqa: E501
            run_failure_reason (str): Specifies the reason why the run failure occurred. [optional]  # noqa: E501
            needs_attention (bool): Indicates with value 'true' if the run needs attention. [optional]  # noqa: E501
            needs_attention_reason (str): Reason why the run needs attention. [optional]  # noqa: E501
            is_aborted (bool): Indicates with value 'true' that the run was stopped, canceled, or aborted. [optional]  # noqa: E501
            is_timed_out (bool): Indicates with value 'true' if the run timed out. [optional]  # noqa: E501
            prep_kit_info (SequencingRunPrepKitInfo): [optional]  # noqa: E501
            genome_info (SequencingRunGenomeInfo): [optional]  # noqa: E501
            flow_cell_barcode (str): Barcode of the flow cell used in the sequencing run. [optional]  # noqa: E501
            input_container_identifier (str): Input container identifier used in the sequencing run. [optional]  # noqa: E501
            consumables ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Information (such as barcodes) about consumables (such as reagents, buffers, etc.) used in the sequencing run. [optional]  # noqa: E501
            run_mode (str): Describes the analysis and proactive data that is uploaded and processed in the cloud. [optional]  # noqa: E501
            instrument_run_number (int): Records the number of runs performed on a specific instrument. [optional]  # noqa: E501
            sample_sheet_name (str): Name of the sample sheet file. [optional]  # noqa: E501
            data_volume_urn (str): URN of the data volume where run data is stored. [optional]  # noqa: E501
            data_folder_urn (str): URN of the data folder where run data is stored. [optional]  # noqa: E501
            data_folder_volume_path (str): Path with volume of the data folder where run data is stored. [optional]  # noqa: E501
            total_size (int): Total size of the run data files in bytes when the run data was first uploaded. [optional]  # noqa: E501
            locked_by (str): User that locked the sequencing run. [optional]  # noqa: E501
            started_by (str): User that started the sequencing run. [optional]  # noqa: E501
            time_locked (datetime): Time (in UTC) the sequencing run was locked. [optional]  # noqa: E501
            is_locked (bool): Specifies whether or not the sequencing run has been locked. [optional]  # noqa: E501
            config (SequencingRunConfiguration): [optional]  # noqa: E501
            instrument (Instrument): [optional]  # noqa: E501
            instrument_type_snapshot (str): Instrument type snapshot when the run is locked or started. [optional]  # noqa: E501
            instrument_software_version (str): Version of instrument control software provided by the instrument when the run starts. [optional]  # noqa: E501
            analysis_location (str): Indicate the sequencing run will be performing local analysis or cloud analysis. [optional]  # noqa: E501
            analysis_summaries ([SequencingRunAnalysisSummary]): Configured analysis summary information. [optional]  # noqa: E501
            run_analysis_settings ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Run analysis settings. [optional]  # noqa: E501
            is_favorite (bool): Indicate whether the sequencing run is set as favorite run for the user. [optional]  # noqa: E501
            external_location (str): Stores the external location of the sequencing run. [optional]  # noqa: E501
            checksum_of_manifest (str): Stores the checksum of manifest  Used to verify run contents copied from external location. [optional]  # noqa: E501
            requeued_from_run (SequencingRunCompact): [optional]  # noqa: E501
            requeue_reason (str): Reason for Requeue Analysis of a sequencing run. [optional]  # noqa: E501
            verification_results (RunVerificationResult): [optional]  # noqa: E501
            can_edit_run (bool): Indicates whether the sequencing run can be edited or not. [optional]  # noqa: E501
            can_requeue_run (bool): Indicates whether the sequencing run can be requeued or not. [optional]  # noqa: E501
            can_delete (bool): Indicates whether the sequencing run can be deleted or not. [optional]  # noqa: E501
            analysis_time_started (datetime): Indicates the DateTime when the analysis is started (typically for off-instrument analysis). [optional]  # noqa: E501
            analysis_time_completed (datetime): Indicates the DateTime when the analysis is completed (typically for off-instrument analysis). [optional]  # noqa: E501
            run_time_completed (datetime): Indicates the DateTime of the overall run which have been fully completed (including post-upload cloud processing). [optional]  # noqa: E501
            run_sequencing_stats (RunSequencingStatsResponse): [optional]  # noqa: E501
            analysis_runs ([SequencingAnalysisRunCompact]): Consists of the sequencing analysis runs related to the sequencing run. [optional]  # noqa: E501
            sub_tenant_id (str): Organizational or Workgroup ID. If neither are present, User ID.. [optional]  # noqa: E501
            acl ([str]): Access control list of the object. [optional]  # noqa: E501
            run_parameters_xml (str): The content of the instrument RunParameters.xml file generated when sequencing run starts. [optional]  # noqa: E501
            run_info_xml (str): Content of the instrument RunInfo.xml file, generated in XML format when sequencing run starts. [optional]  # noqa: E501
            tenant_id (str): Unique identifier for the resource tenant. [optional]  # noqa: E501
            tenant_name (str): Unique tenant name for the resource tenant. [optional]  # noqa: E501
            created_by_client_id (str): ClientId that created the resource (bssh, stratus...). [optional]  # noqa: E501
            created_by (str): User that created the resource. [optional]  # noqa: E501
            modified_by (str): User that last modified the resource. [optional]  # noqa: E501
            time_created (datetime): Time (in UTC) the resource was created. [optional]  # noqa: E501
            time_modified (datetime): Time (in UTC) the resource was modified. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
