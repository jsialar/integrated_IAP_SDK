"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.create_volume_configuration_request import CreateVolumeConfigurationRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.volume_configuration_list_response import VolumeConfigurationListResponse
from ICA_SDK.model.volume_configuration_response import VolumeConfigurationResponse
from ICA_SDK.model.volume_response import VolumeResponse


class VolumeConfigurationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_volume_configuration(
            self,
            body,
            **kwargs
        ):
            """Create a volume configuration in GDS.  # noqa: E501

            Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_volume_configuration(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (CreateVolumeConfigurationRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeConfigurationResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_volume_configuration = _Endpoint(
            settings={
                'response_type': (VolumeConfigurationResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumeconfigurations',
                'operation_id': 'create_volume_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateVolumeConfigurationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_volume_configuration
        )

        def __delete_volume_configuration(
            self,
            volume_configuration_name,
            **kwargs
        ):
            """Deletes a volume configuration by Id or name  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_volume_configuration(volume_configuration_name, async_req=True)
            >>> result = thread.get()

            Args:
                volume_configuration_name (str): Unique name of the Volume Configuration to be deleted.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['volume_configuration_name'] = \
                volume_configuration_name
            return self.call_with_http_info(**kwargs)

        self.delete_volume_configuration = _Endpoint(
            settings={
                'response_type': (VolumeResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumeconfigurations/{volumeConfigurationName}',
                'operation_id': 'delete_volume_configuration',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_configuration_name',
                ],
                'required': [
                    'volume_configuration_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_configuration_name':
                        (str,),
                },
                'attribute_map': {
                    'volume_configuration_name': 'volumeConfigurationName',
                },
                'location_map': {
                    'volume_configuration_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_volume_configuration
        )

        def __get_volume_configuration(
            self,
            volume_configuration_name,
            **kwargs
        ):
            """Get information for the specified volume configuration name or Id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_volume_configuration(volume_configuration_name, async_req=True)
            >>> result = thread.get()

            Args:
                volume_configuration_name (str): Unique name of the volume configuration to retrieve information for.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeConfigurationResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['volume_configuration_name'] = \
                volume_configuration_name
            return self.call_with_http_info(**kwargs)

        self.get_volume_configuration = _Endpoint(
            settings={
                'response_type': (VolumeConfigurationResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumeconfigurations/{volumeConfigurationName}',
                'operation_id': 'get_volume_configuration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_configuration_name',
                ],
                'required': [
                    'volume_configuration_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_configuration_name':
                        (str,),
                },
                'attribute_map': {
                    'volume_configuration_name': 'volumeConfigurationName',
                },
                'location_map': {
                    'volume_configuration_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_volume_configuration
        )

        def __list_volume_configurations(
            self,
            **kwargs
        ):
            """Get a list of volumes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_volume_configurations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                online_status (str): Optional field that specifies the Online Status for Volume configurations included in the list.  If provided, the value must be Initializing, Ok, or Error.. [optional]
                page_size (int): START_DESC END_DESC. [optional]
                page_token (str): START_DESC END_DESC. [optional]
                include (str): Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeConfigurationListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_volume_configurations = _Endpoint(
            settings={
                'response_type': (VolumeConfigurationListResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumeconfigurations',
                'operation_id': 'list_volume_configurations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'online_status',
                    'page_size',
                    'page_token',
                    'include',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'online_status':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'include':
                        (str,),
                },
                'attribute_map': {
                    'online_status': 'onlineStatus',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'include': 'include',
                },
                'location_map': {
                    'online_status': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                    'include': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_volume_configurations
        )

        def __validate_volume_configuration(
            self,
            volume_configuration_name,
            **kwargs
        ):
            """Validate a volume configuration  # noqa: E501

            Validate an existing volume configuration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.validate_volume_configuration(volume_configuration_name, async_req=True)
            >>> result = thread.get()

            Args:
                volume_configuration_name (str): Unique name of the volume configuration to be validated.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeConfigurationResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['volume_configuration_name'] = \
                volume_configuration_name
            return self.call_with_http_info(**kwargs)

        self.validate_volume_configuration = _Endpoint(
            settings={
                'response_type': (VolumeConfigurationResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumeconfigurations/{volumeConfigurationName}:validate',
                'operation_id': 'validate_volume_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_configuration_name',
                ],
                'required': [
                    'volume_configuration_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_configuration_name':
                        (str,),
                },
                'attribute_map': {
                    'volume_configuration_name': 'volumeConfigurationName',
                },
                'location_map': {
                    'volume_configuration_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__validate_volume_configuration
        )
