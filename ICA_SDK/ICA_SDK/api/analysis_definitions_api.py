# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ICA_SDK.api_client import ApiClient
from ICA_SDK.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AnalysisDefinitionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_analysis_definition(self, **kwargs):  # noqa: E501
        """Create an analysis definition.  # noqa: E501

        Create an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_analysis_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateAnalysisDefinitionRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_analysis_definition_with_http_info(**kwargs)  # noqa: E501

    def create_analysis_definition_with_http_info(self, **kwargs):  # noqa: E501
        """Create an analysis definition.  # noqa: E501

        Create an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_analysis_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateAnalysisDefinitionRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_analysis_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analysis_definition(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Get analysis definition details.  # noqa: E501

        For a given analysis definition ID, get the analysis definition details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_definition(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: ID of the analysis definition (required)
        :param list[str] include: Include flags to specify what is included in the response
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_analysis_definition_with_http_info(analysis_definition_id, **kwargs)  # noqa: E501

    def get_analysis_definition_with_http_info(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Get analysis definition details.  # noqa: E501

        For a given analysis definition ID, get the analysis definition details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_definition_with_http_info(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: ID of the analysis definition (required)
        :param list[str] include: Include flags to specify what is included in the response
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_definition_id',
            'include'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'analysis_definition_id' is set
        if self.api_client.client_side_validation and ('analysis_definition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['analysis_definition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analysis_definition_id` when calling `get_analysis_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_definition_id' in local_var_params:
            path_params['analysisDefinitionId'] = local_var_params['analysis_definition_id']  # noqa: E501

        query_params = []
        if 'include' in local_var_params and local_var_params['include'] is not None:  # noqa: E501
            query_params.append(('include', local_var_params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions/{analysisDefinitionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_analysis_definitions(self, **kwargs):  # noqa: E501
        """Get a list of analysis definitions.  # noqa: E501

        Get a list of analysis definitions accessible by the request token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_analysis_definitions(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_location: Filter parameter to only show Local/Cloud analysis version definitions
        :param list[str] regulatory_mode: Filter by regulatory modes using comma separated values, e.g <example>RUO,IVD,IUO</example>
        :param str instrument_platform: Instrument platform
        :param str instrument_type: Instrument type
        :param list[str] include: Include flags to specify what is included in the response
        :param list[str] tenant_ids: Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids
        :param int page_size: Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.
        :param str page_token: Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.
        :param str sort: Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinitionCompactAnalysisDefinitionSortFieldsPagedItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_analysis_definitions_with_http_info(**kwargs)  # noqa: E501

    def list_analysis_definitions_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of analysis definitions.  # noqa: E501

        Get a list of analysis definitions accessible by the request token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_analysis_definitions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_location: Filter parameter to only show Local/Cloud analysis version definitions
        :param list[str] regulatory_mode: Filter by regulatory modes using comma separated values, e.g <example>RUO,IVD,IUO</example>
        :param str instrument_platform: Instrument platform
        :param str instrument_type: Instrument type
        :param list[str] include: Include flags to specify what is included in the response
        :param list[str] tenant_ids: Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids
        :param int page_size: Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.
        :param str page_token: Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.
        :param str sort: Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinitionCompactAnalysisDefinitionSortFieldsPagedItems, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_location',
            'regulatory_mode',
            'instrument_platform',
            'instrument_type',
            'include',
            'tenant_ids',
            'page_size',
            'page_token',
            'sort'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_analysis_definitions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analysis_location' in local_var_params and local_var_params['analysis_location'] is not None:  # noqa: E501
            query_params.append(('analysisLocation', local_var_params['analysis_location']))  # noqa: E501
        if 'regulatory_mode' in local_var_params and local_var_params['regulatory_mode'] is not None:  # noqa: E501
            query_params.append(('regulatoryMode', local_var_params['regulatory_mode']))  # noqa: E501
            collection_formats['regulatoryMode'] = 'csv'  # noqa: E501
        if 'instrument_platform' in local_var_params and local_var_params['instrument_platform'] is not None:  # noqa: E501
            query_params.append(('instrumentPlatform', local_var_params['instrument_platform']))  # noqa: E501
        if 'instrument_type' in local_var_params and local_var_params['instrument_type'] is not None:  # noqa: E501
            query_params.append(('instrumentType', local_var_params['instrument_type']))  # noqa: E501
        if 'include' in local_var_params and local_var_params['include'] is not None:  # noqa: E501
            query_params.append(('include', local_var_params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'tenant_ids' in local_var_params and local_var_params['tenant_ids'] is not None:  # noqa: E501
            query_params.append(('tenantIds', local_var_params['tenant_ids']))  # noqa: E501
            collection_formats['tenantIds'] = 'csv'  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinitionCompactAnalysisDefinitionSortFieldsPagedItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merge_analysis_definition_acl(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Merge the access control list of an analysis definition with the input access control list.  # noqa: E501

        Merge the access control list of an analysis definition with the input access control list, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_analysis_definition_acl(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.merge_analysis_definition_acl_with_http_info(analysis_definition_id, **kwargs)  # noqa: E501

    def merge_analysis_definition_acl_with_http_info(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Merge the access control list of an analysis definition with the input access control list.  # noqa: E501

        Merge the access control list of an analysis definition with the input access control list, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_analysis_definition_acl_with_http_info(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_definition_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge_analysis_definition_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'analysis_definition_id' is set
        if self.api_client.client_side_validation and ('analysis_definition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['analysis_definition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analysis_definition_id` when calling `merge_analysis_definition_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_definition_id' in local_var_params:
            path_params['analysisDefinitionId'] = local_var_params['analysis_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/acl', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_analysis_definition_acl(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Remove the access control list of an analysis definition.  # noqa: E501

        Remove the access control list of an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_analysis_definition_acl(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_analysis_definition_acl_with_http_info(analysis_definition_id, **kwargs)  # noqa: E501

    def remove_analysis_definition_acl_with_http_info(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Remove the access control list of an analysis definition.  # noqa: E501

        Remove the access control list of an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_analysis_definition_acl_with_http_info(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_definition_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_analysis_definition_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'analysis_definition_id' is set
        if self.api_client.client_side_validation and ('analysis_definition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['analysis_definition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analysis_definition_id` when calling `remove_analysis_definition_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_definition_id' in local_var_params:
            path_params['analysisDefinitionId'] = local_var_params['analysis_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/acl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_analysis_definition_acl(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Replace the access control list of an analysis definition.  # noqa: E501

        Replace the access control list of an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_analysis_definition_acl(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.replace_analysis_definition_acl_with_http_info(analysis_definition_id, **kwargs)  # noqa: E501

    def replace_analysis_definition_acl_with_http_info(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Replace the access control list of an analysis definition.  # noqa: E501

        Replace the access control list of an analysis definition, and return information about that analysis definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_analysis_definition_acl_with_http_info(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_definition_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_analysis_definition_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'analysis_definition_id' is set
        if self.api_client.client_side_validation and ('analysis_definition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['analysis_definition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analysis_definition_id` when calling `replace_analysis_definition_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_definition_id' in local_var_params:
            path_params['analysisDefinitionId'] = local_var_params['analysis_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions/{analysisDefinitionId}/acl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_analysis_definition(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Update analysis definition details.  # noqa: E501

        For a given analysis definition ID, update the analysis definition details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis_definition(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAnalysisDefinitionRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_analysis_definition_with_http_info(analysis_definition_id, **kwargs)  # noqa: E501

    def update_analysis_definition_with_http_info(self, analysis_definition_id, **kwargs):  # noqa: E501
        """Update analysis definition details.  # noqa: E501

        For a given analysis definition ID, update the analysis definition details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis_definition_with_http_info(analysis_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_definition_id: (required)
        :param UpdateAnalysisDefinitionRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisDefinition, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_definition_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_analysis_definition" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'analysis_definition_id' is set
        if self.api_client.client_side_validation and ('analysis_definition_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['analysis_definition_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analysis_definition_id` when calling `update_analysis_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_definition_id' in local_var_params:
            path_params['analysisDefinitionId'] = local_var_params['analysis_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/analysisdefinitions/{analysisDefinitionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
