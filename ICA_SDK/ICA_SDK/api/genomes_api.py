# coding: utf-8

"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ICA_SDK.api_client import ApiClient
from ICA_SDK.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GenomesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_genome(self, **kwargs):  # noqa: E501
        """Create a reference genome.  # noqa: E501

        Create a reference genome, and return information about that reference genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_genome(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateGenomeRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_genome_with_http_info(**kwargs)  # noqa: E501

    def create_genome_with_http_info(self, **kwargs):  # noqa: E501
        """Create a reference genome.  # noqa: E501

        Create a reference genome, and return information about that reference genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_genome_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateGenomeRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_genome" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_genome(self, genome_id, **kwargs):  # noqa: E501
        """Delete genome.  # noqa: E501

        For a given genome ID, delete the genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_genome(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: ID of the genome (required)
        :param bool force: Force delete the genome
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: NoContentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_genome_with_http_info(genome_id, **kwargs)  # noqa: E501

    def delete_genome_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Delete genome.  # noqa: E501

        For a given genome ID, delete the genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_genome_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: ID of the genome (required)
        :param bool force: Force delete the genome
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(NoContentResult, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id',
            'force'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_genome" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `delete_genome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []
        if 'force' in local_var_params and local_var_params['force'] is not None:  # noqa: E501
            query_params.append(('force', local_var_params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NoContentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genome(self, genome_id, **kwargs):  # noqa: E501
        """Get genome details.  # noqa: E501

        For a given genome ID, return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genome(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: The ID of the requested genome. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_genome_with_http_info(genome_id, **kwargs)  # noqa: E501

    def get_genome_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Get genome details.  # noqa: E501

        For a given genome ID, return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genome_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: The ID of the requested genome. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genome" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `get_genome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_genomes(self, **kwargs):  # noqa: E501
        """Get a list of genomes.  # noqa: E501

        Get a list of genomes accessible by the current request token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_genomes(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_version_definition_id: Filter genomes by ID of AnalysisVersionDefinition
        :param str dragen_version: Filter genomes by DragenVersion
        :param list[str] name: Filter genomes by comma-separated Name values
        :param list[str] include: Include flags to specify what is included in the response
        :param list[str] tenant_ids: Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids
        :param int page_size: Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.
        :param str page_token: Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.
        :param str sort: Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenomeCompactGenomeSortFieldsPagedItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_genomes_with_http_info(**kwargs)  # noqa: E501

    def list_genomes_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of genomes.  # noqa: E501

        Get a list of genomes accessible by the current request token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_genomes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_version_definition_id: Filter genomes by ID of AnalysisVersionDefinition
        :param str dragen_version: Filter genomes by DragenVersion
        :param list[str] name: Filter genomes by comma-separated Name values
        :param list[str] include: Include flags to specify what is included in the response
        :param list[str] tenant_ids: Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids
        :param int page_size: Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.
        :param str page_token: Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.
        :param str sort: Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenomeCompactGenomeSortFieldsPagedItems, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'analysis_version_definition_id',
            'dragen_version',
            'name',
            'include',
            'tenant_ids',
            'page_size',
            'page_token',
            'sort'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_genomes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('analysis_version_definition_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['analysis_version_definition_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `analysis_version_definition_id` when calling `list_genomes`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('analysis_version_definition_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['analysis_version_definition_id']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `analysis_version_definition_id` when calling `list_genomes`, length must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('dragen_version' in local_var_params and  # noqa: E501
                                                        len(local_var_params['dragen_version']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `dragen_version` when calling `list_genomes`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('dragen_version' in local_var_params and  # noqa: E501
                                                        len(local_var_params['dragen_version']) < 0):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `dragen_version` when calling `list_genomes`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analysis_version_definition_id' in local_var_params and local_var_params['analysis_version_definition_id'] is not None:  # noqa: E501
            query_params.append(('analysisVersionDefinitionId', local_var_params['analysis_version_definition_id']))  # noqa: E501
        if 'dragen_version' in local_var_params and local_var_params['dragen_version'] is not None:  # noqa: E501
            query_params.append(('dragenVersion', local_var_params['dragen_version']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'csv'  # noqa: E501
        if 'include' in local_var_params and local_var_params['include'] is not None:  # noqa: E501
            query_params.append(('include', local_var_params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'tenant_ids' in local_var_params and local_var_params['tenant_ids'] is not None:  # noqa: E501
            query_params.append(('tenantIds', local_var_params['tenant_ids']))  # noqa: E501
            collection_formats['tenantIds'] = 'csv'  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenomeCompactGenomeSortFieldsPagedItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merge_genome_acl(self, genome_id, **kwargs):  # noqa: E501
        """Merge the access control list of a genome with the input access control list.  # noqa: E501

        Merge the access control list of a given genome with the input access control list, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_genome_acl(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.merge_genome_acl_with_http_info(genome_id, **kwargs)  # noqa: E501

    def merge_genome_acl_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Merge the access control list of a genome with the input access control list.  # noqa: E501

        Merge the access control list of a given genome with the input access control list, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_genome_acl_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge_genome_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `merge_genome_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}/acl', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_genome_acl(self, genome_id, **kwargs):  # noqa: E501
        """Remove the access control list of a genome.  # noqa: E501

        Remove the access control list of a given genome, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_genome_acl(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_genome_acl_with_http_info(genome_id, **kwargs)  # noqa: E501

    def remove_genome_acl_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Remove the access control list of a genome.  # noqa: E501

        Remove the access control list of a given genome, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_genome_acl_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_genome_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `remove_genome_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}/acl', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_genome_acl(self, genome_id, **kwargs):  # noqa: E501
        """Replace the access control list of a genome with the input access control list.  # noqa: E501

        Replace the access control list of a genome with the input access control list, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_genome_acl(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.replace_genome_acl_with_http_info(genome_id, **kwargs)  # noqa: E501

    def replace_genome_acl_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Replace the access control list of a genome with the input access control list.  # noqa: E501

        Replace the access control list of a genome with the input access control list, and return information about that genome.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_genome_acl_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateAclRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_genome_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `replace_genome_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}/acl', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_genome(self, genome_id, **kwargs):  # noqa: E501
        """Update genome details.  # noqa: E501

        For a given genome ID, update the genome details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_genome(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateGenomeRequest body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Genome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_genome_with_http_info(genome_id, **kwargs)  # noqa: E501

    def update_genome_with_http_info(self, genome_id, **kwargs):  # noqa: E501
        """Update genome details.  # noqa: E501

        For a given genome ID, update the genome details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_genome_with_http_info(genome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str genome_id: (required)
        :param UpdateGenomeRequest body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Genome, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'genome_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_genome" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'genome_id' is set
        if self.api_client.client_side_validation and ('genome_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['genome_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `genome_id` when calling `update_genome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'genome_id' in local_var_params:
            path_params['genomeId'] = local_var_params['genome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sequencing/genomes/{genomeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Genome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
