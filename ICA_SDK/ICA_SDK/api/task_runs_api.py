"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.create_task_run_request import CreateTaskRunRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.heartbeat_task_run_request import HeartbeatTaskRunRequest
from ICA_SDK.model.task_run import TaskRun
from ICA_SDK.model.task_run_heartbeat import TaskRunHeartbeat
from ICA_SDK.model.task_run_summary import TaskRunSummary
from ICA_SDK.model.task_run_summary_paged_items import TaskRunSummaryPagedItems


class TaskRunsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __abort_task_run(
            self,
            run_id,
            **kwargs
        ):
            """Abort a task run  # noqa: E501

            Aborts a task run for a given task run ID. The task run is required to have a status of \"Pending\" or \"Running\".  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.abort_task_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRunSummary
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.abort_task_run = _Endpoint(
            settings={
                'response_type': (TaskRunSummary,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/runs/{runId}:abort',
                'operation_id': 'abort_task_run',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__abort_task_run
        )

        def __create_task_run(
            self,
            **kwargs
        ):
            """Create and launch a task run  # noqa: E501

            Creates and launches a task run. Returns the ID and status associated with the new task run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_task_run(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (CreateTaskRunRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_task_run = _Endpoint(
            settings={
                'response_type': (TaskRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/runs',
                'operation_id': 'create_task_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateTaskRunRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__create_task_run
        )

        def __get_task_run(
            self,
            run_id,
            **kwargs
        ):
            """Get the status of a task run  # noqa: E501

            Gets the status of a task run for a given task run ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_task_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.get_task_run = _Endpoint(
            settings={
                'response_type': (TaskRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/runs/{runId}',
                'operation_id': 'get_task_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_task_run
        )

        def __heartbeat_task_run(
            self,
            run_id,
            **kwargs
        ):
            """Heartbeat for a task run  # noqa: E501

            Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.heartbeat_task_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (HeartbeatTaskRunRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRunHeartbeat
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.heartbeat_task_run = _Endpoint(
            settings={
                'response_type': (TaskRunHeartbeat,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/runs/{runId}:heartbeat',
                'operation_id': 'heartbeat_task_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (HeartbeatTaskRunRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__heartbeat_task_run
        )

        def __list_task_runs(
            self,
            **kwargs
        ):
            """Get a list of task runs  # noqa: E501

            Get a list of task runs accessible by the current tenant ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_task_runs(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                sort (str): Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.). [optional]
                names (str): [optional]
                status (str): [optional]
                versions (str): [optional]
                acls (str): [optional]
                page_size (int): Optional parameter to define the page size returned. Valid inputs range from 1-1000.. [optional] if omitted the server will use the default value of 10
                page_token (str): pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRunSummaryPagedItems
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_task_runs = _Endpoint(
            settings={
                'response_type': (TaskRunSummaryPagedItems,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/runs',
                'operation_id': 'list_task_runs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'sort',
                    'names',
                    'status',
                    'versions',
                    'acls',
                    'page_size',
                    'page_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sort':
                        (str,),
                    'names':
                        (str,),
                    'status':
                        (str,),
                    'versions':
                        (str,),
                    'acls':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'sort': 'sort',
                    'names': 'names',
                    'status': 'status',
                    'versions': 'versions',
                    'acls': 'acls',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'sort': 'query',
                    'names': 'query',
                    'status': 'query',
                    'versions': 'query',
                    'acls': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_task_runs
        )
