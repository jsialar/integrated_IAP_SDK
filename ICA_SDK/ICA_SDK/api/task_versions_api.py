"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.create_task_version_request import CreateTaskVersionRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.launch_task_request import LaunchTaskRequest
from ICA_SDK.model.task_run import TaskRun
from ICA_SDK.model.task_version import TaskVersion
from ICA_SDK.model.task_version_summary_paged_items import TaskVersionSummaryPagedItems
from ICA_SDK.model.update_task_version_request import UpdateTaskVersionRequest


class TaskVersionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_task_version(
            self,
            task_id,
            **kwargs
        ):
            """Create a task version  # noqa: E501

            Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \"{{string}}\", and specified at launch time.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_task_version(task_id, async_req=True)
            >>> result = thread.get()

            Args:
                task_id (str):

            Keyword Args:
                body (CreateTaskVersionRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['task_id'] = \
                task_id
            return self.call_with_http_info(**kwargs)

        self.create_task_version = _Endpoint(
            settings={
                'response_type': (TaskVersion,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/{taskId}/versions',
                'operation_id': 'create_task_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'body',
                ],
                'required': [
                    'task_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (str,),
                    'body':
                        (CreateTaskVersionRequest,),
                },
                'attribute_map': {
                    'task_id': 'taskId',
                },
                'location_map': {
                    'task_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__create_task_version
        )

        def __get_task_version(
            self,
            task_id,
            version_id,
            **kwargs
        ):
            """Get the details of a task version  # noqa: E501

            Gets details of a task version for a given task version ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_task_version(task_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                task_id (str):
                version_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['task_id'] = \
                task_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.get_task_version = _Endpoint(
            settings={
                'response_type': (TaskVersion,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/{taskId}/versions/{versionId}',
                'operation_id': 'get_task_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'version_id',
                ],
                'required': [
                    'task_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (str,),
                    'version_id':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskId',
                    'version_id': 'versionId',
                },
                'location_map': {
                    'task_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_task_version
        )

        def __launch_task_run(
            self,
            task_id,
            version_id,
            **kwargs
        ):
            """Launch a task version  # noqa: E501

            Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.launch_task_run(task_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                task_id (str):
                version_id (str):

            Keyword Args:
                body (LaunchTaskRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['task_id'] = \
                task_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.launch_task_run = _Endpoint(
            settings={
                'response_type': (TaskRun,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/{taskId}/versions/{versionId}:launch',
                'operation_id': 'launch_task_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'version_id',
                    'body',
                ],
                'required': [
                    'task_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (str,),
                    'version_id':
                        (str,),
                    'body':
                        (LaunchTaskRequest,),
                },
                'attribute_map': {
                    'task_id': 'taskId',
                    'version_id': 'versionId',
                },
                'location_map': {
                    'task_id': 'path',
                    'version_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__launch_task_run
        )

        def __list_task_versions(
            self,
            task_id,
            **kwargs
        ):
            """Get a list of versions  # noqa: E501

            Gets a list of task versions within the given task accessible by the current tenant ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_task_versions(task_id, async_req=True)
            >>> result = thread.get()

            Args:
                task_id (str):

            Keyword Args:
                sort (str): Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.). [optional]
                versions (str): [optional]
                ids (str): [optional]
                acls (str): [optional]
                page_size (int): Optional parameter to define the page size returned. Valid inputs range from 1-1000.. [optional] if omitted the server will use the default value of 10
                page_token (str): pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskVersionSummaryPagedItems
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['task_id'] = \
                task_id
            return self.call_with_http_info(**kwargs)

        self.list_task_versions = _Endpoint(
            settings={
                'response_type': (TaskVersionSummaryPagedItems,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/{taskId}/versions',
                'operation_id': 'list_task_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'sort',
                    'versions',
                    'ids',
                    'acls',
                    'page_size',
                    'page_token',
                ],
                'required': [
                    'task_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (str,),
                    'sort':
                        (str,),
                    'versions':
                        (str,),
                    'ids':
                        (str,),
                    'acls':
                        (str,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                },
                'attribute_map': {
                    'task_id': 'taskId',
                    'sort': 'sort',
                    'versions': 'versions',
                    'ids': 'ids',
                    'acls': 'acls',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                },
                'location_map': {
                    'task_id': 'path',
                    'sort': 'query',
                    'versions': 'query',
                    'ids': 'query',
                    'acls': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_task_versions
        )

        def __update_task_version(
            self,
            task_id,
            version_id,
            **kwargs
        ):
            """Update task version properties  # noqa: E501

            Update details of a task version for a given task version ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_task_version(task_id, version_id, async_req=True)
            >>> result = thread.get()

            Args:
                task_id (str):
                version_id (str):

            Keyword Args:
                body (UpdateTaskVersionRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaskVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['task_id'] = \
                task_id
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.update_task_version = _Endpoint(
            settings={
                'response_type': (TaskVersion,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/tasks/{taskId}/versions/{versionId}',
                'operation_id': 'update_task_version',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_id',
                    'version_id',
                    'body',
                ],
                'required': [
                    'task_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_id':
                        (str,),
                    'version_id':
                        (str,),
                    'body':
                        (UpdateTaskVersionRequest,),
                },
                'attribute_map': {
                    'task_id': 'taskId',
                    'version_id': 'versionId',
                },
                'location_map': {
                    'task_id': 'path',
                    'version_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__update_task_version
        )
