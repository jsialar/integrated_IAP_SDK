"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.abort_sequencing_run_request import AbortSequencingRunRequest
from ICA_SDK.model.can_upload_response import CanUploadResponse
from ICA_SDK.model.close_run_upload_session_request import CloseRunUploadSessionRequest
from ICA_SDK.model.close_upload_session_response import CloseUploadSessionResponse
from ICA_SDK.model.complete_sequencing_run_upload_request import CompleteSequencingRunUploadRequest
from ICA_SDK.model.create_sequencing_run_analysis_configuration_request import CreateSequencingRunAnalysisConfigurationRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.generate_sample_sheet_for_sequencing_run_request import GenerateSampleSheetForSequencingRunRequest
from ICA_SDK.model.no_content_result import NoContentResult
from ICA_SDK.model.replace_sequencing_stats_request import ReplaceSequencingStatsRequest
from ICA_SDK.model.requeue_sequencing_run_analysis_request import RequeueSequencingRunAnalysisRequest
from ICA_SDK.model.run_direct_upload_info_request import RunDirectUploadInfoRequest
from ICA_SDK.model.run_verification_result import RunVerificationResult
from ICA_SDK.model.sample_sheet import SampleSheet
from ICA_SDK.model.sequencing_run import SequencingRun
from ICA_SDK.model.sequencing_run_analysis_configuration import SequencingRunAnalysisConfiguration
from ICA_SDK.model.sequencing_run_analysis_configuration_sequencing_run_analysis_configuration_sort_fields_paged_items import SequencingRunAnalysisConfigurationSequencingRunAnalysisConfigurationSortFieldsPagedItems
from ICA_SDK.model.sequencing_run_compact import SequencingRunCompact
from ICA_SDK.model.sequencing_run_compact_sequencing_run_sort_fields_paged_items import SequencingRunCompactSequencingRunSortFieldsPagedItems
from ICA_SDK.model.sequencing_run_contents_response import SequencingRunContentsResponse
from ICA_SDK.model.sequencing_stats_response import SequencingStatsResponse
from ICA_SDK.model.start_verification_request import StartVerificationRequest
from ICA_SDK.model.update_acl_request import UpdateAclRequest
from ICA_SDK.model.update_sequencing_run_analysis_configuration_request import UpdateSequencingRunAnalysisConfigurationRequest
from ICA_SDK.model.update_sequencing_run_contents_request import UpdateSequencingRunContentsRequest
from ICA_SDK.model.update_sequencing_run_request import UpdateSequencingRunRequest
from ICA_SDK.model.update_sequencing_run_status_request import UpdateSequencingRunStatusRequest


class SequencingRunsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __abort_sequencing_run(
            self,
            run_id,
            **kwargs
        ):
            """Abort a sequencing run.  # noqa: E501

            For a given sequencing run ID, abort the run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.abort_sequencing_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (AbortSequencingRunRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.abort_sequencing_run = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:abort',
                'operation_id': 'abort_sequencing_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (AbortSequencingRunRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__abort_sequencing_run
        )

        def __can_upload(
            self,
            run_id,
            **kwargs
        ):
            """Check whether the run is ready to upload.  # noqa: E501

            Check the status of the run and returns whether the run is ready to be uploaded.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.can_upload(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CanUploadResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.can_upload = _Endpoint(
            settings={
                'response_type': (CanUploadResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:canUpload',
                'operation_id': 'can_upload',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__can_upload
        )

        def __close_upload_session(
            self,
            run_id,
            **kwargs
        ):
            """Close an upload session for a sequencing run  # noqa: E501

            For a given sequencing run ID, close an upload session.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.close_upload_session(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (CloseRunUploadSessionRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CloseUploadSessionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.close_upload_session = _Endpoint(
            settings={
                'response_type': (CloseUploadSessionResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:closeUploadSession',
                'operation_id': 'close_upload_session',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (CloseRunUploadSessionRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__close_upload_session
        )

        def __complete_upload(
            self,
            run_id,
            **kwargs
        ):
            """Complete upload stage for a sequencing run.  # noqa: E501

            For a given sequencing run ID, complete the upload stage and close the upload session if provided.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.complete_upload(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (CompleteSequencingRunUploadRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.complete_upload = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:completeUpload',
                'operation_id': 'complete_upload',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (CompleteSequencingRunUploadRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__complete_upload
        )

        def __create_analysis_configuration(
            self,
            run_id,
            **kwargs
        ):
            """Create an analysis configuration for a sequencing run.  # noqa: E501

            For a given run ID, create an analysis configuration and return information about that analysis configuration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_analysis_configuration(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (CreateSequencingRunAnalysisConfigurationRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunAnalysisConfiguration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.create_analysis_configuration = _Endpoint(
            settings={
                'response_type': (SequencingRunAnalysisConfiguration,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/analyses',
                'operation_id': 'create_analysis_configuration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (CreateSequencingRunAnalysisConfigurationRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_analysis_configuration
        )

        def __delete_analysis_configuration(
            self,
            id,
            **kwargs
        ):
            """Delete an analysis configuration for a sequencing run.  # noqa: E501

            For a given run ID, delete an analysis configuration and return information about that analysis configuration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_analysis_configuration(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_analysis_configuration = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/analyses/{id}',
                'operation_id': 'delete_analysis_configuration',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_analysis_configuration
        )

        def __delete_sequencing_run(
            self,
            run_id,
            **kwargs
        ):
            """Delete sequencing run.  # noqa: E501

            For a given sequencing run ID, delete the sequencing run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_sequencing_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str): ID of the sequencing run

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NoContentResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.delete_sequencing_run = _Endpoint(
            settings={
                'response_type': (NoContentResult,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}',
                'operation_id': 'delete_sequencing_run',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_sequencing_run
        )

        def __generate_sample_sheet_for_sequencing_run(
            self,
            run_id,
            **kwargs
        ):
            """Generate sample sheet from a sequencing run.  # noqa: E501

            Generate sample sheet from a sequencing run, and return the CSV string of sample sheet.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_sample_sheet_for_sequencing_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (GenerateSampleSheetForSequencingRunRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SampleSheet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.generate_sample_sheet_for_sequencing_run = _Endpoint(
            settings={
                'response_type': (SampleSheet,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:generateSampleSheet',
                'operation_id': 'generate_sample_sheet_for_sequencing_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (GenerateSampleSheetForSequencingRunRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__generate_sample_sheet_for_sequencing_run
        )

        def __get_sequencing_run(
            self,
            run_id,
            **kwargs
        ):
            """Get sequencing run details.  # noqa: E501

            For a given sequencing run ID, get the associated run information.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_sequencing_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.get_sequencing_run = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}',
                'operation_id': 'get_sequencing_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_sequencing_run
        )

        def __get_sequencing_run_contents(
            self,
            run_id,
            **kwargs
        ):
            """ Get the content of a sequencing run.  # noqa: E501

            For a given a run ID, get the content of the sequencing run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_sequencing_run_contents(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str): ID of the sequencing run

            Keyword Args:
                include ([str]): Include flags to specify what is included in the response. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunContentsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.get_sequencing_run_contents = _Endpoint(
            settings={
                'response_type': (SequencingRunContentsResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/contents',
                'operation_id': 'get_sequencing_run_contents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'include',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {

                        "REFERENCEDRESOURCEMODELS": "ReferencedResourceModels"
                    },
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'include':
                        ([str],),
                },
                'attribute_map': {
                    'run_id': 'runId',
                    'include': 'include',
                },
                'location_map': {
                    'run_id': 'path',
                    'include': 'query',
                },
                'collection_format_map': {
                    'include': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_sequencing_run_contents
        )

        def __get_sequencing_stats(
            self,
            run_id,
            **kwargs
        ):
            """Get the sequencing stats of a sequencing run.  # noqa: E501

            For a given a run ID, get the sequencing stats of a sequencing run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_sequencing_stats(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str): ID of the sequencing run

            Keyword Args:
                include ([str]): Include flags to specify what is included in the response. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingStatsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.get_sequencing_stats = _Endpoint(
            settings={
                'response_type': (SequencingStatsResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/sequencingStats',
                'operation_id': 'get_sequencing_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'include',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {

                        "REFERENCEDRESOURCEMODELS": "ReferencedResourceModels"
                    },
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'include':
                        ([str],),
                },
                'attribute_map': {
                    'run_id': 'runId',
                    'include': 'include',
                },
                'location_map': {
                    'run_id': 'path',
                    'include': 'query',
                },
                'collection_format_map': {
                    'include': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_sequencing_stats
        )

        def __list_analysis_configurations(
            self,
            run_id,
            **kwargs
        ):
            """List analysis configurations for a sequencing run.  # noqa: E501

            List analysis configurations for a given run ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_analysis_configurations(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                include ([str]): Include flags to specify what is included in the request. [optional]
                page_size (int): Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.. [optional] if omitted the server will use the default value of 10
                page_token (str): Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.. [optional]
                sort (str): Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).. [optional] if omitted the server will use the default value of "timeCreated asc"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunAnalysisConfigurationSequencingRunAnalysisConfigurationSortFieldsPagedItems
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.list_analysis_configurations = _Endpoint(
            settings={
                'response_type': (SequencingRunAnalysisConfigurationSequencingRunAnalysisConfigurationSortFieldsPagedItems,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/analyses',
                'operation_id': 'list_analysis_configurations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'include',
                    'page_size',
                    'page_token',
                    'sort',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {

                        "TOTALITEMCOUNT": "TotalItemCount"
                    },
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'include':
                        ([str],),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                    'include': 'include',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'sort': 'sort',
                },
                'location_map': {
                    'run_id': 'path',
                    'include': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                    'include': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_analysis_configurations
        )

        def __list_sequencing_runs(
            self,
            **kwargs
        ):
            """Get a list of sequencing runs.  # noqa: E501

            Get a list of sequencing runs accessible by the request token.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_sequencing_runs(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                is_planned (bool): Optional parameter. Set to true to filter the run list and only include planned runs.. [optional]
                is_locked (bool): Optional parameter. Set to true to filter the run list and only include locked runs.. [optional]
                is_favorite (bool): Optional parameter. Set to true to filter the run list and only include favorite runs.. [optional]
                instrument_type (str): Optional parameter. Set to true to filter the run list and only include runs performed by the specified instrument type.. [optional]
                run_origin ([str]): Optional field. Used to filter the sequencing runs list by comma-separated RunOrigins values, e.g.  <example>Instrument,Simulator</example>. [optional]
                aggregate_run_status ([str]): Optional field. Used to filter the sequencing runs list by comma-separated AggregateRunStatus values, e.g <example>Aborted,Deleted,Running</example>. [optional]
                include ([str]): Include flags to specify what is included in the response. [optional]
                flow_cell_barcode (str): Filter by flowcell barcode. [optional]
                input_container_identifier (str): Filter by Input container identifier. [optional]
                regulatory_mode ([str]): Filter by regulatory modes using comma separated values, e.g <example>RUO,IVD,IUO</example>. [optional]
                requeued_from_run_id (str): Filter By Requeued Run Id. [optional]
                run_name ([str]): Filter by name of the sequencing run. [optional]
                is_completed (bool): Optional parameter. Set to true to filter the run list and only include completed (failed, aborted, successfully completed) runs.. [optional]
                include_completed_after_date (datetime): Optional parameter. Show runs that were completed after the provided Date as well as runs that are not completed. [optional]
                include_completed_before_date (datetime): Optional parameter. Show runs that were completed before the provided Date as well as runs that are not completed. [optional]
                tenant_ids ([str]): Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids. [optional]
                page_size (int): Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.. [optional] if omitted the server will use the default value of 10
                page_token (str): Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.. [optional]
                sort (str): Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).. [optional] if omitted the server will use the default value of "timeCreated asc"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunCompactSequencingRunSortFieldsPagedItems
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_sequencing_runs = _Endpoint(
            settings={
                'response_type': (SequencingRunCompactSequencingRunSortFieldsPagedItems,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs',
                'operation_id': 'list_sequencing_runs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'is_planned',
                    'is_locked',
                    'is_favorite',
                    'instrument_type',
                    'run_origin',
                    'aggregate_run_status',
                    'include',
                    'flow_cell_barcode',
                    'input_container_identifier',
                    'regulatory_mode',
                    'requeued_from_run_id',
                    'run_name',
                    'is_completed',
                    'include_completed_after_date',
                    'include_completed_before_date',
                    'tenant_ids',
                    'page_size',
                    'page_token',
                    'sort',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'run_origin',
                    'aggregate_run_status',
                    'include',
                    'regulatory_mode',
                ],
                'validation': [
                    'flow_cell_barcode',
                    'input_container_identifier',
                    'requeued_from_run_id',
                ]
            },
            root_map={
                'validations': {
                    ('flow_cell_barcode',): {
                        'max_length': 255,
                        'min_length': 0,
                    },
                    ('input_container_identifier',): {
                        'max_length': 255,
                        'min_length': 0,
                    },
                    ('requeued_from_run_id',): {
                        'max_length': 50,
                        'min_length': 0,
                    },
                },
                'allowed_values': {
                    ('run_origin',): {

                        "INSTRUMENT": "Instrument",
                        "INSTRUMENTPOSTRUNUPLOAD": "InstrumentPostRunUpload",
                        "SIMULATOR": "Simulator"
                    },
                    ('aggregate_run_status',): {

                        "ABORTED": "Aborted",
                        "ANALYSISFAILED": "AnalysisFailed",
                        "COMPLETE": "Complete",
                        "DELETED": "Deleted",
                        "FAILED": "Failed",
                        "FAILEDUPLOAD": "FailedUpload",
                        "NEEDSATTENTION": "NeedsAttention",
                        "PENDINGANALYSIS": "PendingAnalysis",
                        "PLANNED": "Planned",
                        "PREPAREDFORREQUEUE": "PreparedForRequeue",
                        "READYFORSEQUENCING": "ReadyForSequencing",
                        "REHYBING": "Rehybing",
                        "RUNNING": "Running",
                        "RUNNINGANALYSIS": "RunningAnalysis",
                        "RUNNINGINSTRUMENTANALYSIS": "RunningInstrumentAnalysis",
                        "TIMEDOUT": "TimedOut",
                        "UNKNOWN": "Unknown",
                        "UPLOADING": "Uploading",
                        "INSTRUMENTANALYSISCOMPLETED": "InstrumentAnalysisCompleted",
                        "INSTRUMENTCOMPLETED": "InstrumentCompleted",
                        "UPLOADCOMPLETED": "UploadCompleted",
                        "INSTRUMENTRUNCOMPLETED": "InstrumentRunCompleted",
                        "VERIFYING": "Verifying",
                        "VERIFICATIONFAILED": "VerificationFailed"
                    },
                    ('include',): {

                        "TOTALITEMCOUNT": "TotalItemCount",
                        "RUNSEQUENCINGSTATS": "RunSequencingStats",
                        "ANALYSISRUNS": "AnalysisRuns"
                    },
                    ('regulatory_mode',): {

                        "RUO": "RUO",
                        "IVD": "IVD",
                        "IUO": "IUO"
                    },
                },
                'openapi_types': {
                    'is_planned':
                        (bool,),
                    'is_locked':
                        (bool,),
                    'is_favorite':
                        (bool,),
                    'instrument_type':
                        (str,),
                    'run_origin':
                        ([str],),
                    'aggregate_run_status':
                        ([str],),
                    'include':
                        ([str],),
                    'flow_cell_barcode':
                        (str,),
                    'input_container_identifier':
                        (str,),
                    'regulatory_mode':
                        ([str],),
                    'requeued_from_run_id':
                        (str,),
                    'run_name':
                        ([str],),
                    'is_completed':
                        (bool,),
                    'include_completed_after_date':
                        (datetime,),
                    'include_completed_before_date':
                        (datetime,),
                    'tenant_ids':
                        ([str],),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'is_planned': 'isPlanned',
                    'is_locked': 'isLocked',
                    'is_favorite': 'isFavorite',
                    'instrument_type': 'instrumentType',
                    'run_origin': 'runOrigin',
                    'aggregate_run_status': 'aggregateRunStatus',
                    'include': 'include',
                    'flow_cell_barcode': 'flowCellBarcode',
                    'input_container_identifier': 'inputContainerIdentifier',
                    'regulatory_mode': 'regulatoryMode',
                    'requeued_from_run_id': 'requeuedFromRunId',
                    'run_name': 'runName',
                    'is_completed': 'isCompleted',
                    'include_completed_after_date': 'includeCompletedAfterDate',
                    'include_completed_before_date': 'includeCompletedBeforeDate',
                    'tenant_ids': 'tenantIds',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'sort': 'sort',
                },
                'location_map': {
                    'is_planned': 'query',
                    'is_locked': 'query',
                    'is_favorite': 'query',
                    'instrument_type': 'query',
                    'run_origin': 'query',
                    'aggregate_run_status': 'query',
                    'include': 'query',
                    'flow_cell_barcode': 'query',
                    'input_container_identifier': 'query',
                    'regulatory_mode': 'query',
                    'requeued_from_run_id': 'query',
                    'run_name': 'query',
                    'is_completed': 'query',
                    'include_completed_after_date': 'query',
                    'include_completed_before_date': 'query',
                    'tenant_ids': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                    'run_origin': 'csv',
                    'aggregate_run_status': 'csv',
                    'include': 'csv',
                    'regulatory_mode': 'csv',
                    'run_name': 'csv',
                    'tenant_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_sequencing_runs
        )

        def __merge_sequencing_run_acl(
            self,
            run_id,
            **kwargs
        ):
            """Merge the access control list of a sequencing run with the input access control list.  # noqa: E501

            For a given sequencing run, merge the access control list with the input access control list, and return information about the run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.merge_sequencing_run_acl(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.merge_sequencing_run_acl = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/acl',
                'operation_id': 'merge_sequencing_run_acl',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__merge_sequencing_run_acl
        )

        def __prepare_requeue(
            self,
            run_id,
            **kwargs
        ):
            """Prepare requeue run.  # noqa: E501

            Prepare requeue analysis of the same or different sequencing run with potentially different run content/analysis.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.prepare_requeue(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (RequeueSequencingRunAnalysisRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.prepare_requeue = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:prepareRequeue',
                'operation_id': 'prepare_requeue',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (RequeueSequencingRunAnalysisRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__prepare_requeue
        )

        def __remove_sequencing_run_acl(
            self,
            run_id,
            **kwargs
        ):
            """Remove the access control list of a sequencing run.  # noqa: E501

            Remove the access control list of a given sequencing run, and return information about the run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_sequencing_run_acl(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.remove_sequencing_run_acl = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/acl',
                'operation_id': 'remove_sequencing_run_acl',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_sequencing_run_acl
        )

        def __replace_sequencing_run_acl(
            self,
            run_id,
            **kwargs
        ):
            """ Replace the access control list of a sequencing run with the input access control list.  # noqa: E501

            For a given sequencing run, replace the access control list with the input access control list, and return information about the run.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_sequencing_run_acl(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.replace_sequencing_run_acl = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/acl',
                'operation_id': 'replace_sequencing_run_acl',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__replace_sequencing_run_acl
        )

        def __replace_sequencing_stats(
            self,
            run_id,
            **kwargs
        ):
            """Replace the sequencing stats of a sequencing run.  # noqa: E501

            Replace the sequencing stats of a sequencing run. Any existing sequencing stats will be deleted and replaced with the new contents of this request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_sequencing_stats(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (ReplaceSequencingStatsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingStatsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.replace_sequencing_stats = _Endpoint(
            settings={
                'response_type': (SequencingStatsResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:replaceSequencingStats',
                'operation_id': 'replace_sequencing_stats',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (ReplaceSequencingStatsRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__replace_sequencing_stats
        )

        def __run_direct_upload_info(
            self,
            run_id,
            **kwargs
        ):
            """Provide information about an uploaded file or set of files.  # noqa: E501

            For a given sequencing run ID, provide information about an uploaded file or set of files.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.run_direct_upload_info(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (RunDirectUploadInfoRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunCompact
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.run_direct_upload_info = _Endpoint(
            settings={
                'response_type': (SequencingRunCompact,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/directUploadInfo',
                'operation_id': 'run_direct_upload_info',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (RunDirectUploadInfoRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__run_direct_upload_info
        )

        def __start_requeue(
            self,
            run_id,
            **kwargs
        ):
            """Start prepared requeue run.  # noqa: E501

            Starts previously prepared requeue run for analysis.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.start_requeue(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.start_requeue = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:startRequeue',
                'operation_id': 'start_requeue',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__start_requeue
        )

        def __start_run_verification(
            self,
            run_id,
            **kwargs
        ):
            """Start verification for a run and return information about that run  # noqa: E501

            Start run verification  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.start_run_verification(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (StartVerificationRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RunVerificationResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.start_run_verification = _Endpoint(
            settings={
                'response_type': (RunVerificationResult,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:startVerification',
                'operation_id': 'start_run_verification',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (StartVerificationRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__start_run_verification
        )

        def __update_analysis_configuration(
            self,
            id,
            **kwargs
        ):
            """Update an analysis configuration.  # noqa: E501

            Update an analysis configuration, and return information about that analysis configuration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_analysis_configuration(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                body (UpdateSequencingRunAnalysisConfigurationRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunAnalysisConfiguration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.update_analysis_configuration = _Endpoint(
            settings={
                'response_type': (SequencingRunAnalysisConfiguration,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/analyses/{id}',
                'operation_id': 'update_analysis_configuration',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'body',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'body':
                        (UpdateSequencingRunAnalysisConfigurationRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_analysis_configuration
        )

        def __update_sequencing_run(
            self,
            run_id,
            **kwargs
        ):
            """Update information for an existing sequencing run.  # noqa: E501

            Update information for an existing sequencing run. This may include metadata, status, progress (started/completed/failed), and flags.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sequencing_run(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateSequencingRunRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.update_sequencing_run = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}',
                'operation_id': 'update_sequencing_run',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateSequencingRunRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_sequencing_run
        )

        def __update_sequencing_run_contents(
            self,
            run_id,
            **kwargs
        ):
            """Update the content of a sequencing run.  # noqa: E501

            For a given a run ID, update the sequencing run content with the current tokenâ€™s tenant ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sequencing_run_contents(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateSequencingRunContentsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRunContentsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.update_sequencing_run_contents = _Endpoint(
            settings={
                'response_type': (SequencingRunContentsResponse,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}/contents',
                'operation_id': 'update_sequencing_run_contents',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateSequencingRunContentsRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_sequencing_run_contents
        )

        def __update_sequencing_run_status(
            self,
            run_id,
            **kwargs
        ):
            """Update status information for an existing sequencing run.  # noqa: E501

            Update status information for an existing sequencing run. This may include status, progress (started/completed/failed), and flags.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_sequencing_run_status(run_id, async_req=True)
            >>> result = thread.get()

            Args:
                run_id (str):

            Keyword Args:
                body (UpdateSequencingRunStatusRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SequencingRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['run_id'] = \
                run_id
            return self.call_with_http_info(**kwargs)

        self.update_sequencing_run_status = _Endpoint(
            settings={
                'response_type': (SequencingRun,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/runs/{runId}:updateStatus',
                'operation_id': 'update_sequencing_run_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'run_id',
                    'body',
                ],
                'required': [
                    'run_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'run_id':
                        (str,),
                    'body':
                        (UpdateSequencingRunStatusRequest,),
                },
                'attribute_map': {
                    'run_id': 'runId',
                },
                'location_map': {
                    'run_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_sequencing_run_status
        )
