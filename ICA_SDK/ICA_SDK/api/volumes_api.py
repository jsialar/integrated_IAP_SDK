"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.create_volume_request import CreateVolumeRequest
from ICA_SDK.model.create_volume_response import CreateVolumeResponse
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.volume_list_response import VolumeListResponse
from ICA_SDK.model.volume_response import VolumeResponse


class VolumesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_volume(
            self,
            body,
            **kwargs
        ):
            """Create a volume in GDS and receive temporary credentials for upload  # noqa: E501

            Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_volume(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (CreateVolumeRequest):

            Keyword Args:
                include (str): Optionally include additional fields in the response.              Possible values: ObjectStoreAccess. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateVolumeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_volume = _Endpoint(
            settings={
                'response_type': (CreateVolumeResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumes',
                'operation_id': 'create_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'include',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateVolumeRequest,),
                    'include':
                        (str,),
                },
                'attribute_map': {
                    'include': 'include',
                },
                'location_map': {
                    'body': 'body',
                    'include': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_volume
        )

        def __delete_volume(
            self,
            volume_id,
            **kwargs
        ):
            """Deletes a volume by Id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_volume(volume_id, async_req=True)
            >>> result = thread.get()

            Args:
                volume_id (str): Unique identifier for the Volume to be deleted.

            Keyword Args:
                purge_object_store_data (bool): Optional and for BYOB only. If true, the volume's data in object storage will be erased.              This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['volume_id'] = \
                volume_id
            return self.call_with_http_info(**kwargs)

        self.delete_volume = _Endpoint(
            settings={
                'response_type': (VolumeResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumes/{volumeId}',
                'operation_id': 'delete_volume',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'purge_object_store_data',
                ],
                'required': [
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'purge_object_store_data':
                        (bool,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'purge_object_store_data': 'purgeObjectStoreData',
                },
                'location_map': {
                    'volume_id': 'path',
                    'purge_object_store_data': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_volume
        )

        def __get_volume(
            self,
            volume_id,
            **kwargs
        ):
            """Get information for the specified volume ID or volume name  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_volume(volume_id, async_req=True)
            >>> result = thread.get()

            Args:
                volume_id (str): Unique identifier for the volume to retrieve information for.

            Keyword Args:
                tenant_id (str): Optional parameter to see shared data in another tenant. [optional]
                metadata_include (str): Optional parameter to specify comma separated patterns to include metadata by their field names.. [optional]
                metadata_exclude (str): Optional parameter to specify comma separated patterns to exclude metadata by their field names.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['volume_id'] = \
                volume_id
            return self.call_with_http_info(**kwargs)

        self.get_volume = _Endpoint(
            settings={
                'response_type': (VolumeResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumes/{volumeId}',
                'operation_id': 'get_volume',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'tenant_id',
                    'metadata_include',
                    'metadata_exclude',
                ],
                'required': [
                    'volume_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        (str,),
                    'tenant_id':
                        (str,),
                    'metadata_include':
                        (str,),
                    'metadata_exclude':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volumeId',
                    'tenant_id': 'tenantId',
                    'metadata_include': 'metadata.include',
                    'metadata_exclude': 'metadata.exclude',
                },
                'location_map': {
                    'volume_id': 'path',
                    'tenant_id': 'query',
                    'metadata_include': 'query',
                    'metadata_exclude': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_volume
        )

        def __list_volumes(
            self,
            **kwargs
        ):
            """Get a list of volumes  # noqa: E501

            Get a list of volumes accessible by the current JWT tokenâ€™s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_volumes(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                page_size (int): START_DESC END_DESC. [optional]
                page_token (str): START_DESC END_DESC. [optional]
                include (str): Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl. [optional]
                tenant_id (str): Optional parameter to see shared data in another tenant. [optional]
                volume_configuration_name (str): Unique name of the volume configuration. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VolumeListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_volumes = _Endpoint(
            settings={
                'response_type': (VolumeListResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/volumes',
                'operation_id': 'list_volumes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page_size',
                    'page_token',
                    'include',
                    'tenant_id',
                    'volume_configuration_name',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'include':
                        (str,),
                    'tenant_id':
                        (str,),
                    'volume_configuration_name':
                        (str,),
                },
                'attribute_map': {
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'include': 'include',
                    'tenant_id': 'tenantId',
                    'volume_configuration_name': 'volumeConfigurationName',
                },
                'location_map': {
                    'page_size': 'query',
                    'page_token': 'query',
                    'include': 'query',
                    'tenant_id': 'query',
                    'volume_configuration_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_volumes
        )
