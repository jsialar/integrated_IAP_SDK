"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.complete_session_request import CompleteSessionRequest
from ICA_SDK.model.create_folder_request import CreateFolderRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.folder_archive_request import FolderArchiveRequest
from ICA_SDK.model.folder_copy_request import FolderCopyRequest
from ICA_SDK.model.folder_list_response import FolderListResponse
from ICA_SDK.model.folder_response import FolderResponse
from ICA_SDK.model.folder_unarchive_request import FolderUnarchiveRequest
from ICA_SDK.model.folder_update_request import FolderUpdateRequest
from ICA_SDK.model.folder_writeable_response import FolderWriteableResponse
from ICA_SDK.model.job_response import JobResponse
from ICA_SDK.model.session_response import SessionResponse


class FoldersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __archive_folder(
            self,
            folder_id,
            body,
            **kwargs
        ):
            """Archive a folder  # noqa: E501

            Archives a folder to a lower storage cost tier.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.archive_folder(folder_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to be archived.
                body (FolderArchiveRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.archive_folder = _Endpoint(
            settings={
                'response_type': (FolderResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}:archive',
                'operation_id': 'archive_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'body',
                ],
                'required': [
                    'folder_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'body':
                        (FolderArchiveRequest,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__archive_folder
        )

        def __complete_folder_session(
            self,
            folder_id,
            session_id,
            body,
            **kwargs
        ):
            """Complete a folder upload in GDS  # noqa: E501

            Complete a folder upload in GDS.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.complete_folder_session(folder_id, session_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder related to the upload session.
                session_id (str): The id of the upload session
                body (CompleteSessionRequest): The request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SessionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['session_id'] = \
                session_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.complete_folder_session = _Endpoint(
            settings={
                'response_type': (SessionResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}/sessions/{sessionId}:complete',
                'operation_id': 'complete_folder_session',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'session_id',
                    'body',
                ],
                'required': [
                    'folder_id',
                    'session_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'session_id':
                        (str,),
                    'body':
                        (CompleteSessionRequest,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'session_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__complete_folder_session
        )

        def __copy_folder(
            self,
            folder_id,
            body,
            **kwargs
        ):
            """Copy a folder  # noqa: E501

            Copy a folder into a target parent folder  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.copy_folder(folder_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to be copied.
                body (FolderCopyRequest):

            Keyword Args:
                tenant_id (str): Optional parameter to copy from a shared folder in another tenant. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.copy_folder = _Endpoint(
            settings={
                'response_type': (JobResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}:copy',
                'operation_id': 'copy_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'body',
                    'tenant_id',
                ],
                'required': [
                    'folder_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'body':
                        (FolderCopyRequest,),
                    'tenant_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'tenant_id': 'tenantId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'body': 'body',
                    'tenant_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__copy_folder
        )

        def __create_folder(
            self,
            body,
            **kwargs
        ):
            """Create a folder in GDS and receive credentials for upload  # noqa: E501

            Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_folder(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (CreateFolderRequest):

            Keyword Args:
                include (str): Optionally include additional fields in the response.              Possible values: ObjectStoreAccess. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderWriteableResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_folder = _Endpoint(
            settings={
                'response_type': (FolderWriteableResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders',
                'operation_id': 'create_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'include',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateFolderRequest,),
                    'include':
                        (str,),
                },
                'attribute_map': {
                    'include': 'include',
                },
                'location_map': {
                    'body': 'body',
                    'include': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_folder
        )

        def __delete_folder(
            self,
            folder_id,
            **kwargs
        ):
            """Deletes a folder by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_folder(folder_id, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to be deleted.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            return self.call_with_http_info(**kwargs)

        self.delete_folder = _Endpoint(
            settings={
                'response_type': (FolderResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}',
                'operation_id': 'delete_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_folder
        )

        def __get_folder(
            self,
            folder_id,
            **kwargs
        ):
            """Get information about a folder in GDS.  # noqa: E501

            Get information for the specified folder ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_folder(folder_id, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to retrieve.

            Keyword Args:
                tenant_id (str): Optional parameter to see shared data in another tenant. [optional]
                metadata_include (str): Optional parameter to specify comma separated patterns to include metadata by their field names.. [optional]
                metadata_exclude (str): Optional parameter to specify comma separated patterns to exclude metadata by their field names.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            return self.call_with_http_info(**kwargs)

        self.get_folder = _Endpoint(
            settings={
                'response_type': (FolderResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}',
                'operation_id': 'get_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'tenant_id',
                    'metadata_include',
                    'metadata_exclude',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'tenant_id':
                        (str,),
                    'metadata_include':
                        (str,),
                    'metadata_exclude':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'tenant_id': 'tenantId',
                    'metadata_include': 'metadata.include',
                    'metadata_exclude': 'metadata.exclude',
                },
                'location_map': {
                    'folder_id': 'path',
                    'tenant_id': 'query',
                    'metadata_include': 'query',
                    'metadata_exclude': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_folder
        )

        def __get_folder_job(
            self,
            folder_id,
            job_id,
            **kwargs
        ):
            """Get status of a folder job in GDS  # noqa: E501

            Get status of a folder job in GDS.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_folder_job(folder_id, job_id, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder related to the job.
                job_id (str): The id of the job

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['job_id'] = \
                job_id
            return self.call_with_http_info(**kwargs)

        self.get_folder_job = _Endpoint(
            settings={
                'response_type': (JobResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}/jobs/{jobId}',
                'operation_id': 'get_folder_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'job_id',
                ],
                'required': [
                    'folder_id',
                    'job_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'job_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'job_id': 'jobId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'job_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_folder_job
        )

        def __get_folder_session(
            self,
            folder_id,
            session_id,
            **kwargs
        ):
            """Get status of a folder upload in GDS  # noqa: E501

            Get status of a folder upload in GDS.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_folder_session(folder_id, session_id, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder related to the upload session.
                session_id (str): The id of the upload session

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SessionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['session_id'] = \
                session_id
            return self.call_with_http_info(**kwargs)

        self.get_folder_session = _Endpoint(
            settings={
                'response_type': (SessionResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}/sessions/{sessionId}',
                'operation_id': 'get_folder_session',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'session_id',
                ],
                'required': [
                    'folder_id',
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'session_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_folder_session
        )

        def __list_folders(
            self,
            **kwargs
        ):
            """Get a list of folders  # noqa: E501

            Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_folders(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                volume_id ([str]): Optional field that specifies comma-separated volume IDs to include in the list. [optional]
                volume_name ([str]): Optional field that specifies comma-separated volume names to include in the list. [optional]
                path ([str]): Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/).. [optional]
                job_statuses (str): Optional field that specifies comma-separated JobStatuses to include in the list. [optional]
                acls ([str]): Optional field that specifies comma-separated acls to include in the list. [optional]
                recursive (bool): Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths. [optional]
                page_size (int): START_DESC END_DESC. [optional]
                page_token (str): START_DESC END_DESC. [optional]
                include (str): Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl. [optional]
                tenant_id (str): Optional parameter to see shared data in another tenant. [optional]
                metadata_include (str): Optional parameter to specify comma separated patterns to include metadata by their field names.. [optional]
                metadata_exclude (str): Optional parameter to specify comma separated patterns to exclude metadata by their field names.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_folders = _Endpoint(
            settings={
                'response_type': (FolderListResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders',
                'operation_id': 'list_folders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'volume_id',
                    'volume_name',
                    'path',
                    'job_statuses',
                    'acls',
                    'recursive',
                    'page_size',
                    'page_token',
                    'include',
                    'tenant_id',
                    'metadata_include',
                    'metadata_exclude',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'volume_id':
                        ([str],),
                    'volume_name':
                        ([str],),
                    'path':
                        ([str],),
                    'job_statuses':
                        (str,),
                    'acls':
                        ([str],),
                    'recursive':
                        (bool,),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'include':
                        (str,),
                    'tenant_id':
                        (str,),
                    'metadata_include':
                        (str,),
                    'metadata_exclude':
                        (str,),
                },
                'attribute_map': {
                    'volume_id': 'volume.id',
                    'volume_name': 'volume.name',
                    'path': 'path',
                    'job_statuses': 'jobStatuses',
                    'acls': 'acls',
                    'recursive': 'recursive',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'include': 'include',
                    'tenant_id': 'tenantId',
                    'metadata_include': 'metadata.include',
                    'metadata_exclude': 'metadata.exclude',
                },
                'location_map': {
                    'volume_id': 'query',
                    'volume_name': 'query',
                    'path': 'query',
                    'job_statuses': 'query',
                    'acls': 'query',
                    'recursive': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                    'include': 'query',
                    'tenant_id': 'query',
                    'metadata_include': 'query',
                    'metadata_exclude': 'query',
                },
                'collection_format_map': {
                    'volume_id': 'csv',
                    'volume_name': 'csv',
                    'path': 'csv',
                    'acls': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_folders
        )

        def __unarchive_folder(
            self,
            folder_id,
            body,
            **kwargs
        ):
            """Unarchive a folder  # noqa: E501

            Unarchive a folder from a lower storage cost tier.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unarchive_folder(folder_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to be unarchived.
                body (FolderUnarchiveRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.unarchive_folder = _Endpoint(
            settings={
                'response_type': (FolderResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}:unarchive',
                'operation_id': 'unarchive_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'body',
                ],
                'required': [
                    'folder_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'body':
                        (FolderUnarchiveRequest,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__unarchive_folder
        )

        def __update_folder(
            self,
            folder_id,
            **kwargs
        ):
            """Update a folder content or acl  # noqa: E501

            Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time.  Optionally overwrite the acl for this folder if acl is provided in the request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_folder(folder_id, async_req=True)
            >>> result = thread.get()

            Args:
                folder_id (str): Unique identifier for the folder to be updated.

            Keyword Args:
                include (str): Optionally include additional fields in the response.              Possible values: ObjectStoreAccess. [optional]
                body (FolderUpdateRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FolderWriteableResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['folder_id'] = \
                folder_id
            return self.call_with_http_info(**kwargs)

        self.update_folder = _Endpoint(
            settings={
                'response_type': (FolderWriteableResponse,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/v1/folders/{folderId}',
                'operation_id': 'update_folder',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'include',
                    'body',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'include':
                        (str,),
                    'body':
                        (FolderUpdateRequest,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'include': 'include',
                },
                'location_map': {
                    'folder_id': 'path',
                    'include': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            callable=__update_folder
        )
