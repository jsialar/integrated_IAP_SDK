"""
    IAP Services

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ICA_SDK.api_client import ApiClient, Endpoint as _Endpoint
from ICA_SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ICA_SDK.model.create_index_adapter_kit_by_definition_request import CreateIndexAdapterKitByDefinitionRequest
from ICA_SDK.model.create_index_adapter_kit_request import CreateIndexAdapterKitRequest
from ICA_SDK.model.error_response import ErrorResponse
from ICA_SDK.model.index_adapter_kit import IndexAdapterKit
from ICA_SDK.model.index_adapter_kit_compact_index_adapter_kit_sort_field_paged_items import IndexAdapterKitCompactIndexAdapterKitSortFieldPagedItems
from ICA_SDK.model.no_content_result import NoContentResult
from ICA_SDK.model.update_acl_request import UpdateAclRequest
from ICA_SDK.model.update_index_adapter_kit_by_definition_request import UpdateIndexAdapterKitByDefinitionRequest
from ICA_SDK.model.update_index_adapter_kit_request import UpdateIndexAdapterKitRequest


class IndexAdapterKitsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_index_adapter_kit(
            self,
            **kwargs
        ):
            """Create an index adapter kit.  # noqa: E501

            Create an index adapter kit, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_index_adapter_kit(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (CreateIndexAdapterKitRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_index_adapter_kit = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits',
                'operation_id': 'create_index_adapter_kit',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateIndexAdapterKitRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_index_adapter_kit
        )

        def __create_index_adapter_kit_by_definition(
            self,
            **kwargs
        ):
            """Create an index adapter kit using a definition string.  # noqa: E501

            Create an index adapter kit, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_index_adapter_kit_by_definition(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                body (CreateIndexAdapterKitByDefinitionRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_index_adapter_kit_by_definition = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/definition',
                'operation_id': 'create_index_adapter_kit_by_definition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateIndexAdapterKitByDefinitionRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_index_adapter_kit_by_definition
        )

        def __delete_index_adapter_kit(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Delete index adapter kit.  # noqa: E501

            For a given index adapter kit ID, delete the index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_index_adapter_kit(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str): ID of the index adapter kit

            Keyword Args:
                force (bool): Force delete the index adapter kit. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NoContentResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.delete_index_adapter_kit = _Endpoint(
            settings={
                'response_type': (NoContentResult,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}',
                'operation_id': 'delete_index_adapter_kit',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'force',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                    'force': 'force',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_index_adapter_kit
        )

        def __get_index_adapter_kit(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Get index adapter kit details.  # noqa: E501

            For a given index adapter kit ID, get the index adapter kit details.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_index_adapter_kit(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str): ID of the index adapter kit

            Keyword Args:
                include ([str]): Include flags to specify what is included in the response. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.get_index_adapter_kit = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}',
                'operation_id': 'get_index_adapter_kit',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'include',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {

                        "COMPATIBLELIBRARYPREPKITS": "CompatibleLibraryPrepKits",
                        "CANUPDATE": "CanUpdate"
                    },
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'include':
                        ([str],),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                    'include': 'include',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'include': 'query',
                },
                'collection_format_map': {
                    'include': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_index_adapter_kit
        )

        def __list_index_adapter_kits(
            self,
            **kwargs
        ):
            """Get a list of index adapter kits.  # noqa: E501

            Get a list of index adapter kits accessible by the current request token.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_index_adapter_kits(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                include ([str]): Include flags to specify what is included in the response. [optional]
                tenant_ids ([str]): Optional parameter to limit the response to be with in provided tenant ids  Comma separated to support multiple tenant ids. [optional]
                page_size (int): Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified.. [optional] if omitted the server will use the default value of 10
                page_token (str): Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified.. [optional]
                sort (str): Specifies the order to include list items as \"_{fieldName}_ [asc|desc]\". The second field is optional and specifies the sort direction (\"asc\" for ascending or \"desc\" for descending).. [optional] if omitted the server will use the default value of "timeCreated asc"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKitCompactIndexAdapterKitSortFieldPagedItems
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_index_adapter_kits = _Endpoint(
            settings={
                'response_type': (IndexAdapterKitCompactIndexAdapterKitSortFieldPagedItems,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits',
                'operation_id': 'list_index_adapter_kits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'include',
                    'tenant_ids',
                    'page_size',
                    'page_token',
                    'sort',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {

                        "TOTALITEMCOUNT": "TotalItemCount"
                    },
                },
                'openapi_types': {
                    'include':
                        ([str],),
                    'tenant_ids':
                        ([str],),
                    'page_size':
                        (int,),
                    'page_token':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'include': 'include',
                    'tenant_ids': 'tenantIds',
                    'page_size': 'pageSize',
                    'page_token': 'pageToken',
                    'sort': 'sort',
                },
                'location_map': {
                    'include': 'query',
                    'tenant_ids': 'query',
                    'page_size': 'query',
                    'page_token': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                    'include': 'csv',
                    'tenant_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_index_adapter_kits
        )

        def __merge_index_adapter_kit_acl(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Merge the access control list of an index adapter kit with the input access control list.  # noqa: E501

            Merge the access control list of an index adapter kit with the input access control list, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.merge_index_adapter_kit_acl(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.merge_index_adapter_kit_acl = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}/acl',
                'operation_id': 'merge_index_adapter_kit_acl',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'body',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__merge_index_adapter_kit_acl
        )

        def __remove_index_adapter_kit_acl(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Remove the access control list of an index adapter kit.  # noqa: E501

            Remove the access control list of a given index adapter kit, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_index_adapter_kit_acl(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.remove_index_adapter_kit_acl = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}/acl',
                'operation_id': 'remove_index_adapter_kit_acl',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'body',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__remove_index_adapter_kit_acl
        )

        def __replace_index_adapter_kit_acl(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Replace the access control list of an index adapter kit with the input access control list.  # noqa: E501

            Replace the access control list of an index adapter kit with the input access control list, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_index_adapter_kit_acl(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str):

            Keyword Args:
                body (UpdateAclRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.replace_index_adapter_kit_acl = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}/acl',
                'operation_id': 'replace_index_adapter_kit_acl',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'body',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'body':
                        (UpdateAclRequest,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__replace_index_adapter_kit_acl
        )

        def __update_index_adapter_kit(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Update an index adapter kit.  # noqa: E501

            Update an index adapter kit, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_index_adapter_kit(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str):

            Keyword Args:
                body (UpdateIndexAdapterKitRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.update_index_adapter_kit = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}',
                'operation_id': 'update_index_adapter_kit',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'body',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'body':
                        (UpdateIndexAdapterKitRequest,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_index_adapter_kit
        )

        def __update_index_adapter_kit_by_definition(
            self,
            index_adapter_kit_id,
            **kwargs
        ):
            """Update an index adapter kit using a definition string.  # noqa: E501

            Update an index adapter kit, and return information about that index adapter kit.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_index_adapter_kit_by_definition(index_adapter_kit_id, async_req=True)
            >>> result = thread.get()

            Args:
                index_adapter_kit_id (str):

            Keyword Args:
                body (UpdateIndexAdapterKitByDefinitionRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IndexAdapterKit
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['index_adapter_kit_id'] = \
                index_adapter_kit_id
            return self.call_with_http_info(**kwargs)

        self.update_index_adapter_kit_by_definition = _Endpoint(
            settings={
                'response_type': (IndexAdapterKit,),
                'auth': [
                    'Basic',
                    'Bearer'
                ],
                'endpoint_path': '/v1/sequencing/indexadapterkits/{indexAdapterKitId}/definition',
                'operation_id': 'update_index_adapter_kit_by_definition',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'index_adapter_kit_id',
                    'body',
                ],
                'required': [
                    'index_adapter_kit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'index_adapter_kit_id':
                        (str,),
                    'body':
                        (UpdateIndexAdapterKitByDefinitionRequest,),
                },
                'attribute_map': {
                    'index_adapter_kit_id': 'indexAdapterKitId',
                },
                'location_map': {
                    'index_adapter_kit_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_index_adapter_kit_by_definition
        )
